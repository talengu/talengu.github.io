<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一塘</title>
  
  
  <link href="/public/atom.xml" rel="self"/>
  
  <link href="https://talengu.github.io/public/"/>
  <updated>2025-04-27T01:41:50.000Z</updated>
  <id>https://talengu.github.io/public/</id>
  
  <author>
    <name>一塘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「转」本科生反驳 40 年前的猜想，发明新型哈希表</title>
    <link href="https://talengu.github.io/public/2025/04/27/hash_tables_news/"/>
    <id>https://talengu.github.io/public/2025/04/27/hash_tables_news/</id>
    <published>2025-04-27T12:00:00.000Z</published>
    <updated>2025-04-27T01:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><blockquote><p>本文原文发表于《广达杂志》（Quanta Magazine）。</p></blockquote><p><a href="https://www.quantamagazine.org/undergraduate-upends-a-40-year-old-data-science-conjecture-20250210/" target="_blank" rel="noopener"><em>本文</em></a>原文_发表于 <a href="https://www.quantamagazine.org/" target="_blank" rel="noopener">《广达杂志》（Quanta Magazine</a>）。_</p><p>2021 年秋天的某个时候，罗格斯大学 （Rutgers University） 的本科生安德鲁·克拉皮文 （Andrew Krapivin） 遇到了一篇改变他生活的论文。当时，克拉皮文并没有多想。但两年后，当他终于抽出时间阅读这篇论文时（用他的话说，“只是为了好玩”），他的努力将导致对计算机科学中广泛使用的工具的重新思考。</p>  <a id="more"></a><p>该论文的标题“<a href="https://arxiv.org/abs/2111.12800" target="_blank" rel="noopener">Tiny Pointers</a>”指的是箭头状实体，可以将您引导至计算机内存中的一条信息或元素。Krapivin 很快就想出了一种潜在的方法来进一步缩小指针，从而减少它们消耗的内存。但是，为了实现这一点，他需要一种更好的方法来组织指针将指向的数据。</p><p>他转向了一种称为哈希表的常用数据存储方法。但在修补过程中，Krapivin 意识到他发明了一种新型的哈希表，这种表的运行速度比预期的要快 — 查找特定元素所需的时间和步骤更少。</p><p>“Tiny Pointers”论文的合著者、Krapivin 在罗格斯大学的前教授 <a href="https://engineering.nyu.edu/faculty/martin-farach-colton" target="_blank" rel="noopener">Martín Farach-Colton</a> 最初对 Krapivin 的新设计持怀疑态度。哈希表是所有计算机科学中研究最深入的数据结构之一;这个预告听起来好得令人难以置信。但为了保险起见，他请了一位经常合作的人（也是《Tiny Pointers》的合著者），卡内基梅隆大学的<a href="https://csd.cmu.edu/people/faculty/william-kuszmaul" target="_blank" rel="noopener">威廉·库斯莫尔（William Kuszmaul</a>）来看看他学生的发明。库斯莫尔有不同的反应。“你不只是想出了一个很酷的哈希表，”他记得对 Krapivin 说。“你居然彻底抹杀了一个 40 年前的猜想！”</p><p><img src="/public/2025/04/27/hash_tables_news/4540c60338f01ec8cccbe2f8baa9f536_MD5.jpg" alt></p><p>Andrew Krapivin 没有打算这样做，它颠覆了围绕哈希表的常见思维，哈希表是计算机科学中研究得最多的工具之一。</p><p>照片：Phillip Ammon for Quanta Magazine</p><p>Krapivin（现在是剑桥大学的研究生）、Farach-Colton（现在在纽约大学）和 Kuszmaul 在 <a href="https://arxiv.org/abs/2501.02305" target="_blank" rel="noopener">2025 年 1 月</a>的一篇论文中一起证明，这种新的哈希表确实可以比人们认为的更快地找到元素。他们这样做，就反驳了一个长期以来被认为是正确的猜想。</p><p>“这是一篇重要的论文，”纽约市康奈尔理工学院的<a href="https://ajhconway.com/" target="_blank" rel="noopener">亚历克斯·康威（Alex Conway</a>）说。“哈希表是我们拥有的最古老的数据结构之一。而且它们仍然是最有效的数据存储方式之一。然而，他说，关于它们如何运作仍然存在悬而未决的问题。“这篇论文以令人惊讶的方式回答了其中的几个问题。”</p><p>哈希表在计算中无处不在，部分原因是它们的简单性和易用性。它们旨在允许用户执行三项作：“查询”（搜索）元素、删除元素或将元素插入空槽。第一个哈希表可以追溯到 1950 年代初，从那时起，计算机科学家一直在研究和使用它们。除其他外，研究人员希望弄清楚其中一些作的速度限制。例如，新的搜索或插入可能有多快？</p><p><img src="/public/2025/04/27/hash_tables_news/94be07a640f87d1921f3057b2e88b1c4_MD5.jpg" alt></p><p>Martín Farach-Colton 帮助 Krapivin 证明他的新哈希表与一个长期存在的猜想相矛盾。</p><p>摄影：Andrew Farach-Colton</p><p>答案通常取决于在哈希表中查找空位所需的时间。反过来，这通常取决于哈希表的填充程度。充实度可以用总体百分比来描述——这个表格是 50%，那个表格是 90%——但研究人员经常处理更完整的表格。因此，他们可能会使用一个由 <em>x</em> 表示的整数来指定哈希表接近 100% 满的程度。如果 <em>x</em> 为 100，则表已满 99%。如果 <em>x</em> 为 1,000，则表已满 99.9%。这种填充度度量提供了一种便捷的方法来评估执行查询或插入等作需要多长时间。</p><p>研究人员早就知道，对于某些常见的哈希表，进行最差的可能插入（例如，将项目放入最后一个剩余的空位）所需的预期时间与 <em>x</em> 成正比。“如果你的哈希表已经满了 99%，”Kuszmaul 说，“那么你必须查看大约 100 个不同的位置才能找到一个空闲位置是有道理的。</p><p>在 <a href="https://dl.acm.org/doi/10.1145/3828.3836" target="_blank" rel="noopener">1985</a> 年的一篇论文中，后来获得 A.M. 图灵奖的计算机科学家 <a href="https://amturing.acm.org/award_winners/yao_1611524.cfm" target="_blank" rel="noopener">Andrew Yao</a> 断言，在具有一组特定属性的哈希表中，查找单个元素或空点的最佳方法是随机遍历潜在点，这种方法称为统一探测。他还表示，在最坏的情况下，你正在寻找最后一个剩余的空位，你永远无法做得比 <em>x</em> 更好。40 年来，大多数计算机科学家都认为姚明的猜想是正确的。</p><p>克拉皮文并没有被传统智慧所阻碍，原因很简单，他没有意识到这一点。“我在不知道姚明的猜想的情况下做了这件事，”他说。他对微小指针的探索导致了一种新型的哈希表，一种不依赖于统一探测的哈希表。对于这个新的哈希表，最坏情况下的查询和插入所需的时间与 （log <em>x</em>）2 成正比，比 <em>x</em> 快得多。这个结果直接与姚的猜想相矛盾。Farach-Colton 和 Kuszmaul 帮助 Krapivin 证明 （log <em>x</em>）2 是 Yao 所写的流行哈希表类别的最佳、无敌的边界。</p><p>“这个结果很美，因为它解决并解决了这样一个经典问题，”卡内基梅隆大学的 <a href="http://www.cs.cmu.edu/~guyb/" target="_blank" rel="noopener">Guy Blelloch</a> 说。</p><p>“他们不仅反驳了[姚明的猜想]，还为他的问题找到了最好的答案，”滑铁卢大学（University of Waterloo）的<a href="https://cs.uwaterloo.ca/about/people/sassadi" target="_blank" rel="noopener">塞佩尔·阿萨迪（Sepehr Assadi</a>）说。“我们本可以再过 40 年才知道正确的答案。”</p><p><img src="/public/2025/04/27/hash_tables_news/012bca0306b004b04731e17eb0357f1f_MD5.jpg" alt></p><p>剑桥大学国王学院桥上的 Krapivin。他的新哈希表可以以前所未有的速度查找和存储数据。</p><p>照片：Phillip Ammon 为 Quanta 杂志拍摄</p><p>除了反驳姚明的猜想外，这篇新论文还包含了许多人认为更令人惊讶的结果。它与一个相关但略有不同的情况有关：在 1985 年，Yao 不仅研究了查询的最坏情况，还研究了所有可能的查询所花费的平均时间。他证明，具有某些属性的哈希表（包括那些标记为“贪婪”的哈希表，这意味着必须将新元素放置在第一个可用位置）永远无法实现比 log <em>x</em> 更好的平均时间。</p><p>Farach-Colton、Krapivin 和 Kuszmaul 想看看同样的限制是否也适用于非贪婪哈希表。他们通过提供一个反例来证明它没有，一个非贪婪哈希表，平均查询时间比 log <em>x</em> 好得多。事实上，它根本不依赖于 <em>x</em>。“你会得到一个数字，”Farach-Colton 说，“它只是一个常数，不取决于哈希表的填充程度。无论哈希表的填充度如何，您都可以实现恒定的平均查询时间，这一事实完全出乎意料，即使对作者自己也是如此。</p><p>Conway 说，该团队的结果可能不会立即导致任何申请，但这并不是最重要的。“更好地了解这类数据结构很重要。你不知道这样的结果什么时候会解锁一些让你在练习中做得更好的东西。</p><hr><p><a href="https://www.quantamagazine.org/undergraduate-upends-a-40-year-old-data-science-conjecture-20250210/" target="_blank" rel="noopener"><em>原文</em></a><em>经 Quanta Magazine 许可转载，<a href="https://www.quantamagazine.org/" target="_blank" rel="noopener">Quanta Magazine</a> 是</em> <a href="https://www.simonsfoundation.org/" target="_blank" rel="noopener"><em>Simons 基金会</em></a>的独立编辑出版物 <em>，其使命是通过报道数学、物理和生命科学的研究发展和趋势来增强公众对科学的理解。</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;¶&lt;/a&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本文原文发表于《广达杂志》（Quanta Magazine）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.quantamagazine.org/undergraduate-upends-a-40-year-old-data-science-conjecture-20250210/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;本文&lt;/em&gt;&lt;/a&gt;原文_发表于 &lt;a href=&quot;https://www.quantamagazine.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《广达杂志》（Quanta Magazine&lt;/a&gt;）。_&lt;/p&gt;
&lt;p&gt;2021 年秋天的某个时候，罗格斯大学 （Rutgers University） 的本科生安德鲁·克拉皮文 （Andrew Krapivin） 遇到了一篇改变他生活的论文。当时，克拉皮文并没有多想。但两年后，当他终于抽出时间阅读这篇论文时（用他的话说，“只是为了好玩”），他的努力将导致对计算机科学中广泛使用的工具的重新思考。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="https://talengu.github.io/public/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="哈希" scheme="https://talengu.github.io/public/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>「202502月度汇报」auto report</title>
    <link href="https://talengu.github.io/public/2025/02/15/test/202502/"/>
    <id>https://talengu.github.io/public/2025/02/15/test/202502/</id>
    <published>2025-02-15T16:00:04.000Z</published>
    <updated>2025-02-15T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>✅ : 0 📅 : 0 🔖 : 0ttrss标记个数: 3</p><a id="more"></a><h2 id="统计-✅-0-📅-0-🔖-0"><a class="header-anchor" href="#统计-✅-0-📅-0-🔖-0">¶</a>=&gt; 统计 ✅ : 0 📅 : 0 🔖 : 0</h2><h3 id="✅-0"><a class="header-anchor" href="#✅-0">¶</a>✅ : 0</h3><h3 id="📅-0"><a class="header-anchor" href="#📅-0">¶</a>📅 : 0</h3><h3 id="🔖-0"><a class="header-anchor" href="#🔖-0">¶</a>🔖 : 0</h3><h2 id="ttrss标记个数-3"><a class="header-anchor" href="#ttrss标记个数-3">¶</a>=&gt; ttrss标记个数: 3</h2><h3 id="此时此刻，用免费的-Cursor-使用免费的-DeepSeek-R1-模型"><a class="header-anchor" href="#此时此刻，用免费的-Cursor-使用免费的-DeepSeek-R1-模型">¶</a><a href="https://www.appinn.com/cursor-deepseek-ri/" target="_blank" rel="noopener">此时此刻，用免费的 Cursor 使用免费的 DeepSeek-R1 模型</a></h3><p>pubdata:2025-02-03 12:36:43markdate:2025-02-04 13:30:11.821415</p><h3 id="目前可用的-DeepSeek-R1-模型-API-服务商-2025年2月"><a class="header-anchor" href="#目前可用的-DeepSeek-R1-模型-API-服务商-2025年2月">¶</a><a href="https://www.appinn.com/deepseek-api-service/" target="_blank" rel="noopener">目前可用的 DeepSeek R1 模型 API 服务商(2025年2月)</a></h3><p>pubdata:2025-02-14 04:20:08markdate:2025-02-17 00:30:00.562267</p><h3 id="使用WireGuard内网穿透"><a class="header-anchor" href="#使用WireGuard内网穿透">¶</a><a href="https://pengtech.net/network/Internal_network_penetration.html" target="_blank" rel="noopener">使用WireGuard内网穿透</a></h3><p>pubdata:2024-08-26 10:29:22markdate:2025-02-22 17:32:42.166654</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;✅ : 0 📅 : 0 🔖 : 0
ttrss标记个数: 3&lt;/p&gt;
    
    </summary>
    
      <category term="月度汇报" scheme="https://talengu.github.io/public/categories/%E6%9C%88%E5%BA%A6%E6%B1%87%E6%8A%A5/"/>
    
    
      <category term="月度汇报" scheme="https://talengu.github.io/public/tags/%E6%9C%88%E5%BA%A6%E6%B1%87%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>「202501月度汇报」auto report</title>
    <link href="https://talengu.github.io/public/2025/01/15/test/202501/"/>
    <id>https://talengu.github.io/public/2025/01/15/test/202501/</id>
    <published>2025-01-15T16:00:04.000Z</published>
    <updated>2025-01-15T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>✅ : 0 📅 : 0 🔖 : 0ttrss标记个数: 4</p><a id="more"></a><h2 id="统计-✅-0-📅-0-🔖-0"><a class="header-anchor" href="#统计-✅-0-📅-0-🔖-0">¶</a>=&gt; 统计 ✅ : 0 📅 : 0 🔖 : 0</h2><h3 id="✅-0"><a class="header-anchor" href="#✅-0">¶</a>✅ : 0</h3><h3 id="📅-0"><a class="header-anchor" href="#📅-0">¶</a>📅 : 0</h3><h3 id="🔖-0"><a class="header-anchor" href="#🔖-0">¶</a>🔖 : 0</h3><h2 id="ttrss标记个数-4"><a class="header-anchor" href="#ttrss标记个数-4">¶</a>=&gt; ttrss标记个数: 4</h2><h3 id="被雪覆盖的长城，中国-©-View-Stock-Alamy-Stock-Photo"><a class="header-anchor" href="#被雪覆盖的长城，中国-©-View-Stock-Alamy-Stock-Photo">¶</a><a href="https://www.bing.com/search?q=%E4%B8%AD%E5%9B%BD%E9%95%BF%E5%9F%8E&amp;form=hpcapt&amp;mkt=zh-cn" target="_blank" rel="noopener">被雪覆盖的长城，中国 (© View Stock/Alamy Stock Photo)</a></h3><p>pubdata:2025-01-07 16:02:38markdate:2025-01-08 00:19:53.208160</p><h3 id="Mashups-–-复活-Yahoo-Pipes，过滤、组合、转换-RSS、CSV"><a class="header-anchor" href="#Mashups-–-复活-Yahoo-Pipes，过滤、组合、转换-RSS、CSV">¶</a><a href="https://www.appinn.com/mashups-alternative-yahoo-pipes/" target="_blank" rel="noopener">Mashups – 复活 Yahoo! Pipes，过滤、组合、转换 RSS、CSV</a></h3><p>pubdata:2025-01-08 13:15:41markdate:2025-01-11 04:07:48.727884</p><h3 id="PrivTracker-–-开源的私人-BT-Tracker-服务器地址：超大文件分享的又一个选择"><a class="header-anchor" href="#PrivTracker-–-开源的私人-BT-Tracker-服务器地址：超大文件分享的又一个选择">¶</a><a href="https://www.appinn.com/privtracker/" target="_blank" rel="noopener">PrivTracker – 开源的私人 BT Tracker 服务器地址：超大文件分享的又一个选择</a></h3><p>pubdata:2025-01-12 08:05:23markdate:2025-01-14 06:34:05.331254</p><h3 id="Wine-10-0-发布，在-macOS、Linux、Android-上运行-Windows-程序、游戏"><a class="header-anchor" href="#Wine-10-0-发布，在-macOS、Linux、Android-上运行-Windows-程序、游戏">¶</a><a href="https://www.appinn.com/wine-10-0/" target="_blank" rel="noopener">Wine 10.0 发布，在 macOS、Linux、Android 上运行 Windows 程序、游戏</a></h3><p>pubdata:2025-01-23 09:13:05markdate:2025-01-24 07:41:33.722685</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;✅ : 0 📅 : 0 🔖 : 0
ttrss标记个数: 4&lt;/p&gt;
    
    </summary>
    
      <category term="月度汇报" scheme="https://talengu.github.io/public/categories/%E6%9C%88%E5%BA%A6%E6%B1%87%E6%8A%A5/"/>
    
    
      <category term="月度汇报" scheme="https://talengu.github.io/public/tags/%E6%9C%88%E5%BA%A6%E6%B1%87%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>「2024年度汇报」ttrss</title>
    <link href="https://talengu.github.io/public/2024/12/31/test/2024/"/>
    <id>https://talengu.github.io/public/2024/12/31/test/2024/</id>
    <published>2024-12-31T16:00:04.000Z</published>
    <updated>2024-12-31T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>年度汇报，记录一下过去一年的工作和生活。</p><a id="more"></a><h3 id="Qwerty-Learner-–-目的不纯的在线打字练习工具：英语、日语、德语，Phthon、C-、AI、Go、Java"><a class="header-anchor" href="#Qwerty-Learner-–-目的不纯的在线打字练习工具：英语、日语、德语，Phthon、C-、AI、Go、Java">¶</a><a href="https://www.appinn.com/qwerty-learner/" target="_blank" rel="noopener">Qwerty Learner – 目的不纯的在线打字练习工具：英语、日语、德语，Phthon、C++、AI、Go、Java</a></h3><p>pubdata:2024-01-01 09:14:41markdate:2024-01-02 01:15:24.539920</p><h3 id="不读可以先收藏：2023-少数派年度高分内容「合订本」"><a class="header-anchor" href="#不读可以先收藏：2023-少数派年度高分内容「合订本」">¶</a><a href="https://sspai.com/post/85521" target="_blank" rel="noopener">不读可以先收藏：2023 少数派年度高分内容「合订本」</a></h3><p>pubdata:2024-01-02 08:00:00markdate:2024-01-03 10:58:04.320889</p><h3 id="截图-贴图工具-PixPin-新增截图历史记录回溯，可找回之前的截图，以及之前的截图区域"><a class="header-anchor" href="#截图-贴图工具-PixPin-新增截图历史记录回溯，可找回之前的截图，以及之前的截图区域">¶</a><a href="https://www.appinn.com/pixpin-records/" target="_blank" rel="noopener">截图/贴图工具 PixPin 新增截图历史记录回溯，可找回之前的截图，以及之前的截图区域</a></h3><p>pubdata:2024-01-03 06:42:53markdate:2024-01-03 10:59:12.193054</p><h3 id="如何入门硬件开发？一个软件开发者的边学边做手记"><a class="header-anchor" href="#如何入门硬件开发？一个软件开发者的边学边做手记">¶</a><a href="https://sspai.com/post/85507" target="_blank" rel="noopener">如何入门硬件开发？一个软件开发者的边学边做手记</a></h3><p>pubdata:2024-01-03 07:09:18markdate:2024-01-05 03:45:06.274531</p><h3 id="GoMusic-–-导出网易云音乐、QQ-音乐歌单｜可导入Apple-Music、Youtube-Music、Spotify"><a class="header-anchor" href="#GoMusic-–-导出网易云音乐、QQ-音乐歌单｜可导入Apple-Music、Youtube-Music、Spotify">¶</a><a href="https://www.appinn.com/bistutu-gomusic/" target="_blank" rel="noopener">GoMusic – 导出网易云音乐、QQ 音乐歌单｜可导入Apple Music、Youtube Music、Spotify</a></h3><p>pubdata:2024-01-05 07:38:17markdate:2024-01-06 05:41:20.316453</p><h3 id="Tree-FM-–-收听世界各地的森林之音｜39-座森林的真实录音"><a class="header-anchor" href="#Tree-FM-–-收听世界各地的森林之音｜39-座森林的真实录音">¶</a><a href="https://www.appinn.com/tree-fm/" target="_blank" rel="noopener">Tree.FM – 收听世界各地的森林之音｜39 座森林的真实录音</a></h3><p>pubdata:2024-01-14 12:10:08markdate:2024-01-16 03:03:22.817200</p><h3 id="STranslate-–-免费的划词翻译工具，支持-DeepL｜还拥有-OCR-文字识别与翻译功能"><a class="header-anchor" href="#STranslate-–-免费的划词翻译工具，支持-DeepL｜还拥有-OCR-文字识别与翻译功能">¶</a><a href="https://www.appinn.com/stranslate/" target="_blank" rel="noopener">STranslate – 免费的划词翻译工具，支持 DeepL｜还拥有 OCR 文字识别与翻译功能</a></h3><p>pubdata:2024-01-15 12:00:21markdate:2024-01-16 23:58:44.646513</p><h3 id="7-Taskbar-Numberer-–-为-Windows-任务栏添加数字快捷键，适合语音识别与快捷键用户"><a class="header-anchor" href="#7-Taskbar-Numberer-–-为-Windows-任务栏添加数字快捷键，适合语音识别与快捷键用户">¶</a><a href="https://www.appinn.com/7-taskbar-numberer/" target="_blank" rel="noopener">7+ Taskbar Numberer – 为 Windows 任务栏添加数字快捷键，适合语音识别与快捷键用户</a></h3><p>pubdata:2024-01-22 07:15:11markdate:2024-01-23 01:13:09.112519</p><h2 id="ttrss标记个数-7"><a class="header-anchor" href="#ttrss标记个数-7">¶</a>=&gt; ttrss标记个数: 7</h2><h3 id="如何为-Apple-ID-和-iCloud-资料「搬家」：我的迁移经历以及经验分享"><a class="header-anchor" href="#如何为-Apple-ID-和-iCloud-资料「搬家」：我的迁移经历以及经验分享">¶</a><a href="https://sspai.com/post/85912" target="_blank" rel="noopener">如何为 Apple ID 和 iCloud 资料「搬家」：我的迁移经历以及经验分享</a></h3><p>pubdata:2024-01-25 07:20:39markdate:2024-02-02 01:22:14.364972</p><h3 id="学点复式记账，让个人理财更有逻辑"><a class="header-anchor" href="#学点复式记账，让个人理财更有逻辑">¶</a><a href="https://sspai.com/post/85033" target="_blank" rel="noopener">学点复式记账，让个人理财更有逻辑</a></h3><p>pubdata:2024-01-25 03:31:56markdate:2024-02-02 01:26:16.667768</p><h3 id="看完-Sam-Altman-的斯坦福创业课，我学到了什么？"><a class="header-anchor" href="#看完-Sam-Altman-的斯坦福创业课，我学到了什么？">¶</a><a href="https://sspai.com/post/84988" target="_blank" rel="noopener">看完 Sam Altman 的斯坦福创业课，我学到了什么？</a></h3><p>pubdata:2024-01-24 03:21:26markdate:2024-02-02 02:12:37.899624</p><h3 id="PinWin-–-Win-11-可用，置顶任何窗口"><a class="header-anchor" href="#PinWin-–-Win-11-可用，置顶任何窗口">¶</a><a href="https://www.appinn.com/pinwin-for-win/" target="_blank" rel="noopener">PinWin – Win 11 可用，置顶任何窗口</a></h3><p>pubdata:2024-02-03 04:30:33markdate:2024-02-04 02:48:20.967120</p><h3 id="TVBox-Android-TV-版-–-家用安卓电视盒子：视频播放器、直播源播放器"><a class="header-anchor" href="#TVBox-Android-TV-版-–-家用安卓电视盒子：视频播放器、直播源播放器">¶</a><a href="https://www.appinn.com/tvbox-android-tv/" target="_blank" rel="noopener">TVBox Android TV 版 – 家用安卓电视盒子：视频播放器、直播源播放器</a></h3><p>pubdata:2024-02-04 12:38:04markdate:2024-02-05 04:51:47.096386</p><h3 id="RSSWorker-–-为B站动态、TG频道、微博用户、小红书用户生成-RSS-CF-Worker"><a class="header-anchor" href="#RSSWorker-–-为B站动态、TG频道、微博用户、小红书用户生成-RSS-CF-Worker">¶</a><a href="https://www.appinn.com/rssworker/" target="_blank" rel="noopener">RSSWorker – 为B站动态、TG频道、微博用户、小红书用户生成 RSS[CF Worker]</a></h3><p>pubdata:2024-02-12 05:23:22markdate:2024-02-14 04:10:36.498071</p><h3 id="Excalidraw-Animate-–-将-Excalidraw-手绘图转换为动画"><a class="header-anchor" href="#Excalidraw-Animate-–-将-Excalidraw-手绘图转换为动画">¶</a><a href="https://www.appinn.com/excalidraw-animate/" target="_blank" rel="noopener">Excalidraw Animate – 将 Excalidraw 手绘图转换为动画</a></h3><p>pubdata:2024-02-14 07:35:56markdate:2024-02-16 01:32:26.123169</p><h2 id="ttrss标记个数-8"><a class="header-anchor" href="#ttrss标记个数-8">¶</a>=&gt; ttrss标记个数: 8</h2><h3 id="feeshy-的-10-款自用-Obsidian-第三方插件分享"><a class="header-anchor" href="#feeshy-的-10-款自用-Obsidian-第三方插件分享">¶</a><a href="https://www.appinn.com/feeshy-obsidian-community-plugins/" target="_blank" rel="noopener">@feeshy 的 10+ 款自用 Obsidian 第三方插件分享 </a></h3><p>pubdata:2024-03-04 07:42:05markdate:2024-03-07 13:52:45.396445</p><h3 id="鹅厂前端自动化测试实践经验"><a class="header-anchor" href="#鹅厂前端自动化测试实践经验">¶</a><a href="https://zhuanlan.zhihu.com/p/684511716" target="_blank" rel="noopener">鹅厂前端自动化测试实践经验</a></h3><p>pubdata:2024-03-06 10:10:15markdate:2024-03-08 01:45:44.498546</p><h3 id="ShellGPT-–-在终端里使用-ChatGPT（用自然语言执行命令）：更新我的系统、从大到小列出文件、帮我安装-Docker…"><a class="header-anchor" href="#ShellGPT-–-在终端里使用-ChatGPT（用自然语言执行命令）：更新我的系统、从大到小列出文件、帮我安装-Docker…">¶</a><a href="https://www.appinn.com/shellgpt/" target="_blank" rel="noopener">ShellGPT – 在终端里使用 ChatGPT（用自然语言执行命令）：更新我的系统、从大到小列出文件、帮我安装 Docker…</a></h3><p>pubdata:2024-03-10 02:22:00markdate:2024-03-12 01:16:37.587328</p><h3 id="年度征文-渐入佳境：斜杠程序员的数字游民转型之旅"><a class="header-anchor" href="#年度征文-渐入佳境：斜杠程序员的数字游民转型之旅">¶</a><a href="https://sspai.com/post/86832" target="_blank" rel="noopener">年度征文 | 渐入佳境：斜杠程序员的数字游民转型之旅</a></h3><p>pubdata:2024-03-11 03:09:40markdate:2024-03-12 08:52:53.467705</p><h3 id="Easy-Scraper-–-不用编程，可视化爬虫，一键获取网页数据，可能是最简单的网络爬虫了-Chrome"><a class="header-anchor" href="#Easy-Scraper-–-不用编程，可视化爬虫，一键获取网页数据，可能是最简单的网络爬虫了-Chrome">¶</a><a href="https://www.appinn.com/easy-scraper/" target="_blank" rel="noopener">Easy Scraper – 不用编程，可视化爬虫，一键获取网页数据，可能是最简单的网络爬虫了[Chrome]</a></h3><p>pubdata:2024-03-13 08:12:24markdate:2024-03-14 01:23:21.603293</p><h3 id="年度征文-二十年后我再次和纸笔恋爱了"><a class="header-anchor" href="#年度征文-二十年后我再次和纸笔恋爱了">¶</a><a href="https://sspai.com/post/87018" target="_blank" rel="noopener">年度征文 | 二十年后我再次和纸笔恋爱了</a></h3><p>pubdata:2024-03-13 02:43:59markdate:2024-03-16 08:04:12.498509</p><h3 id="开源软件-Tran-v-0-2-8-发布了"><a class="header-anchor" href="#开源软件-Tran-v-0-2-8-发布了">¶</a><a href="https://www.v2ex.com/t/1024794#reply0" target="_blank" rel="noopener">[开源软件] Tran v.0.2.8 发布了!</a></h3><p>pubdata:2024-03-18 09:07:05markdate:2024-03-19 05:10:20.098904</p><h3 id="分享发现-第一次使用沉浸式翻译，感觉交互方式挺新颖，突然有了灵感就做了个沉浸式总结"><a class="header-anchor" href="#分享发现-第一次使用沉浸式翻译，感觉交互方式挺新颖，突然有了灵感就做了个沉浸式总结">¶</a><a href="https://www.v2ex.com/t/1024242#reply0" target="_blank" rel="noopener">[分享发现] 第一次使用沉浸式翻译，感觉交互方式挺新颖，突然有了灵感就做了个沉浸式总结</a></h3><p>pubdata:2024-03-16 06:24:28markdate:2024-03-19 11:53:00.606713</p><h2 id="ttrss标记个数-14"><a class="header-anchor" href="#ttrss标记个数-14">¶</a>=&gt; ttrss标记个数: 14</h2><h3 id="Escrcpy-–-跨平台，远程控制安卓手机：3-天前更新，使用-Electron-的-Scrcpy-图形界面工具"><a class="header-anchor" href="#Escrcpy-–-跨平台，远程控制安卓手机：3-天前更新，使用-Electron-的-Scrcpy-图形界面工具">¶</a><a href="https://www.appinn.com/escrcpy/" target="_blank" rel="noopener">Escrcpy – 跨平台，远程控制安卓手机：3 天前更新，使用 Electron 的 Scrcpy 图形界面工具</a></h3><p>pubdata:2024-04-01 09:00:36markdate:2024-04-02 00:03:35.247364</p><h3 id="App-1-录屏灵活可控，后期省时省心：Screen-Studio"><a class="header-anchor" href="#App-1-录屏灵活可控，后期省时省心：Screen-Studio">¶</a><a href="https://sspai.com/post/86574" target="_blank" rel="noopener">App+1 | 录屏灵活可控，后期省时省心：Screen Studio</a></h3><p>pubdata:2024-04-01 03:38:13markdate:2024-04-02 01:33:34.677873</p><h3 id="空想特摄的浪漫：奥特曼入坑指南"><a class="header-anchor" href="#空想特摄的浪漫：奥特曼入坑指南">¶</a><a href="https://sspai.com/post/87652" target="_blank" rel="noopener">空想特摄的浪漫：奥特曼入坑指南</a></h3><p>pubdata:2024-03-31 07:00:00markdate:2024-04-09 01:39:07.511051</p><h3 id="超越工具与概念之争：可持续知识管理的个人实践"><a class="header-anchor" href="#超越工具与概念之争：可持续知识管理的个人实践">¶</a><a href="https://sspai.com/post/87028" target="_blank" rel="noopener">超越工具与概念之争：可持续知识管理的个人实践</a></h3><p>pubdata:2024-03-28 07:29:15markdate:2024-04-11 09:35:00.274698</p><h3 id="我用-FetchRSS-和-RSS-Translator，做了一个针对-Everything-1-5-Alpha-的中文更新-RSS-地址"><a class="header-anchor" href="#我用-FetchRSS-和-RSS-Translator，做了一个针对-Everything-1-5-Alpha-的中文更新-RSS-地址">¶</a><a href="https://www.appinn.com/fetchrss-and-rss-translator/" target="_blank" rel="noopener">我用 FetchRSS 和 RSS Translator，做了一个针对 Everything 1.5 Alpha 的中文更新 RSS 地址</a></h3><p>pubdata:2024-04-08 06:36:42markdate:2024-04-12 05:07:05.856182</p><h3 id="用没那么枯燥的方式学英语：我的沉浸式语言学习实践"><a class="header-anchor" href="#用没那么枯燥的方式学英语：我的沉浸式语言学习实践">¶</a><a href="https://sspai.com/post/87977" target="_blank" rel="noopener">用没那么枯燥的方式学英语：我的沉浸式语言学习实践</a></h3><p>pubdata:2024-04-12 03:00:00markdate:2024-04-13 02:02:05.833551</p><h3 id="有没有查询电脑已使用快捷键的方法？｜OpenArk"><a class="header-anchor" href="#有没有查询电脑已使用快捷键的方法？｜OpenArk">¶</a><a href="https://www.appinn.com/openark/" target="_blank" rel="noopener">有没有查询电脑已使用快捷键的方法？｜OpenArk</a></h3><p>pubdata:2024-04-12 08:08:27markdate:2024-04-13 02:02:52.843423</p><h3 id="欧洲美人身上的“大妞感”和“女神气息”为什么会出现地域扎堆的情况？"><a class="header-anchor" href="#欧洲美人身上的“大妞感”和“女神气息”为什么会出现地域扎堆的情况？">¶</a><a href="http://zhuanlan.zhihu.com/p/564592327?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title" target="_blank" rel="noopener">欧洲美人身上的“大妞感”和“女神气息”为什么会出现地域扎堆的情况？</a></h3><p>pubdata:2024-04-17 03:55:44markdate:2024-04-22 01:08:05.119052</p><h3 id="imfile-–-源自-Motrix，跨平台下载工具，支持-HTTP、BT、磁力"><a class="header-anchor" href="#imfile-–-源自-Motrix，跨平台下载工具，支持-HTTP、BT、磁力">¶</a><a href="https://www.appinn.com/imfile/" target="_blank" rel="noopener">imfile –  源自 Motrix，跨平台下载工具，支持 HTTP、BT、磁力</a></h3><p>pubdata:2024-04-20 00:52:43markdate:2024-04-22 01:17:20.746068</p><h3 id="IMDb250观影计划"><a class="header-anchor" href="#IMDb250观影计划">¶</a><a href="https://www.williamlong.info/archives/7422.html" target="_blank" rel="noopener">IMDb250观影计划</a></h3><p>pubdata:2024-04-19 16:12:42markdate:2024-04-22 01:27:18.615531</p><h3 id="disky-–-找到安卓手机里最大的磁盘大盗"><a class="header-anchor" href="#disky-–-找到安卓手机里最大的磁盘大盗">¶</a><a href="https://www.appinn.com/disky-for-android/" target="_blank" rel="noopener">disky – 找到安卓手机里最大的磁盘大盗</a></h3><p>pubdata:2024-04-21 08:25:15markdate:2024-04-22 03:00:26.999854</p><h3 id="Ghidra-逆向工程实战：看看-macOS-恶意软件动了什么手脚"><a class="header-anchor" href="#Ghidra-逆向工程实战：看看-macOS-恶意软件动了什么手脚">¶</a><a href="https://sspai.com/post/87870" target="_blank" rel="noopener">Ghidra 逆向工程实战：看看 macOS 恶意软件动了什么手脚</a></h3><p>pubdata:2024-04-16 07:07:03markdate:2024-04-22 11:15:30.158853</p><h3 id="打造可持续的个人工作流-02：系统篇"><a class="header-anchor" href="#打造可持续的个人工作流-02：系统篇">¶</a><a href="https://sspai.com/post/87698" target="_blank" rel="noopener">打造可持续的个人工作流 02：系统篇</a></h3><p>pubdata:2024-04-09 03:30:00markdate:2024-04-23 01:16:46.838696</p><h3 id="20-年老牌工具-NetSetMan-更新适配-Windows-11，免费的网卡切换（IP-自动切换）工具"><a class="header-anchor" href="#20-年老牌工具-NetSetMan-更新适配-Windows-11，免费的网卡切换（IP-自动切换）工具">¶</a><a href="https://www.appinn.com/netsetman-5-2-0/" target="_blank" rel="noopener">20 年老牌工具 NetSetMan 更新适配 Windows 11，免费的网卡切换（IP 自动切换）工具</a></h3><p>pubdata:2024-04-22 07:06:28markdate:2024-04-23 02:21:54.675191</p><h2 id="ttrss标记个数-19"><a class="header-anchor" href="#ttrss标记个数-19">¶</a>=&gt; ttrss标记个数: 19</h2><h3 id="ServerBox-–-开源免费的全平台服务器监控及SSH客户端"><a class="header-anchor" href="#ServerBox-–-开源免费的全平台服务器监控及SSH客户端">¶</a><a href="https://www.appinn.com/serverbox/" target="_blank" rel="noopener">ServerBox – 开源免费的全平台服务器监控及SSH客户端</a></h3><p>pubdata:2024-05-01 04:32:45markdate:2024-05-02 15:27:13.421401</p><h3 id="用-Proxmox-敲开家庭服务器的大门"><a class="header-anchor" href="#用-Proxmox-敲开家庭服务器的大门">¶</a><a href="https://sspai.com/prime/story/proxmox-homelab-guide-1" target="_blank" rel="noopener">用 Proxmox 敲开家庭服务器的大门</a></h3><p>pubdata:2024-05-04 10:05:02markdate:2024-05-06 00:19:40.425553</p><h3 id="掌握-Windows-终端命令的基本语法及风格"><a class="header-anchor" href="#掌握-Windows-终端命令的基本语法及风格">¶</a><a href="https://sspai.com/post/78248" target="_blank" rel="noopener">掌握 Windows 终端命令的基本语法及风格</a></h3><p>pubdata:2024-05-05 04:48:38markdate:2024-05-06 04:14:51.507385</p><h3 id="Wiki-Journey-–-可视化-Wikipedia-访问记录，转换为思维导图树-Chrome-Firefox"><a class="header-anchor" href="#Wiki-Journey-–-可视化-Wikipedia-访问记录，转换为思维导图树-Chrome-Firefox">¶</a><a href="https://www.appinn.com/wiki-journey/" target="_blank" rel="noopener">Wiki Journey – 可视化 Wikipedia 访问记录，转换为思维导图树[Chrome/Firefox]</a></h3><p>pubdata:2024-05-06 09:03:43markdate:2024-05-07 04:14:03.433305</p><h3 id="把宝贵的时间留给佳作，追剧观影少不了这些辅助"><a class="header-anchor" href="#把宝贵的时间留给佳作，追剧观影少不了这些辅助">¶</a><a href="https://sspai.com/post/79491" target="_blank" rel="noopener">把宝贵的时间留给佳作，追剧观影少不了这些辅助</a></h3><p>pubdata:2024-05-02 03:00:15markdate:2024-05-07 09:31:48.816102</p><h3 id="什么是笔记的理想形态？个人笔记系统折腾手记"><a class="header-anchor" href="#什么是笔记的理想形态？个人笔记系统折腾手记">¶</a><a href="https://sspai.com/post/87490" target="_blank" rel="noopener">什么是笔记的理想形态？个人笔记系统折腾手记</a></h3><p>pubdata:2024-04-26 03:30:00markdate:2024-05-08 02:45:45.863688</p><h3 id="App-1-功能强大的录屏与编辑工具，而且免费：Screenity"><a class="header-anchor" href="#App-1-功能强大的录屏与编辑工具，而且免费：Screenity">¶</a><a href="https://sspai.com/post/87950" target="_blank" rel="noopener">App+1 | 功能强大的录屏与编辑工具，而且免费：Screenity</a></h3><p>pubdata:2024-04-15 03:17:01markdate:2024-05-08 03:13:48.218924</p><h3 id="用笔记建立生活的秩序感：我的记录体系搭建方案"><a class="header-anchor" href="#用笔记建立生活的秩序感：我的记录体系搭建方案">¶</a><a href="https://sspai.com/post/85785" target="_blank" rel="noopener">用笔记建立生活的秩序感：我的记录体系搭建方案</a></h3><p>pubdata:2024-03-07 03:31:54markdate:2024-05-08 06:23:20.499437</p><h3 id="来一场有准备的国内自驾：线路规划篇"><a class="header-anchor" href="#来一场有准备的国内自驾：线路规划篇">¶</a><a href="https://sspai.com/post/88227" target="_blank" rel="noopener">来一场有准备的国内自驾：线路规划篇</a></h3><p>pubdata:2024-05-09 07:00:05markdate:2024-05-10 08:31:20.410806</p><h3 id="群晖配置acme自动更新群晖和服务器证书"><a class="header-anchor" href="#群晖配置acme自动更新群晖和服务器证书">¶</a><a href="https://renyili.org/post/use_acme_update_ssl_certificates/" target="_blank" rel="noopener">群晖配置acme自动更新群晖和服务器证书</a></h3><p>pubdata:2024-05-10 16:01:01markdate:2024-05-11 04:24:36.630514</p><h3 id="RustDesk-自建服务器部署和使用教程"><a class="header-anchor" href="#RustDesk-自建服务器部署和使用教程">¶</a><a href="https://icloudnative.io/posts/how-to-set-up-rustdesk-server/" target="_blank" rel="noopener">RustDesk 自建服务器部署和使用教程</a></h3><p>pubdata:2024-05-11 05:04:19markdate:2024-05-12 03:02:40.571276</p><h3 id="你管这破玩意叫指针？"><a class="header-anchor" href="#你管这破玩意叫指针？">¶</a><a href="http://zhuanlan.zhihu.com/p/673888668?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title" target="_blank" rel="noopener">你管这破玩意叫指针？</a></h3><p>pubdata:2024-05-11 03:57:41markdate:2024-05-14 01:30:02.203601</p><h3 id="Scrcpy-mask-–-通过’按键映射’，实现模拟器式流畅手游体验：跨平台的电脑控制安卓工具"><a class="header-anchor" href="#Scrcpy-mask-–-通过’按键映射’，实现模拟器式流畅手游体验：跨平台的电脑控制安卓工具">¶</a><a href="https://www.appinn.com/scrcpy-mask/" target="_blank" rel="noopener">Scrcpy-mask – 通过’按键映射’，实现模拟器式流畅手游体验：跨平台的电脑控制安卓工具</a></h3><p>pubdata:2024-05-13 07:26:14markdate:2024-05-14 07:09:53.119375</p><h3 id="混阅-–-中英混合阅读：就不能好好阅读吗：利用-LLM-将中文内容转换为中英混合，扩展词汇量"><a class="header-anchor" href="#混阅-–-中英混合阅读：就不能好好阅读吗：利用-LLM-将中文内容转换为中英混合，扩展词汇量">¶</a><a href="https://www.appinn.com/mixread/" target="_blank" rel="noopener">混阅 – 中英混合阅读：就不能好好阅读吗：利用 LLM 将中文内容转换为中英混合，扩展词汇量</a></h3><p>pubdata:2024-05-18 02:31:00markdate:2024-05-19 02:25:37.321317</p><h3 id="RetroArch-–-可在-Apple-TV-上使用的开源游戏模拟器"><a class="header-anchor" href="#RetroArch-–-可在-Apple-TV-上使用的开源游戏模拟器">¶</a><a href="https://www.appinn.com/retroarch/" target="_blank" rel="noopener">RetroArch – 可在 Apple TV 上使用的开源游戏模拟器</a></h3><p>pubdata:2024-05-16 03:59:52markdate:2024-05-19 02:26:56.541358</p><h3 id="PotPlayer-新增杜比视界-HDR-播放功能"><a class="header-anchor" href="#PotPlayer-新增杜比视界-HDR-播放功能">¶</a><a href="https://www.appinn.com/potplayer-dolby-vision/" target="_blank" rel="noopener">PotPlayer 新增杜比视界 HDR 播放功能</a></h3><p>pubdata:2024-05-16 09:01:45markdate:2024-05-19 02:28:27.420468</p><h3 id="整活啦：为-Windows-桌面右下角添加激活水印，就像未激活的-Windows-桌面那样显示「激活-Windows」"><a class="header-anchor" href="#整活啦：为-Windows-桌面右下角添加激活水印，就像未激活的-Windows-桌面那样显示「激活-Windows」">¶</a><a href="https://www.appinn.com/activate-linux/" target="_blank" rel="noopener">整活啦：为 Windows 桌面右下角添加激活水印，就像未激活的 Windows 桌面那样显示「激活 Windows」</a></h3><p>pubdata:2024-05-20 07:19:46markdate:2024-05-21 03:44:48.231014</p><h3 id="从文件读取到-getshell-的一次细节满满的渗透"><a class="header-anchor" href="#从文件读取到-getshell-的一次细节满满的渗透">¶</a><a href="https://www.sqlsec.com/2024/05/attack.html" target="_blank" rel="noopener">从文件读取到 getshell 的一次细节满满的渗透</a></h3><p>pubdata:2024-05-23 01:48:45markdate:2024-05-23 04:33:32.962143</p><h3 id="软荐意外成互荐，一下子来了10多款重复文件检测工具"><a class="header-anchor" href="#软荐意外成互荐，一下子来了10多款重复文件检测工具">¶</a><a href="https://www.appinn.com/duplicate-files-tools/" target="_blank" rel="noopener">软荐意外成互荐，一下子来了10多款重复文件检测工具</a></h3><p>pubdata:2024-05-21 08:07:47markdate:2024-05-23 04:34:20.428377</p><h2 id="ttrss标记个数-13"><a class="header-anchor" href="#ttrss标记个数-13">¶</a>=&gt; ttrss标记个数: 13</h2><h3 id="自力更生-如何压榨-24-小时工作的-NAS"><a class="header-anchor" href="#自力更生-如何压榨-24-小时工作的-NAS">¶</a><a href="https://sspai.com/post/89049" target="_blank" rel="noopener">自力更生 | 如何压榨 24 小时工作的 NAS</a></h3><p>pubdata:2024-05-29 03:30:23markdate:2024-06-04 00:34:01.194050</p><h3 id="自力更生-基于-Readeck-搭建个人稍后读与书签服务"><a class="header-anchor" href="#自力更生-基于-Readeck-搭建个人稍后读与书签服务">¶</a><a href="https://sspai.com/post/89289" target="_blank" rel="noopener">自力更生 | 基于 Readeck 搭建个人稍后读与书签服务</a></h3><p>pubdata:2024-06-03 03:29:26markdate:2024-06-05 06:13:20.496175</p><h3 id="一日一技-借助-Obsidian-插件和快捷指令快速添加阅读记录"><a class="header-anchor" href="#一日一技-借助-Obsidian-插件和快捷指令快速添加阅读记录">¶</a><a href="https://sspai.com/post/89317" target="_blank" rel="noopener">一日一技 | 借助 Obsidian 插件和快捷指令快速添加阅读记录</a></h3><p>pubdata:2024-06-05 03:30:10markdate:2024-06-07 03:51:25.651630</p><h3 id="告别-Apple-Watch-续航焦虑，这些设置和小习惯值得收藏"><a class="header-anchor" href="#告别-Apple-Watch-续航焦虑，这些设置和小习惯值得收藏">¶</a><a href="https://sspai.com/post/89403" target="_blank" rel="noopener">告别 Apple Watch 续航焦虑，这些设置和小习惯值得收藏</a></h3><p>pubdata:2024-06-06 09:30:00markdate:2024-06-07 03:54:34.442126</p><h3 id="chsrc-–-一键为-Linux-更换最快的国内-apt-yum-源，还支持为-Python、Brew、Emacs-等软件换最快的源"><a class="header-anchor" href="#chsrc-–-一键为-Linux-更换最快的国内-apt-yum-源，还支持为-Python、Brew、Emacs-等软件换最快的源">¶</a><a href="https://www.appinn.com/chsrc/" target="_blank" rel="noopener">chsrc – 一键为 Linux 更换最快的国内 apt/yum 源，还支持为 Python、Brew、Emacs 等软件换最快的源</a></h3><p>pubdata:2024-06-06 09:21:38markdate:2024-06-07 17:57:47.543892</p><h3 id="陌生而有趣的训练伙伴——波速球和-ViPR-炮筒"><a class="header-anchor" href="#陌生而有趣的训练伙伴——波速球和-ViPR-炮筒">¶</a><a href="https://sspai.com/prime/story/training-guide-bosu-ball-vipr" target="_blank" rel="noopener">陌生而有趣的训练伙伴——波速球和 ViPR 炮筒</a></h3><p>pubdata:2024-06-02 07:52:13markdate:2024-06-13 09:34:03.573335</p><h3 id="我的-AI-内容总结使用心得：用什么、何时用与怎么用"><a class="header-anchor" href="#我的-AI-内容总结使用心得：用什么、何时用与怎么用">¶</a><a href="https://sspai.com/post/88530" target="_blank" rel="noopener">我的 AI 内容总结使用心得：用什么、何时用与怎么用</a></h3><p>pubdata:2024-05-31 03:39:51markdate:2024-06-19 01:16:51.565283</p><h3 id="App-1-在-Android-平台，找到「好像在哪里见过」的你：Snapseek"><a class="header-anchor" href="#App-1-在-Android-平台，找到「好像在哪里见过」的你：Snapseek">¶</a><a href="https://sspai.com/post/89059" target="_blank" rel="noopener">App+1 | 在 Android 平台，找到「好像在哪里见过」的你：Snapseek</a></h3><p>pubdata:2024-05-24 07:00:00markdate:2024-06-19 01:19:29.567443</p><h3 id="如何让-app-设计易于上手？从认识「可供性」开始"><a class="header-anchor" href="#如何让-app-设计易于上手？从认识「可供性」开始">¶</a><a href="https://sspai.com/post/88464" target="_blank" rel="noopener">如何让 app 设计易于上手？从认识「可供性」开始</a></h3><p>pubdata:2024-05-08 06:58:43markdate:2024-06-20 17:54:21.170121</p><h3 id="自力更生-你可能不需要一个-NAS？从零开始搭建自托管的影音服务器"><a class="header-anchor" href="#自力更生-你可能不需要一个-NAS？从零开始搭建自托管的影音服务器">¶</a><a href="https://sspai.com/post/88861" target="_blank" rel="noopener">自力更生 | 你可能不需要一个 NAS？从零开始搭建自托管的影音服务器</a></h3><p>pubdata:2024-05-21 03:19:13markdate:2024-06-20 17:56:30.297398</p><h3 id="安娜的档案发布了-521-1TB-的种子文件，还包含了创世纪图书馆、Sci-Hub-的内容"><a class="header-anchor" href="#安娜的档案发布了-521-1TB-的种子文件，还包含了创世纪图书馆、Sci-Hub-的内容">¶</a><a href="https://www.appinn.com/annas-archive-torrents/" target="_blank" rel="noopener">安娜的档案发布了 521.1TB 的种子文件，还包含了创世纪图书馆、Sci-Hub 的内容</a></h3><p>pubdata:2024-06-15 08:11:48markdate:2024-06-21 05:02:11.962654</p><h3 id="biliLive-tools-–-自动化-B-站直播录屏-后工作流：弹幕转换、视频压制、上传-B-站-Win-Linux"><a class="header-anchor" href="#biliLive-tools-–-自动化-B-站直播录屏-后工作流：弹幕转换、视频压制、上传-B-站-Win-Linux">¶</a><a href="https://www.appinn.com/bililive-tools/" target="_blank" rel="noopener">biliLive-tools – 自动化 B 站直播录屏.后工作流：弹幕转换、视频压制、上传 B 站[Win/Linux]</a></h3><p>pubdata:2024-06-17 05:25:54markdate:2024-06-21 05:02:19.036845</p><h3 id="2024-美洲杯：会自动更新比分的赛程日历，中文版"><a class="header-anchor" href="#2024-美洲杯：会自动更新比分的赛程日历，中文版">¶</a><a href="https://www.appinn.com/2024-copa-america-calendar/" target="_blank" rel="noopener">2024 美洲杯：会自动更新比分的赛程日历，中文版</a></h3><p>pubdata:2024-06-21 10:13:36markdate:2024-06-22 17:49:02.499112</p><h2 id="ttrss标记个数-5"><a class="header-anchor" href="#ttrss标记个数-5">¶</a>=&gt; ttrss标记个数: 5</h2><h3 id="EverythingToolbar-–-将秒级文件搜索工具-Everything-无缝集成到-Windows-10-11-开始菜单"><a class="header-anchor" href="#EverythingToolbar-–-将秒级文件搜索工具-Everything-无缝集成到-Windows-10-11-开始菜单">¶</a><a href="https://www.appinn.com/everything-toolbar-2/" target="_blank" rel="noopener">EverythingToolbar – 将秒级文件搜索工具 Everything 无缝集成到 Windows 10/11 开始菜单</a></h3><p>pubdata:2024-07-01 08:11:44markdate:2024-07-02 07:43:26.187850</p><h3 id="Monkeytype-–-多语言在线打字练习、打字测试"><a class="header-anchor" href="#Monkeytype-–-多语言在线打字练习、打字测试">¶</a><a href="https://www.appinn.com/monkeytype/" target="_blank" rel="noopener">Monkeytype – 多语言在线打字练习、打字测试</a></h3><p>pubdata:2024-07-07 03:44:52markdate:2024-07-09 23:32:40.501203</p><h3 id="窗口洞洞波-–-让鼠标穿透当前窗口，到桌面操作文件-Windows"><a class="header-anchor" href="#窗口洞洞波-–-让鼠标穿透当前窗口，到桌面操作文件-Windows">¶</a><a href="https://www.appinn.com/winhole/" target="_blank" rel="noopener">窗口洞洞波 – 让鼠标穿透当前窗口，到桌面操作文件[Windows]</a></h3><p>pubdata:2024-07-09 10:54:07markdate:2024-07-11 04:21:36.327554</p><h3 id="LocalSend-v1-15-0-更新：局域网文件传输工具"><a class="header-anchor" href="#LocalSend-v1-15-0-更新：局域网文件传输工具">¶</a><a href="https://www.appinn.com/localsend-v-1-15-0/" target="_blank" rel="noopener">LocalSend v1.15.0 更新：局域网文件传输工具</a></h3><p>pubdata:2024-07-15 08:53:46markdate:2024-07-17 00:54:51.374138</p><h3 id="抖音上爆火的「自动挡吉他」，揭示了智能硬件的未来"><a class="header-anchor" href="#抖音上爆火的「自动挡吉他」，揭示了智能硬件的未来">¶</a><a href="https://www.geekpark.net/news/337542" target="_blank" rel="noopener">抖音上爆火的「自动挡吉他」，揭示了智能硬件的未来</a></h3><p>pubdata:2024-07-04 07:35:12markdate:2024-07-24 03:48:22.976326</p><h2 id="ttrss标记个数-3"><a class="header-anchor" href="#ttrss标记个数-3">¶</a>=&gt; ttrss标记个数: 3</h2><h3 id="Haystack-Editor-–-将-VS-Code-画布化，同时打开多个文件，自动创建关联-跨平台"><a class="header-anchor" href="#Haystack-Editor-–-将-VS-Code-画布化，同时打开多个文件，自动创建关联-跨平台">¶</a><a href="https://www.appinn.com/haystack-editor/" target="_blank" rel="noopener">Haystack Editor – 将 VS Code 画布化，同时打开多个文件，自动创建关联[跨平台]</a></h3><p>pubdata:2024-09-29 08:26:12markdate:2024-10-04 00:32:15.571495</p><h3 id="Infinite-Mac-–-从1984-到-2001，在线体验-63-个版本的-Mac-苹果系统"><a class="header-anchor" href="#Infinite-Mac-–-从1984-到-2001，在线体验-63-个版本的-Mac-苹果系统">¶</a><a href="https://www.appinn.com/infinite-mac/" target="_blank" rel="noopener">Infinite Mac – 从1984 到 2001，在线体验 63 个版本的 Mac 苹果系统</a></h3><p>pubdata:2024-10-05 08:48:12markdate:2024-10-10 03:55:05.467056</p><h3 id="一个比-tmux-更友好的终端复用工具：Zellij-简介及使用技巧"><a class="header-anchor" href="#一个比-tmux-更友好的终端复用工具：Zellij-简介及使用技巧">¶</a><a href="https://sspai.com/prime/story/get-started-with-zellij" target="_blank" rel="noopener">一个比 tmux 更友好的终端复用工具：Zellij 简介及使用技巧</a></h3><p>pubdata:2024-10-23 09:54:09markdate:2024-10-25 00:43:23.549673</p><h2 id="ttrss标记个数-5-2"><a class="header-anchor" href="#ttrss标记个数-5-2">¶</a>=&gt; ttrss标记个数: 5</h2><h3 id="无需登录！轻松下载-YouTube-视频的最简单方法"><a class="header-anchor" href="#无需登录！轻松下载-YouTube-视频的最简单方法">¶</a><a href="https://www.appinn.com/download-yt-video-use-cobalt/" target="_blank" rel="noopener">无需登录！轻松下载 YouTube 视频的最简单方法</a></h3><p>pubdata:2024-11-01 07:35:35markdate:2024-11-04 00:12:35.655654</p><h3 id="只要4行代码，就解决了-Windows-窗口置顶难题？"><a class="header-anchor" href="#只要4行代码，就解决了-Windows-窗口置顶难题？">¶</a><a href="https://www.appinn.com/4-lines-code-top/" target="_blank" rel="noopener">只要4行代码，就解决了 Windows 窗口置顶难题？</a></h3><p>pubdata:2024-11-01 03:34:33markdate:2024-11-04 00:13:35.327179</p><h3 id="你一直坚持热爱的事情是什么？坚持了多久？"><a class="header-anchor" href="#你一直坚持热爱的事情是什么？坚持了多久？">¶</a><a href="http://www.zhihu.com/question/23473414/answer/3634688765?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title" target="_blank" rel="noopener">你一直坚持热爱的事情是什么？坚持了多久？</a></h3><p>pubdata:2024-09-24 09:25:24markdate:2024-11-04 00:24:07.545371</p><h3 id="MailCatcher：超简单-SMTP-测试服务器，轻松捕获测试邮件（网页-API），但不真发邮件"><a class="header-anchor" href="#MailCatcher：超简单-SMTP-测试服务器，轻松捕获测试邮件（网页-API），但不真发邮件">¶</a><a href="https://www.appinn.com/mailcatcher/" target="_blank" rel="noopener">MailCatcher：超简单 SMTP 测试服务器，轻松捕获测试邮件（网页/API），但不真发邮件</a></h3><p>pubdata:2024-11-20 03:44:07markdate:2024-11-21 00:10:55.648889</p><h3 id="从纸上涂画到数字笔记：我的数字化纸质阅读方案探索"><a class="header-anchor" href="#从纸上涂画到数字笔记：我的数字化纸质阅读方案探索">¶</a><a href="https://sspai.com/post/93418" target="_blank" rel="noopener">从纸上涂画到数字笔记：我的数字化纸质阅读方案探索</a></h3><p>pubdata:2024-10-31 07:00:00markdate:2024-11-22 00:27:33.224983</p><h2 id="ttrss标记个数-7-2"><a class="header-anchor" href="#ttrss标记个数-7-2">¶</a>=&gt; ttrss标记个数: 7</h2><h3 id="GeoTag-–-从地图选点，为照片添加地理位置-macOS"><a class="header-anchor" href="#GeoTag-–-从地图选点，为照片添加地理位置-macOS">¶</a><a href="https://www.appinn.com/geotag-for-macos/" target="_blank" rel="noopener">GeoTag – 从地图选点，为照片添加地理位置[macOS]</a></h3><p>pubdata:2024-12-10 05:20:54markdate:2024-12-12 00:14:04.089217</p><h3 id="Photopea-开发者新作-Vectorpea：免费在线矢量图编辑器"><a class="header-anchor" href="#Photopea-开发者新作-Vectorpea：免费在线矢量图编辑器">¶</a><a href="https://www.appinn.com/vectorpea/" target="_blank" rel="noopener">Photopea 开发者新作 Vectorpea：免费在线矢量图编辑器</a></h3><p>pubdata:2024-12-11 07:06:15markdate:2024-12-12 00:14:26.801576</p><h3 id="推理小说的魅力不一般！日系推理入门推荐"><a class="header-anchor" href="#推理小说的魅力不一般！日系推理入门推荐">¶</a><a href="https://sspai.com/post/94627" target="_blank" rel="noopener">推理小说的魅力不一般！日系推理入门推荐</a></h3><p>pubdata:2024-12-12 09:30:00markdate:2024-12-13 02:24:06.645250</p><h3 id="小米官方发布「米家集成」，可在-Home-Assistant-中使用小米-IoT-智能设备"><a class="header-anchor" href="#小米官方发布「米家集成」，可在-Home-Assistant-中使用小米-IoT-智能设备">¶</a><a href="https://www.appinn.com/ha-xiaomi-home-for-home-assistant/" target="_blank" rel="noopener">小米官方发布「米家集成」，可在 Home Assistant 中使用小米 IoT 智能设备</a></h3><p>pubdata:2024-12-17 08:04:27markdate:2024-12-18 08:12:40.826596</p><h3 id="比听快10倍！免费播客客户端-PodQuest-AI-不止能翻译，还能读懂你的兴趣"><a class="header-anchor" href="#比听快10倍！免费播客客户端-PodQuest-AI-不止能翻译，还能读懂你的兴趣">¶</a><a href="https://www.appinn.com/podquest-ai/" target="_blank" rel="noopener">比听快10倍！免费播客客户端 PodQuest AI 不止能翻译，还能读懂你的兴趣</a></h3><p>pubdata:2024-12-16 08:54:26markdate:2024-12-18 08:13:52.993049</p><h3 id="PowerToys-v0-87-0-更新，新建-功能支持-Windows-10，预览窗格支持-ahk-文件、高级粘贴的-AI-功能"><a class="header-anchor" href="#PowerToys-v0-87-0-更新，新建-功能支持-Windows-10，预览窗格支持-ahk-文件、高级粘贴的-AI-功能">¶</a><a href="https://www.appinn.com/powertoys-v0-87-0/" target="_blank" rel="noopener">PowerToys v0.87.0 更新，新建+ 功能支持 Windows 10，预览窗格支持 .ahk 文件、高级粘贴的 AI 功能</a></h3><p>pubdata:2024-12-18 05:46:48markdate:2024-12-19 01:25:37.420945</p><h3 id="2024-科学上网秘籍：v2rayA-安装与配置指南for-Windows、Macos、Linux"><a class="header-anchor" href="#2024-科学上网秘籍：v2rayA-安装与配置指南for-Windows、Macos、Linux">¶</a><a href="https://pengtech.net/network/v2rayA_install.html" target="_blank" rel="noopener">2024 科学上网秘籍：v2rayA 安装与配置指南for Windows、Macos、Linux</a></h3><p>pubdata:2024-12-24 12:29:17markdate:2024-12-22 01:24:01.745969</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年度汇报，记录一下过去一年的工作和生活。&lt;/p&gt;
    
    </summary>
    
      <category term="年度汇报" scheme="https://talengu.github.io/public/categories/%E5%B9%B4%E5%BA%A6%E6%B1%87%E6%8A%A5/"/>
    
    
      <category term="年度汇报" scheme="https://talengu.github.io/public/tags/%E5%B9%B4%E5%BA%A6%E6%B1%87%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>「转」基于 Readeck 搭建个人稍后读/书签服务</title>
    <link href="https://talengu.github.io/public/2024/06/06/readeck_tips/"/>
    <id>https://talengu.github.io/public/2024/06/06/readeck_tips/</id>
    <published>2024-06-06T12:00:00.000Z</published>
    <updated>2024-06-06T22:21:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><blockquote><p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="https://sspai.com/post/89289" target="_blank" rel="noopener">https://sspai.com/post/89289</a></p></blockquote><a id="more"></a><hr><p>作为喜欢阅读互联网长文的「上世代互联网遗老」，我一直保持着一个和现在互联网快消时代格格不入的爱好：偏爱长内容，这包括了我喜欢观看哪些具有丰富知识内容的长视频，收听播客节目以及阅读长篇的文章。尤其是长篇文章，往往是在我在碎片化的时间浏览公众号或者 RSS 订阅时，然后就会把这篇长文发到我的稍后读应用或者推送到我的 Kindle 邮箱中，等晚上做到书桌前仔细深度阅读。</p><p>因此我一直都非常留意各家的稍后读 / 书签服务，从最早的 instapaper、Pocket 到后来使用 Kindle 的邮箱推送等都有尝试，只不过在国内这个互联网环境中难免会遇到网络访问稳定性的问题——毕竟这几种稍后读服务都来自国外开发商，经常会遇到发送微信公众号文章后重排版出错的情况，就更别提数据保留的安全性问题了。</p><p>既然我已经在家中部署了 NAS，秉承「将数据保留在自己手上」的宗旨，我决定将稍后读 / 书签服务也进行自部署。而考虑到我实际的使用情况，我自部署的稍后读 / 书签服务需要满足以下几点：</p><ul><li>支持自部署，且部署方式容易。</li><li>可以在手机端 / 桌面端进行进行阅读。</li><li>可以在不同的平台将文章 / 网页发送到稍后读服务中。</li><li>解析处理网页内容的速度要很快。</li></ul><p>而满足以上要求的就剩下了这款名为 Readeck 稍后读 / 书签服务。</p><h3 id="安装-Readeck-服务端"><a class="header-anchor" href="#安装-Readeck-服务端">¶</a><strong>安装 Readeck 服务端</strong></h3><p>和其他自部署的服务一样，作为一款自部署优先服务，Readeck 官方直接就提供了 Docker 的部署方式，当然考虑到我自己家中的 NAS 是群晖的 DS218+，官方 Docker 套件本身功能比较弱，因此我还额外使用 Portainer 这个可视化的容器部署工具来进行部署，这样做的另一个好处就是，即便你的 NAS 不是群晖，只要支持容器，也可以采用类似的办法做部署。</p><p>我这里依旧以群晖为参照，首先打开群晖的 File Station 中的 docker 目录，在目录下创建一个新文件夹并将其命名为 readeck（全部是小写字母）。</p><p><img src="/public/2024/06/06/readeck_tips/069e4eb7887479dbd9965fe66592d07f_MD5.png" alt></p><p>然后在新创建的这个<code>readeck</code> 文件夹里面，在分别创建<code>data</code>以及<code>db</code>两个文件夹。这两个文件夹后面用来存储服务中所产生的数据。</p><p><img src="/public/2024/06/06/readeck_tips/ba30f253cffcfa148f50a3034285873c_MD5.png" alt></p><p>接下来我们就打开 Portainer 来进行服务容器的部署，这里打开并登录 Portainer，然后从左侧边栏中点击 Stacks，然后点击页面右上角的 <code>Add Stack</code>来添加。</p><p><img src="/public/2024/06/06/readeck_tips/198e1876734d030f3fbee692a6448489_MD5.png" alt></p><p>在新创建的 Stack 的 Name 里面填写<code>readeck</code>，然后在 <code>Build method</code> 这里选择 <code>Web editor</code>，接着在下面内容直接复制到编辑器中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.9&quot;</span><br><span class="line">services:</span><br><span class="line">  readeck:</span><br><span class="line">    container_name: Readeck</span><br><span class="line">    image: codeberg.org/readeck/readeck:latest</span><br><span class="line">    mem_limit: 8g</span><br><span class="line">    cpu_shares: 1024</span><br><span class="line">    security_opt:</span><br><span class="line">      - no-new-privileges:true</span><br><span class="line">    restart: on-failure:5</span><br><span class="line">    ports:</span><br><span class="line">      - 4522:8000</span><br><span class="line">    volumes:</span><br><span class="line">      - /volume1/docker/readeck/data:/readeck:rw</span><br><span class="line">    environment:</span><br><span class="line">     READECK_USE_X_FORWARDED: true</span><br><span class="line">     READECK_DATABASE_SOURCE: postgres://readeck:readeckpass@readeck-db:5432/readeck</span><br><span class="line"></span><br><span class="line">  readeck-db:</span><br><span class="line">    image: postgres:16</span><br><span class="line">    container_name: Readeck-DB</span><br><span class="line">    hostname: readeck-db</span><br><span class="line">    mem_limit: 1g</span><br><span class="line">    cpu_shares: 768</span><br><span class="line">    security_opt:</span><br><span class="line">      - no-new-privileges:true</span><br><span class="line">    healthcheck:</span><br><span class="line">      test: [&quot;CMD&quot;, &quot;pg_isready&quot;, &quot;-q&quot;, &quot;-d&quot;, &quot;readeck&quot;, &quot;-U&quot;, &quot;readeck&quot;]</span><br><span class="line">      timeout: 45s</span><br><span class="line">      interval: 10s</span><br><span class="line">      retries: 10</span><br><span class="line">    volumes:</span><br><span class="line">      - /volume1/docker/readeck/db:/var/lib/postgresql/data:rw</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_DB: readeck</span><br><span class="line">      POSTGRES_USER: readeck</span><br><span class="line">      POSTGRES_PASSWORD: readeckpass</span><br><span class="line">    restart: on-failure:5</span><br></pre></td></tr></table></figure><p>按照上面填写完成后，这里点击下方的「Deploy the stack」来部署容器，然后等待出现容器列表就表示部署成功了。</p><p><img src="/public/2024/06/06/readeck_tips/13c27281c23448eab38b2cc96aacea96_MD5.png" alt></p><p>P.S：有关 docker 文件存储路径也需要留意，如果你的 NAS 有多个卷，最好能够核对自己创建文件夹的绝对路径，从而避免出错。</p><h3 id="配置-Readeck"><a class="header-anchor" href="#配置-Readeck">¶</a><strong>配置 Readeck</strong></h3><p>当容器正式启动后，这时打开浏览器并访问：<a href="http://xn--%20nas%20-f38nz10erfap511b:4522/" target="_blank" rel="noopener">http:// 你的 NAS 地址: 4522</a> ，如果可以访问到 Readeck 的登录页面就表示完全部署成功了，如果你和我一样，是部署到本地的 NAS 中的，那么如果想要从外网访问还需要通过 ddns 或者内网穿透的方式将服务暴露到公网中，这里我就不过多赘述了。</p><p><img src="/public/2024/06/06/readeck_tips/e6cb9148492f9f94149f728afb42b7ff_MD5.png" alt></p><p>在注册页面中首先输入你未来需要登录 Readeck 的账号和密码，最后点击 Finish installation 来完成最后的注册。登录后你就可以看到 readeck 的列表页面，这就表示你已经成功完成了全部的安装工作。而既然是一款稍后读应用，那么自然少不了就是测试一下他的阅读模式的处理能力，这里我直接在 Readeck 上点击上方添加地址处贴上少数派的某篇文章的链接，然后点击「Save Link」来保存链接。</p><p><img src="/public/2024/06/06/readeck_tips/ba440664c4221d1ee8eaf9caba541825_MD5.png" alt></p><p>这个保存并处理的过程非常快，稍等片刻 Readeck 就会完成处理并添加好作者以及标题，甚至还会自动生成稍后读文章卡片的封面图，而点击进去后可以看出会将一些无用的元素都进行清理，保留成适合手机进行阅读的「阅读模式」的效果。同时你还可以对阅读的效果进行设置，比如选择字体、字号以及对行高进行设置。</p><p><img src="/public/2024/06/06/readeck_tips/5cf3c2a8f1ba0e44759680460da2a914_MD5.png" alt></p><p>同时你还可以对不同的文章打上特定的标签，方便的进行进一步的分类归档操作，而在晚间阅读时如果你觉得背景比较刺眼，也可以点击侧栏中的更换主题来切换成暗色模式。</p><p><img src="/public/2024/06/06/readeck_tips/7b598ffff6038799fe320d6b036086d3_MD5.png" alt></p><h2 id="Readeck-进阶用法：用更简单的方式发送文章"><a class="header-anchor" href="#Readeck-进阶用法：用更简单的方式发送文章">¶</a><strong>Readeck 进阶用法：用更简单的方式发送文章</strong></h2><p>Readeck 服务部署完毕并且进行了基础设置，那么接下来我们发送需要稍后读的文章 / 网页了，毕竟如果每一次添加稍后读的文章链接都需要打开 readeck 并点击「Save Link」显然非常繁琐，事实上 Readeck 提供了和很多商业服务类似的方式，可以让我们非常方便的将看到的文章发送到 Readeck 中。</p><h3 id="使用浏览器的扩展程序发送文章-链接"><a class="header-anchor" href="#使用浏览器的扩展程序发送文章-链接">¶</a><strong>使用浏览器的扩展程序发送文章 / 链接</strong></h3><p>如果你使用的是桌面浏览器来浏览网页内容，那么最为简单的办法就是通过浏览器的扩展程序，Readeck 提供了 Chrome/Firefox 两个主流浏览器的扩展程序，这里只需要在相应的扩展程度市场中下载安装，然后点击扩展程序后输入你的账户名、密码以及服务的具体地址，然后点击 Login 就可以完成登录绑定操作。</p><p><img src="/public/2024/06/06/readeck_tips/2ccf9ca5d95392d0d7053f99574a3d81_MD5.png" alt></p><p>登录完成后，当你需要将正在浏览的网页发送到 Readeck 时，就只需要点击扩展程序栏中的 Readeck 图标，然后等待其完成保存即可。如果不放心你还可以登录 Readeck 中，看看你点击发送的这篇文章是否已经被收藏进来了。</p><p><img src="/public/2024/06/06/readeck_tips/ca212604670c46ae89b179ee19b53520_MD5.png" alt></p><h3 id="在-iOS-上使用快捷指令来收藏文章"><a class="header-anchor" href="#在-iOS-上使用快捷指令来收藏文章">¶</a><strong>在 iOS 上使用快捷指令来收藏文章</strong></h3><p>我习惯在手机端浏览器网页，会将合适的内容也会将其发送到稍后读中，这同样在 Readeck 中也可以这样操作，只不过由于 Readeck 并没有提供手机客户端，因此这里需要自己通过第三方工具来实现，至于 iOS 上则是通过快捷指令来进行操作。</p><p><img src="/public/2024/06/06/readeck_tips/6d552777ed9aaa63eb258b201c2699df_MD5.png" alt></p><p>不过在使用快捷指令操作之前，我们首选需要为这些操作来创建新的 API 密钥，这里先登录你的 Readeck 服务，然后点击 Profile - API Token，然后点击「Create a new API token」来创建一个新的 API Token，这里只需要将生成的「Your API token」下面的字符串保留下来备用即可。</p><p><img src="/public/2024/06/06/readeck_tips/3bd8fe6458d8a54600be10afe8b7f9db_MD5.png" alt></p><p>接下来，使用 iOS 上的浏览器打开<a href="https://shareshortcuts.com/shortcuts/2696-send-page-to-readeck.html" target="_blank" rel="noopener">这个地址</a>，然后点击「Download Shortcut」保存到你的快捷指令集中，接下来点击「Send Page To Readeck」这个快捷指令卡片的编辑按钮，在第一个注释下方的文本框中填写 Readeck 的公网访问地址，在第二个注释下方的文本框中，把刚才保存的 API Token 复制进去，然后点击右上角的完成来保存。</p><p><img src="/public/2024/06/06/readeck_tips/bbbada009b8d48517360004739871628_MD5.png" alt></p><p>那么如何发文章到 Readeck 呢？当你使用 Safari 浏览器访问网址时，点击下方的分享按钮并在分享菜单中选择 Send Page To Readeck，然后等待快捷指令跑完即可，这时候你再访问 Readeck 就会发现刚才在 Safari 浏览的网页已经被发送到 Readeck 中了。</p><p><img src="/public/2024/06/06/readeck_tips/94b84e6d0b806059820a4cb6546b387b_MD5.png" alt></p><h3 id="在-Android-上使用-HTTP-Request-Shortcuts-来收藏文章"><a class="header-anchor" href="#在-Android-上使用-HTTP-Request-Shortcuts-来收藏文章">¶</a><strong>在 Android 上使用 HTTP Request Shortcuts 来收藏文章</strong></h3><p>相比于 iOS 上有系统级别的快捷指令，Android 上一直以来都没有系统级别的「脚本工具」，因此要想实现类似的操作将网页添加到 Readeck 就只能依赖第三方工具了，这里我们就需要用到这个 HTTP Request Shortcuts 这款应用来编写一个添加文章的脚本。</p><p><img src="/public/2024/06/06/readeck_tips/a1576aad9658c87d5eea815a9f2ace92_MD5.png" alt></p><p>首先还是打开 HTTP Request Shortcuts，首先点击右上角的汉堡菜单，点击「变量」来创建三个变量：</p><ul><li>第一个变量叫做<code>readeck_shared_url</code>，变量类型为「输入文本」，需要注意的是这个变量的高级设置里面需要勾选「允许分享」，要从分享获得的数据为「仅文本」。</li><li>第二个变量叫做<code>readeck_url</code>，变量类型是「常量」，这里需要填写值，这个值就是你部署的 Readeck 服务的公网地址。</li><li>第三个变量叫做<code>readeck_token</code>，变量类型是「常量」，这里也需要填写值，这个值就是前面我们从 readeck 的 API Token 中保存下来的 Token 值。</li></ul><p><img src="/public/2024/06/06/readeck_tips/920f5a1045a7590d8dab8867c9f77d5b_MD5.png" alt></p><p>紧接着，点击主页右下角的 <code>+</code>然后选择「从头创建」来创建一个新的快捷方式，这里名称你可以随便命名，可以像我一样将其命名为「Add To Readeck」，然后在基本设置中，选择方法为<code>Post</code>，url 这里输入值<code>{readeck_url}/api/bookmarks</code>。</p><p>在请求体 / 请求参数这里，这里设置返回体类型是<code>参数（x-www-form-urlencoded）</code>，下方的参数为<code>url</code>，值是<code>{readeck_shared_url}</code>。</p><p>在认证这里，选择认证方式为「令牌认证」，令牌为<code>{readeck_token}</code>。全部编辑好之后点击右上角的对勾确认保存，至此发送网页脚本就正式编辑完成了。</p><p><img src="/public/2024/06/06/readeck_tips/db73b4af0cee6eff2e2aac3eb644ece0_MD5.png" alt></p><p>那么怎么使用呢？这里只需要使用浏览器打开一篇文章，然后点击分享来展开 Android 系统的原生分享菜单，这里就可以看到刚刚我们创建的这个名为「Add To Readeck」的图标，点击后会提示该脚本已经执行，只要不报错就表示网页已经成功提交到 Readeck 中了，如果不确定可以到 Readeck 的文章列表中查看是否已经发送成功了。</p><h2 id="Readeck-进阶用法-2：在不同的平台使用不同的姿势阅读"><a class="header-anchor" href="#Readeck-进阶用法-2：在不同的平台使用不同的姿势阅读">¶</a><strong>Readeck 进阶用法 2：在不同的平台使用不同的姿势阅读</strong></h2><p>既然文章都已经上传到 Readeck 中了，那么该如何进行阅读呢？和其他商业产品不同的是 Readeck 并没有推出专门的阅读客户端，不过好在 Readeck 提供了很多丰富的阅读方式，体验上还是相当不错的。</p><h3 id="Readeck-的准官方客户端：PWA-应用"><a class="header-anchor" href="#Readeck-的准官方客户端：PWA-应用">¶</a><strong>Readeck 的准官方客户端：PWA 应用</strong></h3><p>如果只是用来阅读，那么实际上使用 Web 网页就完全够用，而 Readeck 也已经支持以 PWA 的形式进行安装，那么最为简单的方式就是将其安装成 PWA 应用——使用浏览器访问你部署的 Readeck 服务，桌面端点击地址栏的安装来将其安装成 PWA 应用，至于移动端也是类似。而整体体验下来个人觉得已经足够满足使用需求——尤其是 Readeck 的网页端也针对移动设备进行了优化，阅读沉浸感还是很不错的。</p><p><img src="/public/2024/06/06/readeck_tips/b81c232782972c95736f65dda8fe21bc_MD5.png" alt></p><h3 id="在移动端通过支持-OPDS-的阅读应用来阅读"><a class="header-anchor" href="#在移动端通过支持-OPDS-的阅读应用来阅读">¶</a><strong>在移动端通过支持 OPDS 的阅读应用来阅读</strong></h3><p>Readeck 原生支持 OPDS——通过访问路径的形式可以将保存的稍后读文章以电子书的形式发布，这样我们看文章的体验就会和通过电子书类似，那么如果你平时习惯在手机上通过阅读应用来看书，那么就可以将 Readeck 添加成书库在应用中阅读。</p><p><img src="/public/2024/06/06/readeck_tips/f8f25fbe7f6f47ad5ef27cd5873c0ecc_MD5.png" alt></p><p>这里，iOS 上可以使用这个名为 cantook 的应用来实现，打开这款应用并点击导航栏中的「书店」同时点击右上角的添加，然后再选择「手动添加书店」，在弹出的新建目录名称和链接对话框中，填写目录名称（这里随便写）以及目录链接（<a href="https://xn--1jqqxr1q3b533cw99a/opds" target="_blank" rel="noopener">https:// 你的书库地址 / opds</a>）后，然后点击添加，这时候再点击书店中的新保存的这个新书店，根据提示输入你的 readeck 的账户和密码，就可以顺利进入到目录中了，只不过进入阅读后你会发现还是访问的是 Readeck 的网页端而已。至于 Android 上，支持 OPDS 目录的阅读应用也有不少，比如静读天下也支持挂载 OPDS 目录，这里我就不过多的赘述了。</p><h2 id="总结"><a class="header-anchor" href="#总结">¶</a><strong>总结</strong></h2><p>经过一段时间的试用，我正式将自部署的 Readeck 作为我的主要稍后读服务，并且实现了我接触的场景下全平台的发送网址 / 阅读解决方案，虽然相比商业化的稍后读服务需要自己手动配置多种服务，但由于是自部署的服务，数据安全和网络访问上其实要比商业化的服务要更为可靠，如果你和我一样之前使用的是海外的商业化的稍后读服务，不妨尝试自己部署 Readeck 让数据掌握在自己手中。</p><blockquote><p>关注 <a href="https://sspai.com/link?target=https%3A%2F%2Fwww.xiaohongshu.com%2Fuser%2Fprofile%2F63f5d65d000000001001d8d4" target="_blank" rel="noopener">少数派小红书</a>，感受精彩数字生活 🍃</p></blockquote><blockquote><p>实用、好用的 <a href="https://sspai.com/mall" target="_blank" rel="noopener">正版软件</a>，少数派为你呈现 🚀</p></blockquote><h2 id="补充"><a class="header-anchor" href="#补充">¶</a><strong>补充</strong></h2><p>nginx 对 readeck的 代理，即使用 <a href="http://xxx.com/read/" target="_blank" rel="noopener">xxx.com/read/</a> 访问。</p><p>docker-compose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.0&quot;</span><br><span class="line">services:</span><br><span class="line">  readeck:</span><br><span class="line">    container_name: Readeck</span><br><span class="line">    image: codeberg.org/readeck/readeck:latest</span><br><span class="line">    security_opt:</span><br><span class="line">      - no-new-privileges:true</span><br><span class="line">    restart: on-failure:5</span><br><span class="line">    ports:</span><br><span class="line">      - 4522:8000</span><br><span class="line">    volumes:</span><br><span class="line">      - $HOME/docker_assets/readeck/data:/readeck:rw</span><br><span class="line">    environment:</span><br><span class="line">      READECK_USE_X_FORWARDED: 1</span><br><span class="line">      READECK_SERVER_PREFIX: /read</span><br><span class="line">      READECK_DATABASE_SOURCE: postgres://readeck:readeckpass@readeck-db:5432/readeck</span><br><span class="line">  readeck-db:</span><br><span class="line">    image: postgres:12-alpine</span><br><span class="line">    container_name: Readeck-DB</span><br><span class="line">    hostname: readeck-db</span><br><span class="line">    security_opt:</span><br><span class="line">      - no-new-privileges:true</span><br><span class="line">    healthcheck:</span><br><span class="line">      test:</span><br><span class="line">        - CMD</span><br><span class="line">        - pg_isready</span><br><span class="line">        - -q</span><br><span class="line">        - -d</span><br><span class="line">        - readeck</span><br><span class="line">        - -U</span><br><span class="line">        - readeck</span><br><span class="line">      timeout: 45s</span><br><span class="line">      interval: 10s</span><br><span class="line">      retries: 10</span><br><span class="line">    volumes:</span><br><span class="line">      - $HOME/docker_assets/readeck/db:/var/lib/postgresql/data:rw</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_DB: readeck</span><br><span class="line">      POSTGRES_USER: readeck</span><br><span class="line">      POSTGRES_PASSWORD: readeckpass</span><br><span class="line">    restart: on-failure:5</span><br><span class="line">networks: &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">location /read/ &#123;</span><br><span class="line">           proxy_pass http://127.0.0.1:4522/read/;</span><br><span class="line">           proxy_set_header Host $host:$server_port;</span><br><span class="line">           proxy_set_header X-Real-Scheme $scheme;</span><br><span class="line">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">                   # WebSocket support</span><br><span class="line">           proxy_http_version 1.1;</span><br><span class="line">           proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">           proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line"></span><br><span class="line">           proxy_read_timeout 120s;</span><br><span class="line">           proxy_next_upstream error;</span><br><span class="line">           proxy_redirect off;</span><br><span class="line">           proxy_buffering off;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>config.toml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[main]</span><br><span class="line">log_level = &quot;info&quot;</span><br><span class="line">secret_key = &quot;&quot;</span><br><span class="line">data_directory = &quot;data&quot;</span><br><span class="line"></span><br><span class="line">[server]   &lt;--- 这里保持默认就可以了</span><br><span class="line">host = &quot;0.0.0.0&quot;</span><br><span class="line">port = 8000</span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line">source = &quot;postgres://readeck:readeckpass@readeck-db:5432/readeck&quot;</span><br></pre></td></tr></table></figure><p>开发文档<a href="https://readeck.org/en/docs/dev" target="_blank" rel="noopener">https://readeck.org/en/docs/dev</a></p><p><img src="/public/2024/06/06/readeck_tips/8bfe65c882e219c01acbbd173cd40c03_MD5.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;¶&lt;/a&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&quot;http://ksria.com/simpread/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&quot;https://sspai.com/post/89289&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://sspai.com/post/89289&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具" scheme="https://talengu.github.io/public/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://talengu.github.io/public/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>人人都是开发者「转」</title>
    <link href="https://talengu.github.io/public/2024/04/19/AI/%E4%BA%BA%E4%BA%BA%E9%83%BD%E6%98%AF%E5%BC%80%E5%8F%91%E8%80%85/"/>
    <id>https://talengu.github.io/public/2024/04/19/AI/人人都是开发者/</id>
    <published>2024-04-19T12:00:00.000Z</published>
    <updated>2024-04-19T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><p>“自然语言会成为下一代的编程语言，人人都能成为开发者。”</p><p>4月16日，Create 2024百度AI开发者大会在深圳召开，百度创始人、董事长兼首席执行官李彦宏发表了《人人都是开发者》的主题演讲，描述了一个不再局限于编码技能的世界，而是以自然语言为媒介，人人都能参与创造的时代。</p><a id="more"></a><h2 id="演讲稿"><a class="header-anchor" href="#演讲稿">¶</a>演讲稿</h2><p>大家好，欢迎参加Create 2024百度AI开发者大会，这是Create大会首次在粤港澳大湾区举办。今天现场来了5000多位开发者和科技爱好者。</p><p>过去这一年，我跟很多创业者、开发者交流，感觉大家都处在一种“FOMO”状态，也就是Fear of Missing Out，既兴奋、又害怕错过。确实，大模型和生成式AI，将彻底改变开发者这个群体。</p><p>过去，开发者用代码改变世界；未来，自然语言将成为新的通用编程语言，你只要会说话，就可以成为一名开发者，用自己的创造力改变世界。</p><p>这一天并不遥远，我们看到，因为有了强大的基础大模型，有了很多低门槛，甚至零门槛的开发工具，开发者的生产力大大提高了。</p><p>比如，基于文心大模型的智能代码助手Comate，不仅支持100多种语言和所有主流IDE平台，可以推荐代码、生成代码注释、查找代码缺陷、给出优化方案，还可以深度解读代码库、关联私域知识生成新的代码。上岗一年多，Comate已经走入了喜马拉雅、三菱电梯、软通动力等上万家企业，生成的代码采纳率达到了46%，百度每天新增的代码中，已经有27%是由Comate生成的。</p><p>今天，你不会写代码，也可以做出一个AI应用；不用编程，也可以做出一个智能体。AI正在掀起一场创造力革命，未来开发应用就像拍个短视频一样简单，人人都是开发者，人人都是创造者。</p><p>作为一家技术公司，百度的角色定位，就是尽可能地为大家提供所需的开发工具，不断提升整个社会的创造力。具体来说，我们提供1个强大的基础模型系列，就是文心大模型系列，这包括旗舰版的ERNIE3.5， ERNIE4.0， 也包括轻量版的ERNIE Speed、Lite、Tiny等等。</p><p>我们还提供基于大模型来开发各种应用的工具，包括智能体开发工具AgentBuilder，AI原生应用开发工具AppBuilder，以及各种尺寸的模型定制工具ModelBuilder。这三个工具，都代表了先进生产力。下面，我会给大家一一展示。</p><h2 id="文心一言用户超2亿，文心大模型4-0工具版发布"><a class="header-anchor" href="#文心一言用户超2亿，文心大模型4-0工具版发布">¶</a>文心一言用户超2亿，文心大模型4.0工具版发布</h2><p>首先讲一下，文心一言和文心大模型的最新进展：</p><p>文心一言从去年3月16日发布，到今天是一年零一个月的时间。我们的用户数突破了2亿，API日均调用量也突破了2亿，服务的客户数达到了8.5万，利用千帆平台开发的AI原生应用数超过了19万。</p><p>我们看看，大家都在用文心一言做什么？</p><p>视频中的真人真事只是冰山一角。我们可以看到，文心一言正在改变更多人的工作和生活。</p><p>支撑文心一言的基座模型，就是文心大模型。过去一年，它经历了从3.0版本到3.5，再到4.0版本的进化。文心4.0在理解、生成、逻辑、记忆四大能力方面，均达到了业界领军水平。</p><p>近几个月来，文心大模型在代码生成、代码解释、代码优化等通用能力方面实现了进一步的显著提升，达到国际领先水平。</p><p>今天，我们正式发布文心大模型4.0的工具版，现在，大家可以在工具版上，体验代码解释器功能，通过自然语言交互，就能实现对复杂数据和文件的处理与分析，还可以生成图表或文件，能够快速洞察数据中的特点、分析变化趋势、为后续的决策提供高效精准的支撑。</p><p>文心大模型已经成为了中国最领先、应用最广泛的AI基础模型。</p><p>不仅如此，相比一年前，文心大模型的算法训练效率提升到了原来的5.1倍，周均训练有效率达到98.8%，推理性能提升了105倍，推理的成本降到了原来的1%。</p><p>也就是说，客户原来一天调用1万次，同样成本现在可以调用100万次。媒体可能不会因为成本下降99%而兴奋。但是企业也好，开发者也好，一旦用起来，最关注的就是效果和成本。</p><p>我们能在提升性能的同时，把推理成本降到1%，正是因为百度在芯片、框架、模型、应用这四层架构上有着全栈的布局，通过端到端优化，不断地把成本打下来，让更多人都可以高效、低价地用大模型来做AI应用。</p><p>毫无疑问，大模型相关的话题，在2024年依然会很热，各类技术突破还会不断涌现。媒体也会继续热衷于用“震撼发布”“史诗级更新”这样的标题进行渲染。但我想强调的是，大模型本身并不直接创造价值，基于大模型开发出来的AI应用才能满足真实的市场需求。</p><h2 id="分享开发AI原生应用的具体思路和工具：“踩了无数的坑，交了高昂学费”"><a class="header-anchor" href="#分享开发AI原生应用的具体思路和工具：“踩了无数的坑，交了高昂学费”">¶</a>分享开发AI原生应用的具体思路和工具：“踩了无数的坑，交了高昂学费”</h2><p>今天我想跟大家分享的是一些基于大模型开发AI原生应用的具体思路和工具。这是我们百度根据过去一年的实践，踩了无数的坑，交了高昂的学费换来的。</p><p>第一是MoE。未来大型的AI原生应用基本都是MoE架构，这里所说的MoE不是一般的学术概念，而是大小模型的混用，不依赖一个模型来解决所有问题。但什么时候调用小模型、什么时候调用大模型、什么时候不调用模型，这都是有技术含量的，要针对应用的不同场景做匹配。</p><p>第二是小模型。小模型推理成本低，响应速度快，在一些特定场景中，经过SFT精调后的小模型，它的使用效果可以媲美大模型。这就是我们发布Speed，Lite、Tiny三个轻量模型的原因。我们通过大模型，压缩蒸馏出来一个基础模型，然后再用数据去训练，这比从头开始训小模型，效果要好很多，比基于开源模型训出来的模型效果更好，速度更快，成本更低。</p><p>第三是智能体。智能体是当下很热的一个话题，随着智能体能力的提升，会不断催生出大量新的应用。智能体机制，包括理解、规划、反思和进化，它让机器像人一样思考和行动，可以自主完成复杂任务，在环境中持续学习、实现自我迭代和进化。在一些复杂系统中，我们还可以让不同的智能体互动，相互协作，更高质量地完成任务。这些智能体能力，我们已经开发出来了，并且向开发者全面开放。</p><p>在MoE、小模型、智能体这三个方向上，百度都已经给大家做好了“开箱即用”的工具。下面，我就给大家介绍三种不同的工具，分别是：智能体开发工具AgentBuilder、AI原生应用开发工具AppBuilder、各种尺寸的模型定制工具ModelBuilder。</p><h2 id="智能体开发工具AgentBuilder"><a class="header-anchor" href="#智能体开发工具AgentBuilder">¶</a>智能体开发工具AgentBuilder</h2><p>首先是智能体开发工具AgentBuilder。智能体可能是未来离每个人最近、最主流的大模型使用方式，基于强大的基础模型，智能体可以批量生成，应用在各种各样的场景。</p><p>百度刚刚升级了文心智能体平台。截至目前，已经有3万多个智能体被创建、5万多名开发者和上万家企业入驻。我们的目标是，让每个人、每个组织都成为智能体的开发者，打造国内最完整的智能体生态。</p><p>那如何实现这个目标呢？就是给大家提供零门槛的智能体开发工具AgentBuilder。</p><p>下面我们就先以“新加坡旅游局”为例一起看看，一个智能体是如何做出来的。</p><p>首先，我们打开文心智能体平台，创建页面有着零代码、低代码两种模式，新手可以直接选择“零代码模式”，用自然语言，几句话就能创建一个智能体。</p><p>我们先给智能体起名叫“新加坡旅游局”，然后在设定里写明需要打造旅游方案、解答问题，提供酒店门票预订服务，这些设定都是用来指导智能体的，告诉它都能做什么。</p><p>如果只需要基础智能体，平台会自动完成填写。但我们希望“新加坡旅游局”是一个专业的智能体，所以要进行高级配置。我可以把新加坡百科词条和官网链接都添加到知识库里，让它每天更新。然后添加一些工具，如酒店查询、景点门票购买等，增强它的服务能力。目前我们已经跟携程合作，提供了酒店、景点、票务等旅游服务工具。这样，一个新加坡旅游局的智能体就做好了，可以进一步预览、调优。</p><p>现在打开百度APP，搜索“什么时候去新加坡人最少”，因为大家出去旅游都想避开人潮。智能体会综合多个来源的信息，生成一个答案，“1-3月人最少”。我们还可以点击智能体，和它进一步互动，比如去新加坡旅游的注意事项，推荐新加坡排名前三的酒店，还能让它直接预订新加坡环球影城的门票，一站式解决需求，大大节省了用户时间。</p><p>除了新加坡之外，大连、沈阳等文旅类智能体也都在文心智能体平台上线，还有知识类、创作类、学习类、娱乐类等各式各样的智能体，这些都是用AgentBuilder做出来的。</p><p>去年文心一言刚发布的时候，我就说过，文心一言会影响到每一家公司。因为它强大的自然语言理解能力、表达能力、推理能力，可以使任何一个公司都离自己的客户更近。</p><p>今天，每一个商家、每一个客户，都能在百度拥有专属的智能体。整个过程完全不需要编程，通过类似提示词的信息输入，和简单的几步操作调优，就能迅速生成一个智能体，成为7X24小时在线的金牌业务员。</p><p>我们来看一下，一个商家智能体是怎么做出来的。</p><p>启德教育是家知名教育企业，在全国有60多家分支机构，还有很多海外分公司，覆盖国家广，对接待的话术要求很高。如何能全天24小时回复客户的咨询，并且提高接待水平、降低经营成本呢？</p><p>启德教育利用百度的AgentBuilder，打造了专属的智能体。</p><p>我们来看看，如何打造一个具备基本能力的智能体。很简单，在平台上填写智能体的头像、名称、经营业务范围和欢迎语，再设置一些需要用户提供的信息，比如年龄、学历。5分钟、零门槛，一个智能体就做好了。</p><p>启德教育还希望这个智能体是个懂业务、懂学生的留学顾问。它可以针对学生的不同情况，比如想去美国还是澳洲、是硕士还是学士、雅思和托福考了多少分等等，做出专业分析，给出精准回答。我们可以通过添加知识、角色、工具这几大模块，来打造一个更高级的智能体。</p><p>在知识模块中，上传私域知识，让平台实时解析，自动生成对话语料；在角色模块，把一些不在经营范围内的留学国家，增加到过滤方案中，可以提高用户线索的有效率；在工具模块，加入预约到店等服务。通过这样几步简单操作，一个拥有专业能力的启德教育智能体就做好了。</p><p>现在，我们来搜索“澳洲留学申请条件”，可以看到智能体快速给出了需要的语言能力、专业选择等七大必备条件，还给能出相应的留学咨询方案，对各种难题都有问必答、有求必应。</p><p>启德教育智能体非常的受欢迎，上线第一周，就成功分发了155万次，与用户交互了5.8万次，线索转化量直线增长、有效线索的转化成本明显降低，经营效率大幅提升。</p><p>下面，我再给大家介绍一个家居行业的智能体。</p><p>索菲亚是专注全屋定制的家居品牌。就像刚刚展示的，它也可以通过填写极其简单的信息，创建出一个基础的商家智能体。但对于家居行业，消费者的线下体验更重要，所以索菲亚希望能在线上打造出一个金牌销售，还原线下的接待体验。</p><p>因此在进一步的设置中，它在角色模块，选择了数字人作为展示方式，然后给数字人选取了合适的背景和声音，并且结合平台的智能解析能力，自动总结了一套销售话术。最终打造出一位温柔亲切、话术专业的金牌销售，她能24小时满足用户的各种需求，提供高水准的服务体验。</p><p>当百度搜索用户有装修诉求时，索菲亚智能体会利用文心大模型的能力，优先给出问题的答案。除此之外，她还会主动与客户确认具体需求，如装修类型、预算等，并推荐附近的线下门店。</p><p>索菲亚商家智能体上线以来，有效线索成本下降了30%。也就是说，它获得一个有效客户，如果过去的成本是100块，现在只需要70块了。</p><p>目前，已有超过1万个百度的客户拥有了商家智能体，涵盖了教育培训、房产家居、机械设备、商务服务等超过30个行业。</p><p>上面，通过三个Demo，我展示了开发者和商家，如何利用AgentBuilder，制作不同行业智能体的过程。</p><p>现在，制作一个智能体，真的就是分分钟的事。但问题来了！如果没流量、没分发、找不到、没人用，那么开发者和商家就没有收益，没有收益就没有动力。怎么解决这个痛点呢？</p><p>我们的文心智能体平台，为开发者们提供了流量变现的通路。除了百度搜索，百度生态的其他产品，如小度、地图、贴吧、车机等，都能接入智能体的相关能力，为开发者解决流量分发的后顾之忧，获得实打实的收益。</p><p>有分发，就会有数据反馈；有数据反馈，飞轮转起来，智能体就能够自主迭代，越用越聪明。文心智能体平台还上线了智能体的数据分析和问答调优模块，不久后还将有更多的新能力上线。文心智能体平台将通过分发-诊断-收益的数据飞轮，驱动智能体形成质量更优、流量更好、收益更大的正循环。</p><h2 id="AppBuilder：自然语言三步就能开发一个应用"><a class="header-anchor" href="#AppBuilder：自然语言三步就能开发一个应用">¶</a>AppBuilder：自然语言三步就能开发一个应用</h2><p>下面，我给大家介绍第二个开发工具，AppBuilder。它是目前最好用的AI原生应用开发工具。在AppBuilder上面，我们提前封装和预置了开发AI原生应用所需的各种组件和框架，大幅降低开发门槛。</p><p>最快只需三步，开发者就可以用自然语言开发出一个AI原生应用，并且能够便捷地发布、集成到各种各样的业务环境中。我们来看几个案例：</p><p>今年年初，我们搞过一期AI原生应用开发挑战赛，赛题是利用AppBuilder打造一款“游乐场排队规划助手”，帮助游客更好地了解游乐场排队情况，设计个性化的游玩路线，在有限时间内获得最好的游玩体验。</p><p>这期比赛的冠军选手，没写一行代码，就开发出了应用，拿到了百度提供的10万元大奖。这个题目如果会写代码的话，你写一个并不难，但是你一行代码都不写还能做出来，那还是非常依赖基础模型和AppBuilder这个工具的能力的。</p><p>我们来看下，怎么用AppBuilder，把这个AI应用做出来。</p><p>我们先回顾一下赛题。它假定了“环球影城”各个项目的排队时间和刺激指数，那么在有限的时间内获得刺激指数最高的体验，就是这期赛题要解决的问题。</p><p>首先，打开AppBuilder的开发界面，给应用起名“游乐场排队助手”；第二步，我们在角色指令中描述具体要求，包括调用代码解释器、算出在固定时间内的最佳组合、输出结果等；第三步就是到工具组件中，把代码解释器添加进来，帮助运算。</p><p>现在，我们来测下效果，在右侧输入问题“我有3个半小时时间，怎么玩最刺激？”，可以看到，代码解释器将这个问题翻译成了代码，再调用数据理解工具，对已知条件进行分析。经过一系列计算，得出将《哈利波特禁忌之旅》、《侏罗纪大冒险》、《霸天虎过山车》、《大黄蜂回旋机》，这四个项目组合游玩，效果最佳。测试没问题，点击发布，在零代码的情况下，一个应用就生成了。</p><p>现在，AppBuilder又进一步升级了，在创建的过程中，全部可以通过“AI优化配置”功能，自动帮助开发者优化角色指令、组件配置等环节，进一步提高开发效率。</p><p>我们再看一个例子。</p><p>今年年初，华北电力大学提出，希望为全校师生提供智能化的专属服务。基于百度的AppBuilder，我们共同打造了一个华电AI助理，下面，我来给大家展示一下，华电AI助理是怎么做出来的：</p><p>第一步：打开AppBuilder，进入创建页面，点击AI自动生成配置。首先为应用设置名称、简介、头像等基本信息。</p><p>第二步：通过自然语言在角色指令中描述具体要求，包括任务、组件能力、要求与限制。</p><p>第三步：插入自定义的图书借阅查询、课表查询、学生成绩查询等组件，让校园助手能够具备智能化服务的能力。之后再为校园助手添加一个开场白，这样应用就配置好了。</p><p>接下来，我们在预览界面中，结合用户提问，对助手进行调试。比如询问四六级考试的报名时间，测试各组件自动调用的效果。</p><p>大家可以看到，通过这些简单的操作，这个应用就构建完成了。目前已经小规模测试上线，接入了查制度、查课程，充饭卡、借书籍等高频场景，服务了学校广大师生。后续，我们将与华北电力大学一起，进一步深化应用合作，提供更为丰富便捷的服务。</p><p>百度在跨模态方面，也有着多年技术积累。在AppBuilder上面，我们也提供了一定的跨模态能力，你只需要给一段文字，或者几句话，就可以快速创建绘画类的应用，像漫画、儿童画本等。</p><p>过程也很简单：打开AppBuilder，点击进入“应用创建”，输入角色指令，选择“添加文生图”组件，再输入三个推荐问题，就可以点击发布了。应用做好后，我们只需要输入一个大概想要的角色或剧情，AppBuilder就可以自动生成故事、输出图画。</p><p>百度文库最新推出的智能漫画和画本生成功能，就利用了AppBuilder上提供的这类组件。我们来看看，百度文库的漫画生成功能，是如何让每一个有创想的人，都能做出好作品的。</p><p>以经典的《周处除三害》为例。</p><p>打开百度文库，输入主题《周处除三害》，这在《晋书》和《世说新语》里都有写到，文库搜索后，会根据原文生成故事，我们也可以再对故事内容进行修改；然后点击右侧的AI工具栏，开始创建这篇漫画。</p><p>进入漫画制作界面，文库将根据故事情节为我们自动生成漫画分镜；然后从光影、写实、卡通等多种风格中，选择最贴合故事的漫画风格；最后根据角色选择不同的人物形象，这样就完成了漫画的生成。</p><p>漫画生成后，我们可以在百度文库的智能漫画编辑器里，浏览完整的漫画。同时，文库支持对每一个画面进行编辑、修改和精调，比如，在左侧选中画面“周处与白额虎”，点击编辑，增加画面描述“人物面容清晰，画面明亮”，就能精调出更符合需求的漫画。大家看到，百度文库的漫画功能在角色和场景的风格一致性方面，都做得非常出色。</p><p>百度文库的智能漫画能力，极大地提高了创作漫画的效率，降低了漫画创作的成本和门槛，可以让更多有想法、有创意的人实现自己的漫画创作梦。</p><p>不止生成漫画，百度文库现在还可以帮助用户零门槛的创作画本。大家可能不知道，中国小孩一年的人均绘本阅读量只有10本，而欧美国家是50本左右。现在，AI能够让完全没有绘画能力的父母，也可以为自己的孩子创作一个专属的儿童画本了。下面我们就来看一下这个图文并茂的有声画本吧！</p><p>从去年开始，我们用AI重构了百度文库，使它成为用户“内容生产的起点”。如今，在AppBuilder的支持下，百度文库新推出的智能漫画和智能画本功能，更是把场景延伸到了更加有趣的跨模态创作领域。</p><p>刚才我用三个案例，展示了如何用百度的AppBuilder，做出AI原生应用。大家应该能够感受到AppBuilder的两个明显优势：</p><p>一是功能强大。依托文心4.0对指令的理解和遵循能力，我们的AppBuilder，能保证冷启动就能达到一个不错的水平，不会因为效果差，再花很长时间去调优，大大降低了开发门槛。依托检索增强技术RAG，在知识问答等典型场景，我们的问答准确率和友好回复程度都达到了95%以上，大幅超越其他同类产品。AppBuilder还提供丰富完整的组件工具，包括百度搜索等基于百度多年技术积累的AI能力组件、大模型能力组件，还有百度独家开放的业务组件等55个组件。以及一些主流场景的第三方API，比如航班查询、论文查询等。我们还刚刚支持了自定义组件，客户可以直接对接自己专有的任何工具和数据。这些丰富的组件，共同支撑起了AI原生应用的高效开发。</p><p>二是简单易用。使用AppBuilder，只需三步即可快速创建应用、一键分发。我们也支持开源的SDK，方便大家进行二次开发。</p><h2 id="模型定制工具ModelBuilder：高效低价生产模型"><a class="header-anchor" href="#模型定制工具ModelBuilder：高效低价生产模型">¶</a>模型定制工具ModelBuilder：高效低价生产模型</h2><p>下面我再介绍一下更适合专业开发者使用的工具，那就是ModelBuilder，它可以根据开发者的需求定制任意尺寸的模型，并根据细分场景对模型进一步精调SFT，这样就能达到更好的效果。对开发者来说，用好大模型很重要的一件事儿，就是掌握模型精调的方法。</p><p>我们以教育行业的作文批改场景来举例。因为作文批改有明确的评分标准，并且不同年级对作文的要求和打分标准，也是不同的。这就需要模型精调，让大模型输出的结果，更符合特定的要求。</p><p>我们就来看一下，ModelBuilder是如何实现作文批改的模型精调的。</p><p>第一步：创建数据集。模型精调的效果很大程度依赖我们的数据质量。在这个案例中，原始数据只有180条，质量也不够高。我们就需要用到三个功能：数据清洗、数据标注和数据增强。数据清洗，可以快速去除数据的空缺、乱码等问题。数据标注方面，我们对作文增加了更多维度，比如内容深度、写作手法等评价。数据增强功能，可以生成同类但不重复的数据，进行数据扩充。扩充后，ModelBuilder给我们生成了920条高质量数据。</p><p>第二步，就进入模型精调阶段了。首先，我们需要选择一个进行精调的基础模型，这里我们选择了ERNIE Speed作为基础模型。然后，我们根据平台推荐值来配置参数，这次数据接近1000条，按照推荐的迭代轮次，配置为10轮，然后就可以让模型开始训练了。</p><p>第三步：把模型部署在平台上，这样整个精调过程就完成了。</p><p>我们来用一篇中学作文，测试下精调后的模型效果。作文题目是《期待长大》，题材不限，不少于800字。</p><p>我们将一篇学生的作文及批改格式要求，输入到精调前后的两个模型里。来看下，两个模型及老师点评三者的对比。可以看到，精调后的大模型拥有了更加专业的老师点评思维、更好地做了格式遵循。原本老师需要较长时间才能完成的作文批改任务，现在借助大模型，几秒钟就可以快速完成，大大地提升了给学生反馈的速度和效率。目前，这一类精调后的模型，已经在多个教育行业的头部企业中应用起来了。</p><p>我前面谈到大型AI原生应用一般都是MoE。那么，该如何组合使用这些模型，获得最好的性价比呢？下面，我就用小度来展示一个MoE模型路由的案例。我们首先来看看，有了大模型的加持，小度是不是变得更聪明了：</p><p>Robin：小度小度 小度：在呢</p><p>Robin：今天有什么新闻？</p><p>小度：小度播3-5条当日新闻快讯</p><p>Robin：小度小度。听说你最近长本事了？ 小度：我不单能陪你聊天，还能做你的AI日程助手</p><p>Robin：那我要来考考你了。帮我安排一下日程，今天活动结束后，我会和张总一起用晚餐，之后在酒店有个管理层的会议，大概需要1个半小时，希望10点之前可以结束。明早我准备晨跑，看看天气如何，然后上午8点有个早会，请帮我安排好日程。 小度：根据您需求，小度给您制定最优的日程安排如下</p><p>您与张总晚餐安排在18：00-19：30，结束后，您将在20：00参加管理层会议，21:30左右结束明早6点闹钟将提醒您起床去晨跑，跑步时长控制在1个小时以内，确保明早8点早会不迟到明早天气晴朗，气温25度，建议您穿短袖外出，做好防晒您看我能不能当你的秘书，我还有更多新技能呢Robin：挺好的，很棒（向小度竖起大拇指），把这些日程同步到我的手机上吧。</p><p>刚刚，我向小度提出了好几个问题，其中既有简单的新闻问询，也有复杂的日程安排需求。看起来是跟同一个小度在交流，其实背后调用了不同的模型。当它接受到我的问题后，先是由小模型ERNIE Tiny执行了“模型路由”的工作；对于天气问题，它根据天气查询的结果，调用基于ERNIE Lite打造的精调模型，也是经过SFT的ERNIE Lite，给出了穿衣建议；对于更复杂的日程安排，则调用了性能最好的大模型——文心4.0，来计算出从今晚到明早的各项事项安排。</p><p>今天，我们提给小度的每个问题，都会这样分配给不同模型来执行，调用应用的API接口时，会用ERNIE Functions模型，给孩子讲题时，用文心大模型3.5或4.0，智能助理的打造则用了ERNIE Character模型，提高人设一致性、激发用户聊天欲望。</p><p>通过这种大小模型的组合调度方式，小度不仅顺利完成了“换脑行动”，装上了全新的AI原生操作系统DuerOS X，而且形成了效果、速度和成本的最优组合，相比全部使用文心大模型的旗舰版，让响应速度提升2倍，成本下降了99%。刚才和我对话的这个小度添添AI平板机器人，昨天已经在各大平台全面开售，有兴趣的朋友们可以即刻下单体验了。</p><p>这几个关于ModelBuilder的例子，展示的是百度高效低价生产模型的能力。因为有了最强大的基础模型文心4.0，我们可以根据需要，兼顾效果、响应速度、推理成本等各种考虑，裁剪出适合各种场景的更小尺寸模型，并且支持精调和post pretrain。这样通过降维裁剪出来的模型，比直接拿开源调出来的模型，同等尺寸下，效果明显更好，同等效果下，成本明显更低。大家以前用开源觉得开源便宜，其实在大模型场景下，开源是最贵的。所以开源模型会越来越落后。</p><p>为了方便大家快速上手，ModelBuilder预置了最全面最丰富的大模型。包括了ERNIE3.5和ERNIE4.0，这是旗舰版的大模型，它适合通用的复杂场景，能力强大；还有三个轻量级的大模型， ERNIE Speed、Lite、Tiny；另外还有两个垂直场景的模型，ERNIE Character适合角色扮演；ERNIE Functions适合对话或问答场景中的外部工具使用和业务函数调用。当然ModelBuilder也支持国内外第三方主流模型，总数量达到77个，是国内拥有大模型数量最多的开发平台。</p><p>第二届“文心杯”创业大赛正式启动：设5000万元特别大奖</p><p>对于开发者，我们除了提供这些开发工具，还提供资金和资源方面的支持。</p><p>去年5月份，百度启动了“文心杯”创业大赛，希望推动大模型生态繁荣，打造更有活力的生态系统，帮助创业者、开发者开发各种AI原生应用。第一届“文心杯”创业大赛，我们收到了近1000支创业团队报名，百度为其中的15支优胜团队，提供了近亿元的投资支持，并且在技术、团队和资源上持续提供全方位扶持。</p><p>今天我宣布，第二届“文心杯”创业大赛正式启动。这次我们将扩大项目筛选范围、设置分赛场，面向全球市场及高校学子，招募创业创新团队，只要你的创业方向是AI原生应用，都可以在大赛官网报名参赛。同时，我们也加大了对创业者的支持力度，提供更充足的投资资金、更丰富的业务资源，还首次设立了“特别大奖”，特别优秀的项目将有机会获得最高5000万人民币的现金和资源支持。</p><p>中国的创业者和开发者，非常善于利用新技术来开发应用。我相信，文心大模型将成为中国AI创业者和开发者的首选，越来越多的应用会建立在文心大模型之上。我也期待，更多创业者和开发者加入我们，一起构建繁荣的AI生态。</p><p>视觉大模型最大的应用场景是自动驾驶</p><p>前面我们谈到的这些工具和案例，大部分都是基于大语言模型的。面向未来，我认为多模态大模型，或者说文字、图片、语音、视频等多模态的融合，是基础模型非常重要的长期发展方向，是通往AGI的必经之路。百度在这些领域有着长期投入，并将及时更新技术进展。</p><p>我有一个非常不一样的判断：视觉大模型最大的应用场景是自动驾驶。百度在这个方向上是最好的，是自动驾驶的全球领导者，我们不只训练AI如何生成视频，更训练AI理解真实世界发生的事情并预测未来。</p><p>基于超过1亿公里的、中国复杂城市道路测试里程数据，百度训练出来了Apollo视觉感知大模型。它具备检测、跟踪、理解、建图四大基础能力。这让百度拥有了更智能、适应性更强、更安全的自动驾驶方案。</p><p>百度地图也率先将视觉感知大模型应用到了制图领域。现在，全球最大规模的车道级地图数据，已经上线全国360座城市。只要百度地图导航能去的地方，智驾就都能开。</p><p>今年春节后，百度的萝卜快跑实现了万里长江“第一跨”， 我们把服务从长江的北岸延伸到了南岸，在武汉的部分区域，我们已经实现了7X24小时的全天候运营，还计划年内在武汉部署1000台无人驾驶车辆。</p><p>这是自动驾驶走向真正商业化的一个标志性事件，它不再仅仅是区域性的示范，而是进入到了城市级应用示范的新阶段。萝卜快跑在武汉覆盖了3000多平方公里、770万人口，是全球范围内最大规模的自动驾驶运营区域。</p><p>“打包带走，随取随用”</p><p>刚才，我给大家展示了百度文心大模型系列，以及三个开发工具——AgentBuilder、AppBuilder、ModelBuilder，他们组成了一个工具箱，你们可以马上打包带走，随取随用。</p><p>此时此刻，我站在这里，其实也是一个开发者、一个创业者，跟大家一样兴奋。今天的中国，有10亿互联网用户，有强大的基础大模型，有足够多的AI应用场景，有全球最完备的产业体系，国家也在大力鼓励和支持“人工智能+”行动，每一个人，每一家企业，只需要充分利用这些工具，就可以释放无限的创造力和生产力。</p><p>今天，人人都可以成为开发者。而未来，也必将是一个由开发者一起创造出来的未来。</p><h2 id="参考"><a class="header-anchor" href="#参考">¶</a>参考</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;¶&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;“自然语言会成为下一代的编程语言，人人都能成为开发者。”&lt;/p&gt;
&lt;p&gt;4月16日，Create 2024百度AI开发者大会在深圳召开，百度创始人、董事长兼首席执行官李彦宏发表了《人人都是开发者》的主题演讲，描述了一个不再局限于编码技能的世界，而是以自然语言为媒介，人人都能参与创造的时代。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://talengu.github.io/public/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="AI" scheme="https://talengu.github.io/public/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>裁员增笑「转」</title>
    <link href="https://talengu.github.io/public/2024/01/23/readings/caiyuanzengxiao/"/>
    <id>https://talengu.github.io/public/2024/01/23/readings/caiyuanzengxiao/</id>
    <published>2024-01-23T12:00:00.000Z</published>
    <updated>2024-01-23T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我被公司裁了。我一手搭建起核心项目的底层框架，总算熬出头时，公司把我裁了。CEO 当着全公司的面落井下石，羞辱我是滥竽充数。他不知道，核心代码的故障只有我能修。公司求我的日子比想象中来得更快。</p><a id="more"></a><p>1</p><p>「很遗憾地通知您，公司有人员调整，将结束与您的聘用关系。」「您的门禁卡已经失效，请您立刻搬走全部个人物品。」我一头雾水。本以为被人事叫走只是开个小会，没想到是裁员通知。三年前，公司只是不足20人的小企业。我抓住虚拟交互的风口，一手搭建起核心项目的底层框架。我无数个夜晚加班加点，做出第一款产品一Ribo，以眼镜或车窗为载体，实现所有外界环境与人的虚拟交互。再也不用佩戴笨重的VR 设备，用户仿佛生活在科幻大片中。Ribo 一经上市，就引爆市场。无数代理商和开发商找我们合作。Ribo 生态仿佛摩天大楼一般建设起来。我们公司的规模也迅速从 20人扩张到5000人。Ribo 如火如荼地发展，我们也抓紧更新迭代。我流连在技术网站中，把Ribo的系统升级成最前沿的高可用架构。这个架构搭建时非常困难，因为掌握核心技术的人不多。我全身心投入到工作中，无暇处理其他事。陈炳就是那个时期被招进来的。最开始他跟着我做些琐事。他这个人很圆滑，最擅长向上社交。他的朋友圈都是跟大老板打高尔夫、跟产品经理喝下午茶。Ribo 新产品要开发布会，通知我准备稿子。我嫌麻烦。陈炳自告奋勇，主动写好稿子上直播。他的口才好，又积极，让我专心处理技术，以后的发布会都让他去。我乐得清静。我一心只想让Ribo 更好。他宣称自己是 Ribo 的总工程师。久而久之，外界也默认了。他靠着人脉一路高升，做到首席 CEO.与此同时，我完成了Ribo的升级，工作总算轻松了一点。</p><p>2</p><p>有人问过我，陈炳的技术怎么样?我说:「一般，他更擅长社交。」这话传到了陈炳耳朵里。说者无意，听者有心。陈炳在发布会上以「总工程师」自居，不能容忍有人拆他的老底。经济下行时期，很多科技公司都受到波及。Ribo 的股票也有下降，公司传出裁员风波。我做梦也想不到，第一个被裁掉的竟然是我。我回到工位收拾东西，内心一片茫然。门口传来「陈总好!」的声音，我抬头看，陈炳大腹便便地走过来。可能是应酬太多，这三年，他迅速发福，成了一个油腻的中年胖子。他笑眯眯地打招呼:「早，各位早啊!」他晃到我面前，满脸惊讶:「咦，黎工怎么在收拾东西?」有几人向我看过来。陈炳仿佛突然想到什么，大声说:「黎工不会是被裁了吧!」他一咋呼，整个办公室的同事都停下工作来看我。我回答他:「对。我还得收拾东西，先失陪了。」陈炳的话根本就不是对我说的。他转过身，痛心疾首一般围着我转:「可惜啊，黎工也是公司的老员工了!」「公司有人员调整，竟然把黎工给裁了。我就不明白，这么多技术人员不裁，怎么偏偏要裁你呢?」「难道公司考察了所有人的KPI吗?」我不喜欢搞形式主义，平时的汇报总结能省则省，专心干活。陈炳说的 KPI 就是那些形式主义的报告之一。「我也算是跟黎工共事过，实在痛心。」「但是公司不养闲人!」「要是黎工走了，公司业务照常运转，大家就能发现是谁只拿工资不干活了!」他越说声音越大，幸灾乐祸地斜眼瞟我。</p><p>3</p><p>迟钝如我，也能猜到是谁想让我滚了。裁员名单本来就是上面下达的。我一肚子暗火，给大学室友打电话:「Pocky，你之前说的项目，还缺人吗?」电话那头欣喜若狂:「哎呀，黎神，你终于腾出手来关心我啦!」「你尽管开口，你想做什么项目我投资什么。」我不禁莞尔:「行，你现在有空吗，见面详聊。」「有空。那我开车去你公司楼下接你。」</p><p>4</p><p>我抱着一个纸箱，在公司楼下等车。三年不舍昼夜，到头来属于我的也仅有这一箱杂物。陈炳刚开完会，满脸堆笑地送几个合作商出来。陈炳看到我，啧啧称奇:「干活不行，收拾得倒挺快。」我已经不是 Ribo 的员工了，他也不是我上司。但陈炳显然还没从上司的角色转换过来。「介绍一下，王总，徐总，这位是我们技术部的员工。」「前几年公司扩招，招聘门槛低。我们系统升级后极大降低了人员成本，平时摸鱼的员工就被优化掉了。」「两位对新系统有兴趣，我们继续谈合作?」两位老总是跟陈炳差不多的身材，他们站一块儿像三个汽油桶。陈炳凑近我，从鼻子里出声:「喂，黎泉，听说你刚在市区买了房子，贷款压力不小吧。」「我是个念旧情的人。要不，你帮二位老板背包，原地做五百个俯卧撑。」「要是你能做完，我就跟人事说，继续聘用你，怎么样?」我伸手过去，啪啪作响地拍了拍陈炳的大肚腩。「我看该做俯卧撑的是你。」二位老板哈哈大笑。陈炳胖脸涨红，正欲发作。一辆劳斯莱斯疾驰过来，停在我们面前。车头升起小金人，车门打开，驾驶座坐着一个身穿白西装的帅哥。三年不见，这小子更帅了。Pocky 探出头，把墨镜往头顶一撩，殷勤地给我开后车门:「黎神，快请上车!」我抱着纸箱坐进去。Pockv估计他阴阳怪气地说「老板们继续工作吧。我们闲人已经到下班时间了!」他说完关门，劳斯莱斯扬长而去。</p><p>5</p><p>芮文是我的大学室友，一个眼光毒辣的富二代。他超爱同名饼干，在宿舍必叼着一根，被我们笑称「Pocky」。毕业之后，他继承家族企业，到处搞投资。该说他运气不错还是实力过硬呢，他一投一个准，竟把家里资产又翻了几番。从前年开始，他就不断劝我合伙开公司。我那时专心升级Ribo，一口回绝了他。我坐在劳斯莱斯舒适的座椅里，内心暗暗惆怅。车窗外，挂着彩虹商标的 Ribo 大厦渐行渐远。Pocky 从后视镜看我，通过我的纸箱和表情，他就懂了。「Ribo 高层猪油蒙心了吗，竟然把总工程师给裁了。」Pocky 开口说。我在后视镜中与他对视:「你怎么知道我是总工程师?」Ribo 开发涉及公司机密，我从不对外透露。外界只能通过陈炳在发布会上的陈词，得知 Ribo 的发展计划。Pocky乐了:「你忘了我们大学时参加的竞赛了?」「你说，你一直想给车窗装上虚拟交互软件，这样就不用分心看车载导航了。」「你以这个想法写出了 Ribo的雏形，我们获得了金奖。」「可惜当年没有配套的硬件系统，那个雏形只停留在概念阶段。」确实有这回事。我沉迷工作太久，大学时代就好像上辈子一样久远。Pocky 心潮澎湃地说:「当时我觉得你就是天神下凡!这个大腿我抱定了!」我勉强笑了笑。虚拟交互一直是我的梦想。现实中美好的事物太少了，我想让幻想进入现实，把彩虹握在手中。Rainbow,Ribo.Ribo 迅速崛起的三年，说不自豪是假的。可惜，我的彩虹终究是一场幻觉。</p><p>6</p><p>Pocky 问我:「你下一步有什么打算?」我: 「不知道。你最近在做什么项目?」Pocky: 「当然是 AI 啊，现在大家都拼命卷AI呢! 」我点点头，叹了一口气。Pocky 心中了然，安慰我说:「先别忙工作，你休假一段时间吧。」这么一说，我很久没休过长假了，确实该放松一下身心。我:「我想乘最近的航班去马尔代夫。」Pocky:「海钓是吧，我懂!不用乘航班，坐我的直升飞机去。」我: 「行。你把AI 相关的立项方案发给我，我在飞机上看。」Pocky: 「? 」Pocky:「你们 INTJ 都这么恐怖吗?」我简单收拾行李。等飞机时，我看到Pocky 在抛售股票。「怎么了，这么急着出手?」Pocky 目露精光，预言说:「我跟你打赌，Ribo 最近必出事。你也赶紧把 Ribo 的股票抛了吧，还不知道跌多少。」我不乐意了:「你就这么不信任我写的系统?」Pocky:「不是。你小子只会自己做事不教人，也不爱留文档记录。」「Ribo马上要发布新功能，会出大乱子的。」我回想起来，新架构升级后隐患很多，我准备写总结分享给同事看。那份总结现在还只写了一半。陈炳只看到升级后维护成本低，那是在正常运转的情况下。一旦出故障，除了我，没人能修。我料到会出事，但也没想到是那么惨重的事故。而且比我预想得还要快。</p><p>7</p><p>我当晚就入住了马尔代夫高档度假酒店。Pocky 是真心想拉拢我，酒店和交通都安排好了。套房面对大海，三面落地窗。我把衣服和日用品摆出来，整理好。刚收拾完，手机收到同事信息。不对，已经是前同事了。【黎哥，快看同事圈!]同事圈是某职场 APP 的认证领域。Ribo 的同事通过认证后都可以进入，通讯录经常会推荐一些熟人。公司的大部分八卦，都能在同事圈第一时间得知。我倒了一杯马提尼，在落地窗前打开同事圈。[黎姓员工巧立名目中饱私囊，被抓后不服管理碰瓷CEO!]匿名发帖人。配图是我在公司楼前拍陈炳肚腩，面露讥讽。我放大图片看，灾难级的表情管理。我平时的脸色都这么冷吗?难怪大家不敢跟我说话。发帖人痛斥我的「罪状」有三条:其一，推行毫无必要的技术创新，资金都进了自己口袋。其二，不按时签到，迟到早退、KPI 不达标。其三，不尊重公司领导，散播谣言。评论炸开了锅:【所以公司要裁员也是谣言，就只开了一粒老鼠屎?][支持!把占着茅坑不拉屎的都开掉，公司才能越来越好!][这人是技术部门负责人吗，看着眼熟。][总工程师是陈总啊，技术部哪有什么负责人?]我看了一圈，起哄的都是其他部门的人。前同事愤愤不平地发消息:[黎哥，你离职得太突然，我们都觉得对你不公平。)【你走后，人事把技术部的组长挨个叫去开会。]【谁敢在网上发言，就无赔偿解除劳动合同!]</p><p>8</p><p>我能理解他们的苦衷。现在经济形势不好，工资高不加班的公司越来越少了。像Ribo 一样飞速发展的更是凤毛麟角。老员工搭上青春和健康，好不容易换来高新高职位。一旦被开，经济压力大，在业内风评也不好。毕竟人脉圈子很小，一做背调，就什么都清楚了。给我发消息的前同事叫丽丽，技术部为数不多的女员工。丽丽狂暴输入中.....【什么叫毫无必要的技术创新!新架构节省了多少人力!]【以前做部署要一整天，现在一小时就搞定!]【他懂什么技术啊?凭什么这样说黎哥!]升级新系统确实烧了不少钱，但是条目透明，都是层层审批通过的。紧急用钱的时候还是我自己掏的腰包。至于后面两条，懂的都懂。我看丽丽情绪失控，回了一句安慰她:【别激动，跟我抱怨下就行了，在网上说话小心点，会被追踪到的。]丽丽对陈炳意见大是有原因的。当初她刚入职，同事们奔走相告:我们有女同事了!丽丽是校招来的，年轻好学，端庄得体，很有人缘。我让她先看看基建，学习标准流程。陈炳经常来技术部视察，见到她，兴致勃勃地叫她过去:「新人吗，来我考考你。」陈炳拿一个刚出炉的新需求考她。我觉得这完全超出对校招生的能力要求。丽丽回答得磕磕巴巴:「就，先，先找同类项目的文档，分析容量、问 PM 要实现的效果......」陈炳嗤笑一声，打断她:「不会就说不会，不要不懂装懂!」「女孩子嘛，本来就技术经验不足，多向同事请教，确定了再回答!」丽丽突然被训，不敢出声，眼中闪烁。我走过去。「新人回答得很好啊。」「有新需求，先回顾经验、确认需求、分析数据，条理清晰，非常可行!」我挠了挠头皮:「而且技术经验跟性别无关。男孩女孩都一样!」丽丽的表情由惊恐转为惊喜。陈炳一张肥脸耷拉下来，满眼嫌恶。我:「技术部正好也在为这个新需求发愁呢。正好陈总提到，我想请教一下现在有进展吗?」我当时真以为他有两把刷子。没想到他纯粹是想在女同事面前显摆。陈炳开始顾左右而言他。他一会儿说 PM 催得急，一会儿说经费不足，最后借口要开会逃走了。从那以后，丽丽就对陈炳的能力很鄙夷。</p><p>9</p><p>不过丽丽有一点说错了。陈炳很清楚升级新系统非常必要。他就算对我有再多不满，也忍到我完成升级后才赶我走。我翻阅这条「举报」帖子，评论越来越多。有挖苦的，有嘲笑的，有恶意揣测的。就是没有一个知道真相的。几分钟过去，「举报」帖热度上升到同事圈榜首。我的个人信息、缺勤记录、敷衍的 KPI报告都贴上去了。没落实到报告上的业绩被抹得干干净净。按理说，暴露私人信息的帖子会被管理员删除。但它光明正大地摆在那里，是谁授意的不需多言。丽丽在语音里急哭了。这个帖子只要还在，我就别想入职好公司。陈炳不想让我在Ribo 待着，更不想让我去别家待着。回想起来，陈炳曾多次暗示我夹起尾巴做人。「黎工，你没当过管理层不懂，这个工作不是普通员工能干的!」「我对外要公关，对内担风险，你根本想不到有多难!」可惜我没听懂他的「提点」:「但你的年新也不是普通员工能比的啊!」他的「工作」是有成果的:「总工程师」是他，「Ribo」是他一手搭建，管理层上上下下都跟他有交情。终于，他找准时机，把我像垃圾一样扫地出门。</p><p>10</p><p>【黎哥，那你要怎么办啊!]我能怎么办?我只能坐专机来海边度假、住高档酒店看日出、吃好喝好回家自己当老板咯!我从无到有拉起 Ribo用了三年。再用三年超越它便是。不过，知道还有人为我抱不平，在Ribo 的三年终归没有白费。这是今天唯一值得高兴的事情。</p><p>11</p><p>酒店有 VIP 健身房，我健完身，回房间洗澡。工作不忙之后，我又拾起健身的习惯，调整回健康作息。浴室的镜子水汽氤氲，我捋起湿发，看到自己的胸腹恢复了肌肉轮廓。工作虽说劳累，但充满价值感。我的头发依旧茂密，双目有神，身材也没走形。幸好应酬的活儿都被陈炳承包了。早上 6点，我神清气爽地起床，背着钓具出发。我们包了游艇去海钓。游艇马达声轰隆作响，我戴上墨镜，躺在甲板的躺椅上。碧海蓝天，温度宜人，清新的海风拂过，我好像刚刚从地狱来到人间。人生如逆旅，我亦是行人。咔嚓--咔嚓--我睁眼，Pocky 正用手机偷拍我。「我心想哪来的帅哥钓鱼佬，竟是我黎神!」「这照片留着当招聘宣传图，哪个小姑娘看了不迷糊?」我蹦起来抢他手机。「删了，马上!」Pocky 化身卖艺的吗喽，一溜烟跑到船尾。他对着手机啧啧称奇:「你放松下来明明很帅，平时的脸色就又冷又臭，难怪有人看不顺眼。」我想反驳，但想起「举报」帖上我的表情。我闭嘴了。</p><p>12</p><p>今天是 Ribo 新功能发布的日子。往常我都是紧张兮兮地守着发布会直播间。现在我和 Pocky 并排坐在甲板上，守着钓竿。「有了!有了!快收竿!」水下的力道巨大，我按捺住激动的心情，费了九牛二虎之力拉起钓竿。是条体长一米二的旗鱼!我和 Pocky 还有游艇船长，三个大男人吱哇乱叫。最后我抱着旗鱼，船长拿着米尺，Pocky为我拍下这张纪念照。照片中我昂首挺胸，五官打架。回去我少说能吹一年。这时，Pocky 手机响个不停。他接起来，听了几句，爆发出一声:「啊!」他火速冲到我面前:「快看头条新闻，快!」我看他的手机网页。网页被「Ribo 全线瘫痪，用户数据丢失」新闻刷屏。[Ribo 新功能发布异常，产品全线瘫痪.][CEO 匆忙结束发布会，回应正在抢修，修复时间未知。]【有用户反馈，偶尔登录Ribo 后发现自己账户一片空白。][Ribo产品已应用到实际生活的方方面面，日常使用需要高额的会员费、内购插件费。如果本次异常影响到用户数据，无疑会给Ribo 公司带来重创!]我知道事态严重，洗完手认真看。我看了发布会录像、用户社区大量的报障信息。结合升级过后留下的隐患，我倒推代码逻辑，大致明白了问题出在哪里。Pocky 提醒我看手机，我才发现自己的手机没电关机了。我给手机充上电，开机。未接来电爆发!无数的消息涌进来。我已经能想象出办公室里鬼哭狼嚎的场景了。我根本接不过来，干脆让它一直响。过了一会儿，终于消停了。我接起一个产品部打来的电话。我没耐心听官话，直接说:「我只跟 CEO 陈炳通话。」</p><p>13</p><p>我又拒接了几通电话。我看到来电是陈炳的号码，接起来。陈炳语速极快，急得像热锅上的蚂蚁。陈炳:「你知道了吧?」我: 「你也知道了?」陈炳:「什么我也知道，我早就知道了!」我吃惊:「你怎么知道我钓到旗鱼?」我直接把我抱着旗鱼的照片高清原图发过去。陈炳蒙了。陈炳:「不是，谁知道你钓到旗鱼啊!」</p><p>14</p><p>「那你现在知道我钓到旗鱼了!」电话那头，陈炳气急败坏。「黎泉，没人跟你开玩笑!」「你应该看到新闻了，Ribo 这三年都没出过这么大的故障!」「这可是你搞出来的系统，可用性太差了!」他吵得太大声，在游艇甲板上回荡。这兴师问罪的态度震撼到我。什么时候了，他的第一反应竟然是甩锅。我原本是想帮忙的，现在担忧的心情消失无踪。只剩下尊重祝福。我:「不关我的事，我只是一个拿工资不干活的闲人。毕竟那么多技术人员不裁，偏偏裁了我呢!」我挂了电话，冷笑一声，继续钓鱼。电话又响起来。我拿远一点，开免提。陈炳:「你身边有电脑吗，开个远程会议。」我:「帮我拿饵来，咱再钓一条大鱼!」陈炳提高声音:「喂? 喂? 听不到吗，快加入会议!」我:「船长，再往前开几海里吧。」马达声轰鸣，盖过了陈炳的叫声。</p><p>15</p><p>我们欢声笑语地钓了一会儿鱼。陈炳隔着电话应该也听出来我在度假。业务故障固然令人难过，别人在度假尤其使他揪心。不出十分钟，陈炳态度软化。陈炳: 「黎工啊，你也不想看 Ribo 垮掉吧，帮帮忙吧!」我是真不懂。领导当惯了，看谁都想指挥指挥?我提醒他:「陈总，我现在不拿Ribo 的工资，没必要给Ribo 干活，是不是?」陈炳果断回答:「我马上给你恢复原职。那个帖子我也删掉。」我:「哦…...原来那个帖子是你写的啊。」陈炳不作声。估计汗流浃背了。但他不愧在名利场里摸爬滚打许多年，懂得直击痛点。「黎工，你对我个人有意见，没关系，等业务恢复怎么清算都可以。」「但你想想技术部的同事，他们现在加班抢修，都要急疯了。业务不恢复，他们一刻也不能休息!」我沉默了。他是对的。Ribo 垮掉，对所有人都没好处。我叹了一口气。「陈总，说实话，这个故障我能修。」不等他兴奋，我补充:「但我现在在海上，信号很差，登录权限也没有。」陈炳: 「好说!你需要叫谁搭把手，要什么权限，我马上办!」</p><p>16</p><p>陈炳紧锣密鼓地帮我准备。我们的游艇也打道回府，在码头找了一家信号好的咖啡馆。先前我被除名，账号直接都删干净了。我需要开的权限太多，一时也开不全。我把几个资深组长拉进会议，统筹进度。陈炳旁听，一边不停地接电话汇报。此时天色渐暗，国内时间已经是晚上十点。故障发生五小时，仍未修复。嘶嘶!Pocky冲我使眼色，打开股市大盘给我看Ribo 的股价断崖式下跌，一点回暖的趋势都没有。「幸亏抛了，我至少省出一辆车来!」Pocky 得意地说。现在压力给到陈炳这边。陈炳长吁短叹，连连擦汗。「各位，麻烦快点，这个有预计修复时间吗?」我甩他一句:「你行你上!」陈炳不吱声了，安静如鸡。又过了一个小时，我们总算有了进展。但陈炳坐不住了:「现在要开董事会，一小时内能恢复业务吗?不然我不好汇报。」加班到深夜的同事们怨气冲天，没空理他。我直截了当:「没有!直接当着董事会的面修吧，省得跟他们汇报!」陈炳没有办法，挂着远程会议去开董事会。</p><p>17</p><p>董事会开口就质问陈炳，什么时候能恢复业务。陈炳这时突然展现出十二分自信，侃侃而谈，把耽误的时间都推到监控和运营部门身上。董事会听他说，不出二十分钟必恢复，都放下心，开始讨论危机公关方案。他们打算发公告说成人为误操作，推出几个替罪羊，然后补偿用户损失。这是最能维护公司形象的补救办法。我没想到，我们基层员工累死累活，养着这么一群搅屎棍。连开诚布公都做不到。幸好我溜了。终于，我们修好了系统，可以进入测试阶段。陈炳跳起来说修好了。其他董事纷纷赞叹陈炳办事效率高。陈炳恭维说是董事们指导有方，群策群力，践行公司核心价值观。我没有那么乐观。我知道用户数据丢失的问题还没解决。果然，一登录 Ribo，账户一片空白。陈炳开始慌了。董事会一片嘈杂。「都安静!」越乱越烦，我让陈炳开外放，怒喝一声，会场总算安静下来。我:「各位董事不用着急。数据库我们做了严格备份，只要回滚就好。」我:「我没有数据库权限，辛苦陈总操作一下。」陈炳手忙脚乱地打开电脑:「呃…….怎么操作?」我说出操作方法。陈炳做完回滚，声音发颤:「发布会之前的数据.……丢失索引了。」丢失索引，意味着原本分门别类的数据乱成一锅粥。我又大声叫「安静」。我:「小问题。我们还有异地备份，是独立服务器，不受主集群影响的。」我又告诉陈炳异地服务器的操作方法。陈炳却没有马上操作。他沉默了一会儿，轻声说:「异地服务器…...上个月为了节省成本，取消了。」会场鸦雀无声。我压抑住怒火:「取消了?怎么没人来问问我的意见!」</p><p>18</p><p>陈炳颓然坐在桌前。董事会奇怪地问陈炳，我是什么人，为什么总工程师要向我请教?我哼了一声:「除了真正的总工程师，他还能向谁请教!」陈炳没有反驳，默认了。一位董事问我:「这位..….同志怎么称呼?」我:「黎泉。」董事:「黎泉同志，你下一步准备怎么办，数据库多久能恢复?」我: 「我不知道。我在贵司任职的三年，从未出过事故。贵司这周一把我裁了，按理说，我不该过问贵司的事务，各自安好。我帮到这里已经牺牲了很多个人时间。就这样吧，晚安。」董事会听说我撂挑子了，齐声挽留。董事:「谁把黎泉同志裁了?我要起诉他，全额赔偿公司损失!」没有人承认。无奈之下，我只能说出一个不是办法的办法。现在没有数据备份，索引全丢，但万幸数据还在。只能用笨办法，手写筛选条件，人工捞出数据。这个工作量巨大而且枯燥。我交给同事之后，退出会议。</p><p>19</p><p>这次发布会事故，前前后后，用了12小时才修好。Ribo 蒙受巨大损失，口碑滑铁卢，千万市值一夜蒸发。而我的假期才过了一半。董事会多次要求我恢复原职，我都拒绝了。我已经对他们失望透顶。同样失望的还有我的前同事们。他们纷纷离职。失去劳动合同的制约，有人在网上爆出了这次事故的内幕。Pocky 转发给我一些大V的评论:[听说裁员裁到大动脉，这次才修了这么久?]【降本增笑了属于是。]【对 Ribo 祛魅了，新出的功能一个比一个恶心!]看到这些评论，我笑不出来。Ribo 的管理层垃圾，但Ribo本身就像是我亲手带大的孩子。做父母的，见不得别人说自家孩子不好。我只能眼不见为净，全心投入与Pocky 合作的 AI项目中。</p><p>20</p><p>Pocky 投资新项目的眼光确实毒辣。短短一年，我们用独特的训练方法，训练出一个电竞主播AI。它讲话幽默，操作犀利，在年轻人中很有人气。年末有一个举世瞩目的电竞节，AI 加入了中国参赛队伍，勇夺冠军。这个成绩吸引了一大波投资。我抓住机会，训练出更多领域的主播AI。主播 AI 出圈成功，成为大众知名的KOL，给公司创造巨额财富。AI本身的管理也非常简单，它们不耍大牌、不需要休息，也永远不会塌房。年底财报出来，Pocky 激动万分:「黎神!我们公司年度净利润翻了三十倍!」「还被评为年度新星!调查显示，10-25岁的人群，每5人就有1人知道我们!」我和 Pocky，还有董事会的各位分享了这一喜悦。是的，有了 Ribo 的前车之鉴，我加入公司管理层，参与公司决策。Pocky 努力纠正我不爱教人的坏习惯，让我把工作分配给业务部门，我自己重新学习经营管理。我持有公司股份。财报一出，不仅Pocky 是富二代，我也成了富一代。不过我欲求比较低，财富自由了，我也没什么实感。「我们公司现在的市值，相当于几个Ribo?」我问 Pocky。「二十个吧。」Pocky 突然想起了什么:「说到 Ribo 啊，他们已经连续低迷一年了。」「他们最近在到处拉合作。我明天下午跟 Ribo 那边有洽谈会，你要来吗?」21洽谈会当天，我们提前来到夏利五星级酒店。我嫌贵宾包厢闷，自己带着电脑坐到楼下大厅。等得无聊，我打开电脑，写新功能的脚本。一行人进入酒店大门。我觉得中间一人有些眼熟，但没有在意。还是他先认出了我:「这不是黎泉吗!别来无恙?」我抬起头，见到一张满脸堆笑的胖脸。我也笑了:「陈总，别来无恙啊!」来人正是陈炳。上次事故后，我拉黑了他所有的联系方式，从此再无联络。他发际线后退，脸冒油光，长相越发着急。我看他走在队伍中间，派头不复从前，也许是被降职了吧。陈炳看到我在敲代码。他流露出可惜的表情:「黎工入职新公司以后这么忙啊。」「其实以黎工的能力，做到管理层完全不是难事。」他递出名片，硬塞到我手里。「黎工要是累了，随时可以回Ribo。直接提我名字就行了。」我拿着名片哭笑不得。等到他们上楼谈了一会儿，我也写完收工，贵宾包厢有一面玻璃墙正对楼梯，我远远看到，Ribo高层言辞激烈地给Pocky 介绍什么。Pocky 不知是没兴趣，还是真饿了，弱小无助但能吃。</p><p>22</p><p>「我们的新产品订购率创历史新高!」「如果有贵司授权，加入AI主播互动，绝对是双赢!」我推门而入，径直坐到Pocky右手边。Ribo 高层止住话头。Pocky 精神一振，介绍我:「刘总，陈总，这位是我们公司首席执行CEO，黎总。」刘总是生面孔，赶紧起立跟我握手。陈炳筷子没拿稳，掉到地上发出清脆的一声响。我还是不喜欢社交，但场面话还是要说的。「两位客气了。其实我曾经就职Ribo，对贵司的印象很深。」刘总: 「就职 Ribo? 哈哈，世界真小。请问黎总以前就职什么岗位啊?」我笑着说:「基层员工。」陈炳清了清喉咙，试图转移话题。Pocky 看热闹不嫌事儿大，积极拱火:「哎呀，要不怎么说贵司人才济济呢!我从贵司挖走一个基层员工来做CEO，草台班子唱戏，现在也混得风生水起!」刘总一下子没接住话茬，满脸尴尬。承认吧，说明自己这边识人不清，不重用人才。不承认吧，是看不起对方水平，不给对方面子。该说富二代从不为生活所迫，话中带刺，笑里藏刀，让人防不胜防。我摆摆手，问他们刚才谈了什么。陈炳硬着头皮把给Pocky 讲过的又给我讲了一遍。谈完后，Ribo 高层希望我们表态:「请问二位，有什么考虑吗?」我用指节敲桌子，默默思考。Ribo 的用户存量渐渐流失，只能通过不断拉联名合作，靠用户增量来维持。这个合作对我们没有帮助。Pocky 也示意我:算了。可能不久的将来，Ribo 就会退出历史舞台了吧。刘总和陈炳焦急地等待结果。</p><p>23</p><p>我:「我们可以合作，但有一个条件。」刘总:「什么条件?」我决定把决定权交给陈炳。我走到他身边，拍了拍他的肚腩。「我跟陈总私交很深，我总是劝他锻炼身体。不然年纪上来，脂肪肝、三高都来了。」「我是个念旧情的人。这样吧，陈总原地做五百个俯卧撑，我们就同意合作。」说完，我到饭桌前的空地蹲下来，等着给陈炳计数。要是有点底气的合作方这就会被气走了。可惜 Ribo 已经岌岌可危了。陈炳一向圆滑，不肯错失这个机会，又不想让自己太难堪。他热情洋溢地站起来。「没错，没错!黎总以前天天叫我一起健身。黎总离职后，我也没闲着，正好让黎总看看我的锻炼成果!」他撸起袖子，趴下，小心地不弄皱高档西装裤。「陈总准备好了吗?开始!」「一! 二! 三! 四! 」我认真给陈炳计数。他每次都是肚子先着地。陈炳真的很想争取这次合作。他双臂发抖，满头大汗，还是憋着一口气做俯卧撑。「二十!加油，很接近了!」陈炳很久没有过这么大运动量。他咬牙坚持到三十个，体力不支倒在地上。汗湿的白衬衫粘在他胸前。陈炳顾不上维持体面，坐在地板上喘着粗气擦汗。Pocky 和刘总也站起来，开着玩笑:「哈哈哈，陈总要加强锻炼了!」离开时，谁都没有再提合作的事。</p><p>24</p><p>「跟 Ribo 的合作，你怎么看?」回去的路上，我问Pocky.Pocky 边开车边说:「拒绝了吧，没什么价值，耽误时间。」我没搭腔，看向窗外。光怪陆离的公司大楼匆匆掠过。Ribo 初创时只有一间办公室，为了节省物业水电费，大家都是把工作带回家加班。Ribo 终于成为这霓虹森林中的一员，随即又将泯然众人。飞速前进的时代中，有谁会记得它呢。「你还放不下啊。」我从后视镜与 Pocky 目光交会:「放不下什么?」Pocky 爽朗一笑:「你说自己念旧情，还真是没说错。」我沉思片刻，开口说:「我想收购Ribo。现在为了生存，Ribo加了太多冗余功能。只要资金到位，我可以救活它。」「好。」Pocky 同意得很干脆。我: 「你不怕烧钱?」Pocky:「哪个大公司没有几个烧钱部门呢?而且创始人发话，我根本没在怕的。」第二天，我和公司高层拜访了Ribo，商量收购事宜。</p><p>25</p><p>我们最终以超过市值30%的价格收购了Ribo。我公司的董事会都不看好这次收购。对于 Ribo 的员工来说倒是一件好事，所有人保留原职，待遇从优。我浑身干劲，采集用户需求重新设计Ribo.Ribo 易主在市场上引起不小的震动。经济博主分析本次收购的意图，结合之前发布会事故的爆料，有人猜测，这是Ribo前总工程师的情怀向收购。外面的猜测众说纷纭。我两耳不闻窗外事，很快通过了第一个方案。收购后第一次发布会直播定在下个月。董事会一致决定让我上直播。「放心，稿子我会找人写好，你照着念就行了。」Pocky 安慰我。我担心自己面瘫脸没有观众缘，推脱找个活跃的人去。「没有人比你更合适。你也不想重蹈陈炳的覆辙吧!」没办法，直到发布会当天，我还在紧张地练稿子。</p><p>26</p><p>今天就是发布会，我穿上一套定制西服，整理发型。Pocky 在后台见到我，赞叹说:「果然是人靠衣装，你小子平时邋里邋遢，打扮起来也人模狗样的!」谁平时邋里邋遢了!但是有他这句话，我自信了不少，脚下生风地出门。「哎，黎总小心!」啪，滚烫的液体洒下来，我反射性地后撤。面前，陈炳诚惶诚恐地端着咖啡:「我，我想给黎总送杯咖啡提提神，真对不起!」他端着的咖啡洒了，演讲稿湿透看不清了。我的眼神要喷出火来。一杯美式咖啡洒了，两个人的衣服都没弄脏，都洒在演讲稿上。简直蠢到我都不知道他是不是故意的。此时距离发布会开始只有十分钟了。我赶紧给 Pocky 发消息，让他把电子版传给我。消息已送达，未读。我给他打电话，他好像又静音随缘了。也怪我疏忽。一份纸质演讲稿快翻烂了，唯独忘了要电子版。时间到了。助理喊我上台。我定了定神，稿子可以没有，但绝对不能迟到。我练了这么久，已经形成肌肉记忆了，问题不大。</p><p>27</p><p>上台后，台下黑压压的一片。灯光打在我脸上，晃得我阵阵发晕。我看向二楼 VIP 席位。Pocky开了一杯香槟，向我招手。不要提前开香槟啊，没看到我稿子都没了吗!直播间鸦雀无声，所有人都等着我开口。稿子上第一句话是什么?「尊敬的各位领导」，还是「尊敬的各位观众」?我想融化在台上，然后分批流淌出会场。但是箭在弦上，不能不发。我凑近麦克风:「咳咳，喂，喂?能听清吗?」「最近，有传言说，我才是Ribo 的总工程师。对此，我想澄清一下。」「传言是对的!」台下一片哗然。我继续重拳出击:「好，好的。既然知道我是谁了，那就废话少说，直接看新功能!」[......这是旧版，完全是一坨屎,所以全撤了!」「......这是新增的,特别特别好,你们看这......」「......天呐，不会真有人不爱这功能吧,我反正爱惨了!」讲到兴奋处，我左脚绊右脚,在台上摔了个底朝天!台下哄笑。我不管他们,爬起来拍了拍屁股，继续讲。Pocky 的香槟杯子掉地上碎了，助理面无血色。但我完全沉浸在自己的世界里，越说越起劲。我不知道的是，从我开始放飞后，直播间人数爆炸式上涨。[精英人士都是这么接地气的吗，爱了爱了~1【但是他提到Ribo的时候,眼睛在发光耶!][哈哈哈，不讲话是男神,讲话是男神经。]发布会时间结束，我还坐在台阶上，给前排观众讲辛酸的 Ribo 发家史。助理叫了好几个壮汉才把我拖走。</p><p>28</p><p>我劳累过度，美美睡到第二天，一进公司，我看到Pocky对着笔记本电脑咯咯笑。电脑正在播放我的发布会鬼畜视频。我怒从心头起:「谁发的,是不是陈炳!」我就要出门找他算账。「不是他，你想多了。」Pocky拉住我，「是我发的。」我:「?」Pocky:「抱歉,没问过你的意见,但是……实在太魔性了，哈哈哈!」Pocky 说着抱歉，实际眼泪都笑出来了。「时代变了，大家都喜欢看乐子。我昨晚发的,今天已经到首页推荐了。」我还是很生气，怨毒地盯着他不说话。鬼畜视频在首页推荐榜上嘎嘎乱杀。不多时，评论区出现我的全套表情包。Pocky 摩拳擦掌:「想不到黎神这么有喜剧天赋,闷在公司当管理真是屈才了!」他不放过任何一个出圈机会，立刻拿出一个立项:「投放一个 Ribo 独占版黎总AI! 」「外形、声音、语料库完美复刻黎总本人。黎神，辛苦你去做一下动捕。」Pocky 用他的个人账号发布了这一创意,被疯狂转发。下午我就被助理团抓走,包装成AI。</p><p>29</p><p>我忙得脚不沾地。做完这个旗鱼特别版造型,还有一个发布会周年庆皮肤。我的粉丝都劝我:不想当 KOL 的架构师不是好 CEO!对，我还有粉丝团。这是我成为Ribo 独占版 AI 原型后才知道的。粉丝团的管理也是公司运营的一部分,避免出现不良引导,扰乱舆论秩序。其中战斗力最强的是「黎泉女友粉」的组织。没想到，我连女友都没有，已经有女友粉了。「黎泉女友粉」的粉头是 ID 为「沪圈你丽姐」的大V，也是现任的运营部门员工。刚入职时唯唯诺诺的小姑娘,现在雷厉风行。至于陈炳，他现在被降职成基层员工了。他拿以前一半的工资，干两倍的活儿。希望他现在能体会到普通员工的工作也不容易。Pocky 还是到处招商投资。对于他来说，挣钱不是目的，做伯乐才是最大的乐趣。Ribo 用了两年,终于不是公司里赔钱的部门了。每年的发布会我都会上台。鬼畜视频常看常新。Pocky 开会归来，双眼放光:「韩方邀请我们的女团AI 去演出!趁此机会，做一个黎总女团限定版皮肤宣传吧!」我做出步惊云惊恐状:「你不要过来啊!」</p><p>(已完结)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我被公司裁了。
我一手搭建起核心项目的底层框架，总算熬出头时，公司把我裁了。
CEO 当着全公司的面落井下石，羞辱我是滥竽充数。
他不知道，核心代码的故障只有我能修。
公司求我的日子比想象中来得更快。&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="故事" scheme="https://talengu.github.io/public/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>「2023年度汇报」ttrss</title>
    <link href="https://talengu.github.io/public/2023/12/31/test/2023/"/>
    <id>https://talengu.github.io/public/2023/12/31/test/2023/</id>
    <published>2023-12-31T16:00:04.000Z</published>
    <updated>2023-12-31T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>年度汇报，记录一下过去一年的工作和生活。</p><a id="more"></a><h2 id="🔖跳进框框，你的-Markdown-链接可以更整洁"><a class="header-anchor" href="#🔖跳进框框，你的-Markdown-链接可以更整洁">¶</a>🔖<a href="https://sspai.com/post/77513" target="_blank" rel="noopener">跳进框框，你的 Markdown 链接可以更整洁</a></h2><p>pubdata:2022-12-29 03:30:14markdate:2023-01-03 01:17:10.436779</p><h2 id="🔖关于流感和疫苗，你需要知道哪些信息？"><a class="header-anchor" href="#🔖关于流感和疫苗，你需要知道哪些信息？">¶</a>🔖<a href="https://sspai.com/post/76945" target="_blank" rel="noopener">关于流感和疫苗，你需要知道哪些信息？</a></h2><p>pubdata:2022-11-23 06:38:28markdate:2023-01-03 13:52:56.586627</p><h2 id="🔖一日一技-两种方法让-Windows-10-也能运行-Android-应用"><a class="header-anchor" href="#🔖一日一技-两种方法让-Windows-10-也能运行-Android-应用">¶</a>🔖<a href="https://sspai.com/post/77582" target="_blank" rel="noopener">一日一技 | 两种方法让 Windows 10 也能运行 Android 应用</a></h2><p>pubdata:2023-01-03 06:30:00markdate:2023-01-04 10:20:53.166720</p><h2 id="🔖沉浸式翻译-–-支持-PDF、EPUB、网页，可同时显示原文与译文的双语翻译工具-Chrome-Firefox-油猴脚本"><a class="header-anchor" href="#🔖沉浸式翻译-–-支持-PDF、EPUB、网页，可同时显示原文与译文的双语翻译工具-Chrome-Firefox-油猴脚本">¶</a>🔖<a href="https://www.appinn.com/immersive-translate/" target="_blank" rel="noopener">沉浸式翻译 – 支持 PDF、EPUB、网页，可同时显示原文与译文的双语翻译工具[Chrome/Firefox/油猴脚本]</a></h2><p>pubdata:2023-02-06 09:28:53markdate:2023-02-08 04:38:07.828863</p><h2 id="🔖-25"><a class="header-anchor" href="#🔖-25">¶</a>🔖 : 25</h2><p>🔖latex 工具-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖 tcp-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖 操作系统-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖 python 通道符支持-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖 互联网行业知识地图-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖 <a href="https://zhuanlan.zhihu.com/p/607142856?utm_id=0" target="_blank" rel="noopener">万字讲解你写的代码是如何跑起来的？</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖 linux内核-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖web 历史工具-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖windows git 大小写-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖 <a href="https://sspai.com/post/77513" target="_blank" rel="noopener">在 Markdown 中使用引用式链接和脚注 - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖 <a href="https://view.inews.qq.com/k/20211230A04GGY00?web_channel=wap&amp;openApp=false&amp;f=newdc" target="_blank" rel="noopener">不写一行代码，轻松将米家智能家居接入 Apple HomeKit</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖 <a href="https://post.m.smzdm.com/p/amm5dn84/" target="_blank" rel="noopener">小白从零开始：一台安卓手机安装homeassistant将米家设备接入苹果homekit_软件应用_什么值得买</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖 <a href="https://zhuanlan.zhihu.com/p/596895232" target="_blank" rel="noopener">build a simple dateset</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-02.md">C日常/2023-02.md</a><br>🔖冰雪暴-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W43.md">C日常/2022-W43.md</a><br>🔖 <a href="https://sspai.com/post/77513" target="_blank" rel="noopener">在 Markdown 中使用引用式链接和脚注 - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-01.md">C日常/2023-01.md</a><br>🔖 <a href="https://view.inews.qq.com/k/20211230A04GGY00?web_channel=wap&amp;openApp=false&amp;f=newdc" target="_blank" rel="noopener">不写一行代码，轻松将米家智能家居接入 Apple HomeKit</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-01.md">C日常/2023-01.md</a><br>🔖 <a href="https://post.m.smzdm.com/p/amm5dn84/" target="_blank" rel="noopener">小白从零开始：一台安卓手机安装homeassistant将米家设备接入苹果homekit_软件应用_什么值得买</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-01.md">C日常/2023-01.md</a><br>🔖 <a href="https://zhuanlan.zhihu.com/p/596895232" target="_blank" rel="noopener">build a simple dateset</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-01.md">C日常/2023-01.md</a><br>🔖 http与https的区别-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-01.md">C日常/2023-01.md</a><br>🔖 http 3-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-01.md">C日常/2023-01.md</a><br>🔖 <a href="https://ffmpeg.guide/" target="_blank" rel="noopener">FFmpeg.guide</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-01.md">C日常/2023-01.md</a><br>🔖<a href="https://mlu-explain.github.io/" target="_blank" rel="noopener">机器学习概念的可视化解释</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-01.md">C日常/2023-01.md</a><br>🔖 <a href="https://ppwwyyxx.com/blog/2023/Terminal-Escape-Sequences/" target="_blank" rel="noopener">Some Useful Terminal Escape Sequences</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-01.md">C日常/2023-01.md</a><br>🔖 <a href="https://sspai.com/post/77815" target="_blank" rel="noopener">换种方式刷朋友圈——微信朋友圈数据分析 - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-01.md">C日常/2023-01.md</a><br>🔖操作系统学习-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-01.md">C日常/2023-01.md</a></p><h2 id="🔖Homebrew-升级-4-0-0，麦金塔上的啤酒会更香吗？"><a class="header-anchor" href="#🔖Homebrew-升级-4-0-0，麦金塔上的啤酒会更香吗？">¶</a>🔖<a href="https://sspai.com/post/78587" target="_blank" rel="noopener">Homebrew 升级 4.0.0，麦金塔上的啤酒会更香吗？</a></h2><p>pubdata:2023-03-01 08:41:08markdate:2023-03-02 14:33:02.461156</p><h2 id="🔖从推送、书影音到笔记、自动化：让这些自部署服务，给你应有的数据掌控权"><a class="header-anchor" href="#🔖从推送、书影音到笔记、自动化：让这些自部署服务，给你应有的数据掌控权">¶</a>🔖<a href="https://sspai.com/post/78424" target="_blank" rel="noopener">从推送、书影音到笔记、自动化：让这些自部署服务，给你应有的数据掌控权</a></h2><p>pubdata:2023-02-24 03:03:58markdate:2023-03-03 01:16:23.043436</p><h2 id="🔖iPadOS-指针交互深度解析"><a class="header-anchor" href="#🔖iPadOS-指针交互深度解析">¶</a>🔖<a href="https://sspai.com/post/78446" target="_blank" rel="noopener">iPadOS 指针交互深度解析</a></h2><p>pubdata:2023-02-22 06:21:07markdate:2023-03-03 01:41:54.266322</p><h2 id="🔖用-GPT-3-5-翻译整本英文书，输出中英双语电子书"><a class="header-anchor" href="#🔖用-GPT-3-5-翻译整本英文书，输出中英双语电子书">¶</a>🔖<a href="https://www.appinn.com/bilingual-book-maker/" target="_blank" rel="noopener">用 GPT-3.5 翻译整本英文书，输出中英双语电子书</a></h2><p>pubdata:2023-03-03 09:06:02markdate:2023-03-04 03:00:56.000323</p><h2 id="🔖BiliGPT-–-用-GPT-3-5-把-3-分钟视频缩减到-100-个文字，10-秒看完｜一键总结视频内容"><a class="header-anchor" href="#🔖BiliGPT-–-用-GPT-3-5-把-3-分钟视频缩减到-100-个文字，10-秒看完｜一键总结视频内容">¶</a>🔖<a href="https://www.appinn.com/biligpt/" target="_blank" rel="noopener">BiliGPT – 用 GPT-3.5 把 3 分钟视频缩减到 100 个文字，10 秒看完｜一键总结视频内容</a></h2><p>pubdata:2023-03-03 04:31:09markdate:2023-03-04 03:36:01.350199</p><h2 id="🔖想要高效获取信息？这是我用的工具与方法"><a class="header-anchor" href="#🔖想要高效获取信息？这是我用的工具与方法">¶</a>🔖<a href="https://sspai.com/post/77731" target="_blank" rel="noopener">想要高效获取信息？这是我用的工具与方法</a></h2><p>pubdata:2023-03-06 06:38:29markdate:2023-03-20 00:53:17.612194</p><h2 id="🔖Ebook-Translator-–-用-Google、ChatGPT-和-DeepL-翻译整本电子书-Calibre-插件"><a class="header-anchor" href="#🔖Ebook-Translator-–-用-Google、ChatGPT-和-DeepL-翻译整本电子书-Calibre-插件">¶</a>🔖<a href="https://www.appinn.com/ebook-translator/" target="_blank" rel="noopener">Ebook Translator – 用 Google、ChatGPT 和 DeepL 翻译整本电子书[Calibre 插件]</a></h2><p>pubdata:2023-05-01 13:08:41markdate:2023-05-05 09:35:30.733521</p><h2 id="🔖Alist-Helper-–-图形界面的-Alist：聚合加载-115-阿里云盘-百度网盘-OneDrive-迅雷-夸克-等-20-网盘文件，支持播放视频-Windows"><a class="header-anchor" href="#🔖Alist-Helper-–-图形界面的-Alist：聚合加载-115-阿里云盘-百度网盘-OneDrive-迅雷-夸克-等-20-网盘文件，支持播放视频-Windows">¶</a>🔖<a href="https://www.appinn.com/alist-helper/" target="_blank" rel="noopener">Alist Helper – 图形界面的 Alist：聚合加载 115/阿里云盘/百度网盘/OneDrive/迅雷/夸克/等 20+ 网盘文件，支持播放视频[Windows]</a></h2><p>pubdata:2023-05-14 06:12:50markdate:2023-05-15 01:02:12.031514</p><h2 id="🔖Pot-–-开源免费的跨平台划词翻译软件，拥有-DeepL、彩云小译、OpenAI-等-7-家翻译引擎，整合-Anki、欧路词典生词本"><a class="header-anchor" href="#🔖Pot-–-开源免费的跨平台划词翻译软件，拥有-DeepL、彩云小译、OpenAI-等-7-家翻译引擎，整合-Anki、欧路词典生词本">¶</a>🔖<a href="https://www.appinn.com/pot-translation/" target="_blank" rel="noopener">Pot – 开源免费的跨平台划词翻译软件，拥有 DeepL、彩云小译、OpenAI 等 7 家翻译引擎，整合 Anki、欧路词典生词本</a></h2><p>pubdata:2023-05-16 07:26:43markdate:2023-05-17 06:39:13.020731</p><h2 id="🔖RSS-Translate-–-自动翻译外语-RSS-至中文"><a class="header-anchor" href="#🔖RSS-Translate-–-自动翻译外语-RSS-至中文">¶</a>🔖<a href="https://www.appinn.com/rss-translate/" target="_blank" rel="noopener">RSS-Translate – 自动翻译外语 RSS 至中文</a></h2><p>pubdata:2023-05-23 08:52:56markdate:2023-05-23 17:44:30.584987</p><p>🔖 <a href="https://cangsdarm.github.io/illustrate/quic" target="_blank" rel="noopener">图解 QUIC</a></p><h2 id="🔖无需客户端本地管理网盘，你有这些方案可以选择"><a class="header-anchor" href="#🔖无需客户端本地管理网盘，你有这些方案可以选择">¶</a>🔖<a href="https://sspai.com/post/79131" target="_blank" rel="noopener">无需客户端本地管理网盘，你有这些方案可以选择</a></h2><p>pubdata:2023-04-07 06:30:21markdate:2023-06-01 14:04:09.446861</p><h2 id="🔖从输入到输出：我如何处理每天接收的信息"><a class="header-anchor" href="#🔖从输入到输出：我如何处理每天接收的信息">¶</a>🔖<a href="https://sspai.com/post/79792" target="_blank" rel="noopener">从输入到输出：我如何处理每天接收的信息</a></h2><p>pubdata:2023-05-18 07:11:58markdate:2023-06-01 14:19:35.772957</p><h2 id="🔖Xlist-–-AList-手机客户端，网盘文件聚合，支持在线视频播放和文档预览-iPhone"><a class="header-anchor" href="#🔖Xlist-–-AList-手机客户端，网盘文件聚合，支持在线视频播放和文档预览-iPhone">¶</a>🔖<a href="https://www.appinn.com/xlist-for-alist/" target="_blank" rel="noopener">Xlist – AList 手机客户端，网盘文件聚合，支持在线视频播放和文档预览[iPhone]</a></h2><p>pubdata:2023-05-30 04:21:36markdate:2023-06-02 04:53:32.634863</p><h2 id="🔖Awfice-–-每款不到-1KB，世界上最小办公套件：文本编辑、表格、绘图、幻灯片、代码编辑器、计算器"><a class="header-anchor" href="#🔖Awfice-–-每款不到-1KB，世界上最小办公套件：文本编辑、表格、绘图、幻灯片、代码编辑器、计算器">¶</a>🔖<a href="https://www.appinn.com/awfice/" target="_blank" rel="noopener">Awfice – 每款不到 1KB，世界上最小办公套件：文本编辑、表格、绘图、幻灯片、代码编辑器、计算器</a></h2><p>pubdata:2023-06-02 08:40:00markdate:2023-06-04 16:21:24.260578</p><h2 id="🔖2023年机械键盘选购指南，618-有哪些值得入手的机械键盘推荐？Tank实测上百把机械键盘帮你-618-挑选适合你的机械键盘。"><a class="header-anchor" href="#🔖2023年机械键盘选购指南，618-有哪些值得入手的机械键盘推荐？Tank实测上百把机械键盘帮你-618-挑选适合你的机械键盘。">¶</a>🔖<a href="http://zhuanlan.zhihu.com/p/633381753?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title" target="_blank" rel="noopener">2023年机械键盘选购指南，618 有哪些值得入手的机械键盘推荐？Tank实测上百把机械键盘帮你 618 挑选适合你的机械键盘。</a></h2><p>pubdata:2023-05-31 16:14:41markdate:2023-06-04 16:34:10.594767</p><h2 id="🔖想让大模型称心如意，提示语应该怎么写？"><a class="header-anchor" href="#🔖想让大模型称心如意，提示语应该怎么写？">¶</a>🔖<a href="https://sspai.com/post/79923" target="_blank" rel="noopener">想让大模型称心如意，提示语应该怎么写？</a></h2><p>pubdata:2023-05-24 03:25:42markdate:2023-06-04 22:56:48.270279</p><h2 id="🔖当你想来一把数独"><a class="header-anchor" href="#🔖当你想来一把数独">¶</a>🔖<a href="https://me.guanghechen.com/post/game/sudoku" target="_blank" rel="noopener">当你想来一把数独</a></h2><p>pubdata:2021-08-01 00:00:00markdate:2023-06-05 06:06:40.662519</p><h2 id="🔖HTML-Preview-–-一个适用于-GitHub-BitBucket-的-HTML-预览工具"><a class="header-anchor" href="#🔖HTML-Preview-–-一个适用于-GitHub-BitBucket-的-HTML-预览工具">¶</a>🔖<a href="https://www.appinn.com/github-bitbucket-html-preview/" target="_blank" rel="noopener">HTML Preview – 一个适用于 GitHub &amp; BitBucket 的 .HTML 预览工具</a></h2><p>pubdata:2023-06-04 04:54:15markdate:2023-06-06 06:40:08.622840</p><h2 id="🔖从一根笔到一个箭头"><a class="header-anchor" href="#🔖从一根笔到一个箭头">¶</a>🔖<a href="https://sspai.com/prime/story/from-a-pen-to-a-cursor" target="_blank" rel="noopener">从一根笔到一个箭头</a></h2><p>pubdata:2023-06-05 12:18:50markdate:2023-06-06 07:17:01.576474</p><h2 id="🔖世界十大经典情欲影片"><a class="header-anchor" href="#🔖世界十大经典情欲影片">¶</a>🔖<a href="https://www.williamlong.info/archives/7189.html" target="_blank" rel="noopener">世界十大经典情欲影片</a></h2><p>pubdata:2023-06-07 07:20:14markdate:2023-06-10 16:43:17.951778</p><h2 id="🔖大手笔！微软一口气在-GitHub-开源了-5-个技术教程。。"><a class="header-anchor" href="#🔖大手笔！微软一口气在-GitHub-开源了-5-个技术教程。。">¶</a>🔖<a href="https://zhuanlan.zhihu.com/p/635293937" target="_blank" rel="noopener">大手笔！微软一口气在 GitHub 开源了 5 个技术教程。。</a></h2><p>pubdata:2023-06-07 03:55:13markdate:2023-06-11 07:18:53.079351</p><h2 id="🔖yt-dlp-实用小技巧：使用-cookies-from-browser-参数下载需要登录才能观看的视频"><a class="header-anchor" href="#🔖yt-dlp-实用小技巧：使用-cookies-from-browser-参数下载需要登录才能观看的视频">¶</a>🔖<a href="https://www.appinn.com/yt-dlp-cookies-from-browser/" target="_blank" rel="noopener">yt-dlp 实用小技巧：使用 cookies-from-browser 参数下载需要登录才能观看的视频</a></h2><p>pubdata:2023-06-10 06:43:12markdate:2023-06-12 01:11:06.597230</p><h2 id="🔖入围第-34-届金曲奖的作品中，我最推荐的有这些"><a class="header-anchor" href="#🔖入围第-34-届金曲奖的作品中，我最推荐的有这些">¶</a>🔖<a href="https://sspai.com/post/80138" target="_blank" rel="noopener">入围第 34 届金曲奖的作品中，我最推荐的有这些</a></h2><p>pubdata:2023-06-03 03:00:00markdate:2023-06-13 01:40:34.128624</p><h2 id="🔖OLOCR-–-一个简单易用的在线-OCR-文字识别工具，支持图片、PDF"><a class="header-anchor" href="#🔖OLOCR-–-一个简单易用的在线-OCR-文字识别工具，支持图片、PDF">¶</a>🔖<a href="https://www.appinn.com/olocr/" target="_blank" rel="noopener">OLOCR – 一个简单易用的在线 OCR 文字识别工具，支持图片、PDF</a></h2><p>pubdata:2023-06-14 07:48:46markdate:2023-06-17 00:39:56.635740</p><h2 id="🔖一个悄然崛起的国产开源项目"><a class="header-anchor" href="#🔖一个悄然崛起的国产开源项目">¶</a>🔖<a href="https://zhuanlan.zhihu.com/p/637046713" target="_blank" rel="noopener">一个悄然崛起的国产开源项目</a></h2><p>pubdata:2023-06-15 07:07:40markdate:2023-06-17 00:44:35.019348</p><h2 id="🔖万字解析｜从灵感到产品，iOS-应用开发完整流程解析（2023版）"><a class="header-anchor" href="#🔖万字解析｜从灵感到产品，iOS-应用开发完整流程解析（2023版）">¶</a>🔖<a href="https://sspai.com/post/76333" target="_blank" rel="noopener">万字解析｜从灵感到产品，iOS 应用开发完整流程解析（2023版）</a></h2><p>pubdata:2023-06-13 09:57:34markdate:2023-06-20 06:51:21.834409</p><h2 id="🔖Gopeed-–-一款支持全平台的开源、轻量、原生下载器"><a class="header-anchor" href="#🔖Gopeed-–-一款支持全平台的开源、轻量、原生下载器">¶</a>🔖<a href="https://www.appinn.com/gopeed/" target="_blank" rel="noopener">Gopeed – 一款支持全平台的开源、轻量、原生下载器 </a></h2><p>pubdata:2023-06-29 07:46:51markdate:2023-07-02 02:35:27.835475</p><h2 id="🔖3D绳结-Knots-3D-限免，360-度动画演示-177-种绳结打法｜一根绳子，玩得开心"><a class="header-anchor" href="#🔖3D绳结-Knots-3D-限免，360-度动画演示-177-种绳结打法｜一根绳子，玩得开心">¶</a>🔖<a href="https://www.appinn.com/knots-3d-2023/" target="_blank" rel="noopener">3D绳结 (Knots 3D) 限免，360 度动画演示 177 种绳结打法｜一根绳子，玩得开心</a></h2><p>pubdata:2023-06-29 12:30:07markdate:2023-07-02 02:35:51.674684</p><h2 id="🔖Image-Manga-Translator-–-图片翻译器、漫画翻译器-自托管"><a class="header-anchor" href="#🔖Image-Manga-Translator-–-图片翻译器、漫画翻译器-自托管">¶</a>🔖<a href="https://www.appinn.com/manga-image-translator/" target="_blank" rel="noopener">Image/Manga Translator – 图片翻译器、漫画翻译器[自托管]</a></h2><p>pubdata:2023-07-04 09:18:19markdate:2023-07-10 01:57:26.753606</p><h2 id="🔖3-个独特的简历生成器，在-GitHub-开源了！"><a class="header-anchor" href="#🔖3-个独特的简历生成器，在-GitHub-开源了！">¶</a>🔖<a href="https://zhuanlan.zhihu.com/p/640856810" target="_blank" rel="noopener">3 个独特的简历生成器，在 GitHub 开源了！</a></h2><p>pubdata:2023-07-01 08:51:58markdate:2023-07-11 01:41:55.301129</p><h2 id="🔖想写就写，灵思无疆：用自动化部署让写作更得心应手"><a class="header-anchor" href="#🔖想写就写，灵思无疆：用自动化部署让写作更得心应手">¶</a>🔖<a href="https://sspai.com/post/80741" target="_blank" rel="noopener">想写就写，灵思无疆：用自动化部署让写作更得心应手</a></h2><p>pubdata:2023-07-07 03:25:18markdate:2023-07-14 02:03:26.774993</p><h2 id="🔖Handraw：支持中文手写效果的白板绘图工具"><a class="header-anchor" href="#🔖Handraw：支持中文手写效果的白板绘图工具">¶</a>🔖<a href="https://sspai.com/post/80459" target="_blank" rel="noopener">Handraw：支持中文手写效果的白板绘图工具</a></h2><p>pubdata:2023-07-11 03:13:40markdate:2023-07-20 04:55:35.064296</p><h2 id="🔖高难度开局的求职之路如何步步拆解：我的回顾与复盘"><a class="header-anchor" href="#🔖高难度开局的求职之路如何步步拆解：我的回顾与复盘">¶</a>🔖<a href="https://sspai.com/post/81429" target="_blank" rel="noopener">高难度开局的求职之路如何步步拆解：我的回顾与复盘</a></h2><p>pubdata:2023-07-24 06:29:53markdate:2023-07-25 04:04:21.666967</p><p>统计 ✅ : 0 📅 : 0 🔖 : 4</p><!-- more --><h2 id="✅-0"><a class="header-anchor" href="#✅-0">¶</a>✅ : 0</h2><h2 id="📅-0"><a class="header-anchor" href="#📅-0">¶</a>📅 : 0</h2><h2 id="🔖-4"><a class="header-anchor" href="#🔖-4">¶</a>🔖 : 4</h2><p>🔖 <a href="https://github.com/kenjihiranabe/The-Art-of-Linear-Algebra/tree/main" target="_blank" rel="noopener">GitHub - kenjihiranabe/The-Art-of-Linear-Algebra: Graphic notes on Gilbert Strang's &quot;Linear Algebra for Everyone&quot;</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-07.md">C日常/2023-07.md</a><br>🔖 小游戏 rom下载-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-07.md">C日常/2023-07.md</a><br>🔖 塞尔达王国之泪-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-07.md">C日常/2023-07.md</a><br>🔖  奥德赛-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-07.md">C日常/2023-07.md</a></p><h2 id="🔖ChromeBox-小主机黑苹果安装及双系统引导教程"><a class="header-anchor" href="#🔖ChromeBox-小主机黑苹果安装及双系统引导教程">¶</a>🔖<a href="https://www.sqlsec.com/2023/07/macbox.html" target="_blank" rel="noopener">ChromeBox 小主机黑苹果安装及双系统引导教程</a></h2><p>pubdata:2023-07-30 16:58:27markdate:2023-08-01 01:55:27.556147</p><h2 id="🔖如何「构建第二大脑」，这是我的-Obsidian-实践配方"><a class="header-anchor" href="#🔖如何「构建第二大脑」，这是我的-Obsidian-实践配方">¶</a>🔖<a href="https://sspai.com/post/80802" target="_blank" rel="noopener">如何「构建第二大脑」，这是我的 Obsidian 实践配方</a></h2><p>pubdata:2023-08-03 03:06:24markdate:2023-08-04 04:01:21.994183</p><h2 id="🔖旧笔记本化身-HTPC——打造一台优雅的家庭娱乐主机"><a class="header-anchor" href="#🔖旧笔记本化身-HTPC——打造一台优雅的家庭娱乐主机">¶</a>🔖<a href="https://sspai.com/post/81600" target="_blank" rel="noopener">旧笔记本化身 HTPC——打造一台优雅的家庭娱乐主机</a></h2><p>pubdata:2023-07-31 08:30:00markdate:2023-08-04 04:16:02.617315</p><h2 id="🔖Obsidian-Weread-Plugin：导出《微信读书》阅读数据至-Obsidian：划线、想法、书评等"><a class="header-anchor" href="#🔖Obsidian-Weread-Plugin：导出《微信读书》阅读数据至-Obsidian：划线、想法、书评等">¶</a>🔖<a href="https://www.appinn.com/obsidian-weread-plugin/" target="_blank" rel="noopener">Obsidian Weread Plugin：导出《微信读书》阅读数据至 Obsidian：划线、想法、书评等</a></h2><p>pubdata:2023-08-05 05:40:00markdate:2023-08-07 01:37:06.558014</p><h2 id="🔖App-1-从互联网消失的-Flash-游戏和动画，你可以在这里怀旧"><a class="header-anchor" href="#🔖App-1-从互联网消失的-Flash-游戏和动画，你可以在这里怀旧">¶</a>🔖<a href="https://sspai.com/post/81698" target="_blank" rel="noopener">App+1 | 从互联网消失的 Flash 游戏和动画，你可以在这里怀旧</a></h2><p>pubdata:2023-08-02 08:00:00markdate:2023-08-07 08:14:12.296064</p><h2 id="🔖免费的-Infuse？快来试试新鲜的私人影视库-VidHub"><a class="header-anchor" href="#🔖免费的-Infuse？快来试试新鲜的私人影视库-VidHub">¶</a>🔖<a href="https://www.appinn.com/vidhub/" target="_blank" rel="noopener">免费的 Infuse？快来试试新鲜的私人影视库 VidHub</a></h2><p>pubdata:2023-08-07 08:47:52markdate:2023-08-08 06:40:51.944633</p><h2 id="🔖开源自动工作流工具-n8n-发布-1-0-版本"><a class="header-anchor" href="#🔖开源自动工作流工具-n8n-发布-1-0-版本">¶</a>🔖<a href="https://www.appinn.com/n8n-1-0/" target="_blank" rel="noopener">开源自动工作流工具 n8n 发布 1.0 版本</a></h2><p>pubdata:2023-08-07 03:58:04markdate:2023-08-08 06:45:45.315290</p><h2 id="🔖Show-HN-Markwhen-Markdown-for-Timelines"><a class="header-anchor" href="#🔖Show-HN-Markwhen-Markdown-for-Timelines">¶</a>🔖<a href="https://sg.talenss.xyz/" target="_blank" rel="noopener">Show HN: Markwhen: Markdown for Timelines</a></h2><p>pubdata:2023-07-31 15:31:26markdate:2023-08-09 00:04:22.042148</p><h2 id="🔖又一款国产自动化测试平台，开源了！"><a class="header-anchor" href="#🔖又一款国产自动化测试平台，开源了！">¶</a>🔖<a href="https://zhuanlan.zhihu.com/p/648759506" target="_blank" rel="noopener">又一款国产自动化测试平台，开源了！</a></h2><p>pubdata:2023-08-08 09:31:12markdate:2023-08-11 02:01:12.428487</p><h2 id="🔖Syncthing-Tray-简单小巧的文件同步工具-Syncthing-的图形界面版本"><a class="header-anchor" href="#🔖Syncthing-Tray-简单小巧的文件同步工具-Syncthing-的图形界面版本">¶</a>🔖<a href="https://www.appinn.com/syncthing-tray/" target="_blank" rel="noopener">Syncthing Tray 简单小巧的文件同步工具 Syncthing 的图形界面版本 </a></h2><p>pubdata:2023-08-10 02:32:00markdate:2023-08-11 11:25:27.781172</p><h2 id="🔖这个加密视频怎么下载？"><a class="header-anchor" href="#🔖这个加密视频怎么下载？">¶</a>🔖<a href="https://www.appinn.com/download-video-use-cat-catch/" target="_blank" rel="noopener">这个加密视频怎么下载？</a></h2><p>pubdata:2023-08-11 09:33:20markdate:2023-08-12 05:03:13.614099</p><h2 id="🔖书到用时方恨少？写读书笔记时如何做到旁征博引"><a class="header-anchor" href="#🔖书到用时方恨少？写读书笔记时如何做到旁征博引">¶</a>🔖<a href="https://sspai.com/post/81889" target="_blank" rel="noopener">书到用时方恨少？写读书笔记时如何做到旁征博引</a></h2><p>pubdata:2023-08-09 03:02:22markdate:2023-08-12 05:09:43.417657</p><h2 id="🔖Z-Library-发布-Chrome、Firefox-浏览器扩展-Z-Library-Finder，防失联、防走失神器"><a class="header-anchor" href="#🔖Z-Library-发布-Chrome、Firefox-浏览器扩展-Z-Library-Finder，防失联、防走失神器">¶</a>🔖<a href="https://www.appinn.com/zlib-finder/" target="_blank" rel="noopener">Z-Library 发布 Chrome、Firefox 浏览器扩展 Z-Library Finder，防失联、防走失神器</a></h2><p>pubdata:2023-08-12 05:51:53markdate:2023-08-13 03:55:06.769535</p><h2 id="🔖晚霞预测小程序：预测未来几天的晚霞和朝霞出现的概率"><a class="header-anchor" href="#🔖晚霞预测小程序：预测未来几天的晚霞和朝霞出现的概率">¶</a>🔖<a href="https://www.appinn.com/wanxia-yuce-wechat-miniapp/" target="_blank" rel="noopener">晚霞预测小程序：预测未来几天的晚霞和朝霞出现的概率</a></h2><p>pubdata:2023-08-13 06:38:22markdate:2023-08-14 04:42:53.797543</p><h2 id="🔖《每周质量报告》-20230813-网售电动晾衣架质量调查"><a class="header-anchor" href="#🔖《每周质量报告》-20230813-网售电动晾衣架质量调查">¶</a>🔖<a href="https://tv.cctv.com/2023/08/13/VIDEwL6i7QEI65B86rQnjaaP230813.shtml" target="_blank" rel="noopener">《每周质量报告》 20230813 网售电动晾衣架质量调查</a></h2><p>pubdata:2023-08-14 02:13:21markdate:2023-08-14 06:14:41.287466</p><h2 id="🔖使用-BitRemote-在-macOS、iOS-上远程管理-BT、PT-下载任务｜qBittorrent、Transmission、群晖、威联通"><a class="header-anchor" href="#🔖使用-BitRemote-在-macOS、iOS-上远程管理-BT、PT-下载任务｜qBittorrent、Transmission、群晖、威联通">¶</a>🔖<a href="https://www.appinn.com/bitremote-for-apple/" target="_blank" rel="noopener">使用 BitRemote 在 macOS、iOS 上远程管理 BT、PT 下载任务｜qBittorrent、Transmission、群晖、威联通</a></h2><p>pubdata:2023-08-14 09:54:32markdate:2023-08-16 02:33:45.600766</p><h2 id="🔖为什么应该使用-Stacked-Diffs-Stacked-PRs"><a class="header-anchor" href="#🔖为什么应该使用-Stacked-Diffs-Stacked-PRs">¶</a>🔖<a href="https://ppwwyyxx.com/blog/2023/Stacked-Diffs-Pull-Requests/" target="_blank" rel="noopener">为什么应该使用 Stacked Diffs / Stacked PRs</a></h2><p>pubdata:2023-08-14 07:00:00markdate:2023-08-16 03:27:27.797595</p><h2 id="🔖掌控湿度、凉爽一夏：送给受不了-105-度的你"><a class="header-anchor" href="#🔖掌控湿度、凉爽一夏：送给受不了-105-度的你">¶</a>🔖<a href="https://sspai.com/post/68027" target="_blank" rel="noopener">掌控湿度、凉爽一夏：送给受不了 105 度的你</a></h2><p>pubdata:2023-06-26 07:59:58markdate:2023-08-17 04:05:45.212210</p><h2 id="🔖免费、开源、P2P、不限量，用-Transfer-zip-传输任意大小文件，不限速"><a class="header-anchor" href="#🔖免费、开源、P2P、不限量，用-Transfer-zip-传输任意大小文件，不限速">¶</a>🔖<a href="https://www.appinn.com/transfer-zip/" target="_blank" rel="noopener">免费、开源、P2P、不限量，用 Transfer.zip 传输任意大小文件，不限速</a></h2><p>pubdata:2023-08-16 10:03:20markdate:2023-08-17 08:07:10.035898</p><h2 id="🔖用-NetDrive-3-将-20-网盘挂载到本地，像本地硬盘一样用网盘"><a class="header-anchor" href="#🔖用-NetDrive-3-将-20-网盘挂载到本地，像本地硬盘一样用网盘">¶</a>🔖<a href="https://www.appinn.com/netdrive-3/" target="_blank" rel="noopener">用 NetDrive 3 将 20+ 网盘挂载到本地，像本地硬盘一样用网盘</a></h2><p>pubdata:2023-08-18 08:51:20markdate:2023-08-21 02:11:36.260922</p><h2 id="🔖极简三步，我的个人知识管理工作流"><a class="header-anchor" href="#🔖极简三步，我的个人知识管理工作流">¶</a>🔖<a href="https://sspai.com/post/81926" target="_blank" rel="noopener">极简三步，我的个人知识管理工作流</a></h2><p>pubdata:2023-08-16 09:00:00markdate:2023-08-21 02:23:18.541140</p><h2 id="🔖深言达意：想不出来词，只知道意思？AI帮你｜由清华大学-THUNLP-发布的万词王、反向词典升级版"><a class="header-anchor" href="#🔖深言达意：想不出来词，只知道意思？AI帮你｜由清华大学-THUNLP-发布的万词王、反向词典升级版">¶</a>🔖<a href="https://www.appinn.com/shenyandayi/" target="_blank" rel="noopener">深言达意：想不出来词，只知道意思？AI帮你｜由清华大学 THUNLP 发布的万词王、反向词典升级版</a></h2><p>pubdata:2023-08-20 11:21:00markdate:2023-08-22 05:08:33.705624</p><h2 id="🔖界面简洁，功能丰富：Paperlib-如何帮我做好文献管理"><a class="header-anchor" href="#🔖界面简洁，功能丰富：Paperlib-如何帮我做好文献管理">¶</a>🔖<a href="https://sspai.com/post/80998" target="_blank" rel="noopener">界面简洁，功能丰富：Paperlib 如何帮我做好文献管理</a></h2><p>pubdata:2023-07-19 03:42:47markdate:2023-08-22 05:12:19.184840</p><p>📅 <a href="https://www.appinn.com/bilingual-book-maker/" target="_blank" rel="noopener">用 GPT-3.5 翻译整本英文书，输出中英双语电子书 - 小众软件</a></p><h2 id="🔖-8"><a class="header-anchor" href="#🔖-8">¶</a>🔖 : 8</h2><p>🔖 <a href="https://www.zhihu.com/question/31515876?utm_id=0" target="_blank" rel="noopener">人体感觉最舒适温度多少？ - 知乎</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-07.md">C日常/2023-07.md</a><br>🔖 电子博物馆-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-07.md">C日常/2023-07.md</a><br>🔖 <a href="https://www.appinn.com/feeddd/" target="_blank" rel="noopener">Feeddd - 分布式，免费的微信公众号 RSS 订阅源，已超过 30000+ 微信公众号 - 小众软件</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-07.md">C日常/2023-07.md</a><br>🔖 nas-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-08.md">C日常/2023-08.md</a><br>🔖映射手柄-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-08.md">C日常/2023-08.md</a><br>🔖 <a href="http://www.ruanyifeng.com/blog/2023/08/typescript-tutorial.html" target="_blank" rel="noopener">《TypeScript 教程》发布了 - 阮一峰的网络日志</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-08.md">C日常/2023-08.md</a><br>🔖 体感温度计算-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-08.md">C日常/2023-08.md</a><br>🔖 iperf支持dscp-&gt;<a href="C%E6%97%A5%E5%B8%B8/2023-08.md">C日常/2023-08.md</a></p><h2 id="🔖OneNote-Md-Exporter-–-一键导出-OneNote-笔记为-Joplin、MarkDown-格式-Windows"><a class="header-anchor" href="#🔖OneNote-Md-Exporter-–-一键导出-OneNote-笔记为-Joplin、MarkDown-格式-Windows">¶</a>🔖<a href="https://www.appinn.com/onenote-md-exporter/" target="_blank" rel="noopener">OneNote Md Exporter – 一键导出 OneNote 笔记为 Joplin、MarkDown 格式[Windows]</a></h2><p>pubdata:2023-09-01 08:48:28markdate:2023-09-03 00:28:09.701339</p><h2 id="🔖AirPodsDesktop-–-开源-AirPods-增强：在-Windows-上动画显示电池信息、入耳检测、低音频延迟"><a class="header-anchor" href="#🔖AirPodsDesktop-–-开源-AirPods-增强：在-Windows-上动画显示电池信息、入耳检测、低音频延迟">¶</a>🔖<a href="https://www.appinn.com/airpodsdesktop/" target="_blank" rel="noopener">AirPodsDesktop – 开源 AirPods 增强：在 Windows 上动画显示电池信息、入耳检测、低音频延迟</a></h2><p>pubdata:2023-09-02 04:05:18markdate:2023-09-03 08:24:54.291660</p><h2 id="🔖你或许总不满意，但它不全是秘密：聊聊-Twitter-开源的时间线算法"><a class="header-anchor" href="#🔖你或许总不满意，但它不全是秘密：聊聊-Twitter-开源的时间线算法">¶</a>🔖<a href="https://sspai.com/post/82586" target="_blank" rel="noopener">你或许总不满意，但它不全是秘密：聊聊 Twitter 开源的时间线算法</a></h2><p>pubdata:2023-09-05 07:30:00markdate:2023-09-06 07:48:40.277952</p><h2 id="🔖导出多年微信聊天记录，我用可视化分析了出自己的口头禅"><a class="header-anchor" href="#🔖导出多年微信聊天记录，我用可视化分析了出自己的口头禅">¶</a>🔖<a href="https://sspai.com/post/82577" target="_blank" rel="noopener">导出多年微信聊天记录，我用可视化分析了出自己的口头禅</a></h2><p>pubdata:2023-08-31 03:37:31markdate:2023-09-06 07:53:47.336536</p><h2 id="🔖-Linux-distrobox-真是一个实用的工具"><a class="header-anchor" href="#🔖-Linux-distrobox-真是一个实用的工具">¶</a>🔖<a href="https://www.v2ex.com/t/971864#reply0" target="_blank" rel="noopener">[Linux] distrobox 真是一个实用的工具</a></h2><p>pubdata:2023-09-07 14:17:37markdate:2023-09-08 03:19:35.185065</p><h2 id="🔖tldraw-–-一个人人都会用，开源在线白板"><a class="header-anchor" href="#🔖tldraw-–-一个人人都会用，开源在线白板">¶</a>🔖<a href="https://www.appinn.com/tldraw/" target="_blank" rel="noopener">tldraw – 一个人人都会用，开源在线白板</a></h2><p>pubdata:2023-09-10 08:17:39markdate:2023-09-11 15:44:53.433367</p><h2 id="🔖居然有这种网站？涮火锅啦"><a class="header-anchor" href="#🔖居然有这种网站？涮火锅啦">¶</a>🔖<a href="https://www.appinn.com/shuanhuoguo/" target="_blank" rel="noopener">居然有这种网站？涮火锅啦</a></h2><p>pubdata:2023-09-13 13:10:17markdate:2023-09-14 08:06:51.509429</p><h2 id="🔖我在数字时代做了一个电子日历，让油画和照片可以被装进去"><a class="header-anchor" href="#🔖我在数字时代做了一个电子日历，让油画和照片可以被装进去">¶</a>🔖<a href="https://sspai.com/post/82704" target="_blank" rel="noopener">我在数字时代做了一个电子日历，让油画和照片可以被装进去</a></h2><p>pubdata:2023-09-07 09:12:48markdate:2023-09-14 11:21:50.001074</p><h2 id="🔖百元级售价、小程序操作的门禁卡复制器-，小白也能轻松上手啦～"><a class="header-anchor" href="#🔖百元级售价、小程序操作的门禁卡复制器-，小白也能轻松上手啦～">¶</a>🔖<a href="https://sg.talenss.xyz/rss4/Bp5P1ub8yaA.mp4" target="_blank" rel="noopener">百元级售价、小程序操作的门禁卡复制器 ，小白也能轻松上手啦～</a></h2><p>pubdata:2023-09-16 06:00:00markdate:2023-09-20 01:39:33.785373</p><h2 id="🔖双轨歌词、动态封面：我是如何用-mpv-听歌的"><a class="header-anchor" href="#🔖双轨歌词、动态封面：我是如何用-mpv-听歌的">¶</a>🔖<a href="https://sspai.com/post/82744" target="_blank" rel="noopener">双轨歌词、动态封面：我是如何用 mpv 听歌的</a></h2><p>pubdata:2023-09-20 09:30:00markdate:2023-09-22 01:13:47.865803</p><h2 id="🔖Obsidian-Excalidraw：我的个人知识管理可视化方法论"><a class="header-anchor" href="#🔖Obsidian-Excalidraw：我的个人知识管理可视化方法论">¶</a>🔖<a href="https://sspai.com/post/82130" target="_blank" rel="noopener">Obsidian + Excalidraw：我的个人知识管理可视化方法论</a></h2><p>pubdata:2023-09-18 03:01:49markdate:2023-09-22 05:29:59.547928</p><h2 id="ttrss标记个数-6"><a class="header-anchor" href="#ttrss标记个数-6">¶</a>=&gt; ttrss标记个数: 6</h2><h3 id="四个-All-in-One-工具，帮我优化工作与生活流程"><a class="header-anchor" href="#四个-All-in-One-工具，帮我优化工作与生活流程">¶</a><a href="https://sspai.com/post/83315" target="_blank" rel="noopener">四个 All-in-One 工具，帮我优化工作与生活流程</a></h3><p>pubdata:2023-10-10 03:47:30markdate:2023-10-12 06:16:53.456318</p><h3 id="云计算-双-11-活动提前来了，冲"><a class="header-anchor" href="#云计算-双-11-活动提前来了，冲">¶</a><a href="https://www.v2ex.com/t/981377#reply4" target="_blank" rel="noopener">[云计算] 双 11 活动提前来了，冲</a></h3><p>pubdata:2023-10-12 08:27:03markdate:2023-10-13 02:22:25.055100</p><h3 id="分享创造-小爱音箱播放自定义音乐"><a class="header-anchor" href="#分享创造-小爱音箱播放自定义音乐">¶</a><a href="https://www.v2ex.com/t/982027#reply4" target="_blank" rel="noopener">[分享创造] 小爱音箱播放自定义音乐</a></h3><p>pubdata:2023-10-14 14:03:33markdate:2023-10-15 04:41:33.976215</p><h3 id="3-个工具，将网页转换为-Markdown：安卓、Edge、Chrome、Firefox、Obsidian、Safari"><a class="header-anchor" href="#3-个工具，将网页转换为-Markdown：安卓、Edge、Chrome、Firefox、Obsidian、Safari">¶</a><a href="https://www.appinn.com/webpage-to-markdown/" target="_blank" rel="noopener">3 个工具，将网页转换为 Markdown：安卓、Edge、Chrome、Firefox、Obsidian、Safari</a></h3><p>pubdata:2023-10-14 07:25:00markdate:2023-10-15 04:45:43.200312</p><h3 id="3-年、4-个库目录、100-万字：也谈我的-Obsidian-笔记工作流"><a class="header-anchor" href="#3-年、4-个库目录、100-万字：也谈我的-Obsidian-笔记工作流">¶</a><a href="https://sspai.com/post/83042" target="_blank" rel="noopener">3 年、4 个库目录、100 万字：也谈我的 Obsidian 笔记工作流</a></h3><p>pubdata:2023-10-13 03:39:51markdate:2023-10-17 11:32:49.709021</p><h3 id="zTasker-–-万能计划任务工具：用-16种触发方式执行-Windows-上的-50-多种任务、程序"><a class="header-anchor" href="#zTasker-–-万能计划任务工具：用-16种触发方式执行-Windows-上的-50-多种任务、程序">¶</a><a href="https://www.appinn.com/ztasker/" target="_blank" rel="noopener">zTasker – 万能计划任务工具：用 16种触发方式执行 Windows 上的 50 多种任务、程序</a></h3><p>pubdata:2023-10-18 06:30:04markdate:2023-10-19 04:36:51.693584</p><h2 id="ttrss标记个数-13"><a class="header-anchor" href="#ttrss标记个数-13">¶</a>=&gt; ttrss标记个数: 13</h2><h3 id="活久见，跨平台快速启动工具-Wox-v2-0-0-更新｜“Alfred-和-Launchy-替代品”"><a class="header-anchor" href="#活久见，跨平台快速启动工具-Wox-v2-0-0-更新｜“Alfred-和-Launchy-替代品”">¶</a><a href="https://www.appinn.com/wox-v2-0-0-alpha-1/" target="_blank" rel="noopener">活久见，跨平台快速启动工具 Wox v2.0.0 更新｜“Alfred 和 Launchy 替代品”</a></h3><p>pubdata:2023-10-31 04:34:27markdate:2023-11-01 00:59:09.860848</p><h3 id="PowerToys-v0-75-0-带来全新的仪表盘界面，新的环境变量编辑器"><a class="header-anchor" href="#PowerToys-v0-75-0-带来全新的仪表盘界面，新的环境变量编辑器">¶</a><a href="https://www.appinn.com/powertoys-v0-75-0/" target="_blank" rel="noopener">PowerToys v0.75.0 带来全新的仪表盘界面，新的环境变量编辑器</a></h3><p>pubdata:2023-10-31 08:14:14markdate:2023-11-01 01:01:53.973783</p><h3 id="集成百家所长的-matter，也是智能家居的未来（系列文章之一）"><a class="header-anchor" href="#集成百家所长的-matter，也是智能家居的未来（系列文章之一）">¶</a><a href="https://sspai.com/prime/story/matter-explained-01" target="_blank" rel="noopener">集成百家所长的 matter，也是智能家居的未来（系列文章之一）</a></h3><p>pubdata:2023-10-25 09:03:37markdate:2023-11-02 12:19:23.766873</p><h3 id="神秘鸭：用-Siri、小爱同学、小度控制你的电脑，现已支持智能音箱：小爱音箱、小度小度、天猫精灵"><a class="header-anchor" href="#神秘鸭：用-Siri、小爱同学、小度控制你的电脑，现已支持智能音箱：小爱音箱、小度小度、天猫精灵">¶</a><a href="https://www.appinn.com/smya-cn-smart-speakers/" target="_blank" rel="noopener">神秘鸭：用 Siri、小爱同学、小度控制你的电脑，现已支持智能音箱：小爱音箱、小度小度、天猫精灵</a></h3><p>pubdata:2023-11-05 04:03:39markdate:2023-11-07 10:54:05.321298</p><h3 id="利用快捷指令，Linux-也能轻松「接力」iOS-剪贴文本"><a class="header-anchor" href="#利用快捷指令，Linux-也能轻松「接力」iOS-剪贴文本">¶</a><a href="https://sspai.com/post/84133" target="_blank" rel="noopener">利用快捷指令，Linux 也能轻松「接力」iOS 剪贴文本</a></h3><p>pubdata:2023-11-09 02:30:03markdate:2023-11-09 09:18:57.202607</p><h3 id="为了记录过去，我做了个-Windows-版的-Rewind：捕风记录仪"><a class="header-anchor" href="#为了记录过去，我做了个-Windows-版的-Rewind：捕风记录仪">¶</a><a href="https://sspai.com/post/83590" target="_blank" rel="noopener">为了记录过去，我做了个 Windows 版的 Rewind：捕风记录仪</a></h3><p>pubdata:2023-11-01 03:33:26markdate:2023-11-09 10:29:46.300911</p><h3 id="我心中的最佳香港电影"><a class="header-anchor" href="#我心中的最佳香港电影">¶</a><a href="https://www.williamlong.info/archives/7339.html" target="_blank" rel="noopener">我心中的最佳香港电影</a></h3><p>pubdata:2023-11-04 12:14:21markdate:2023-11-13 07:16:49.473046</p><h3 id="Obsidian-Web-–-连接-Chrome-与-Obsidian，从网页创建笔记，支持自定义模板"><a class="header-anchor" href="#Obsidian-Web-–-连接-Chrome-与-Obsidian，从网页创建笔记，支持自定义模板">¶</a><a href="https://www.appinn.com/obsidian-web-connect-chrome/" target="_blank" rel="noopener">Obsidian Web – 连接 Chrome 与 Obsidian，从网页创建笔记，支持自定义模板</a></h3><p>pubdata:2023-11-14 07:12:44markdate:2023-11-15 01:02:48.660384</p><h3 id="PotPlayer-直接播放网盘视频：连接-Alist，接入阿里云盘、百度-夸克网盘等"><a class="header-anchor" href="#PotPlayer-直接播放网盘视频：连接-Alist，接入阿里云盘、百度-夸克网盘等">¶</a><a href="https://www.appinn.com/potplayer-webdav-alist/" target="_blank" rel="noopener">PotPlayer 直接播放网盘视频：连接 Alist，接入阿里云盘、百度/夸克网盘等</a></h3><p>pubdata:2023-11-16 06:52:23markdate:2023-11-17 03:09:05.853804</p><h3 id="Shmily-–-聊天记录归档，支持-QQ、WeChat、SMS、Email-等"><a class="header-anchor" href="#Shmily-–-聊天记录归档，支持-QQ、WeChat、SMS、Email-等">¶</a><a href="https://www.appinn.com/shmily/" target="_blank" rel="noopener">Shmily – 聊天记录归档，支持 QQ、WeChat、SMS、Email 等</a></h3><p>pubdata:2023-11-18 03:43:00markdate:2023-11-18 20:01:29.214164</p><h3 id="OpenTrace-–-开源跨、平台，基于-NextTrace，可视化路由跟踪工具，在地图上追踪并显示-IP-地址"><a class="header-anchor" href="#OpenTrace-–-开源跨、平台，基于-NextTrace，可视化路由跟踪工具，在地图上追踪并显示-IP-地址">¶</a><a href="https://www.appinn.com/opentrace/" target="_blank" rel="noopener">OpenTrace – 开源跨、平台，基于 NextTrace，可视化路由跟踪工具，在地图上追踪并显示 IP 地址</a></h3><p>pubdata:2023-11-20 08:41:55markdate:2023-11-21 02:27:01.426570</p><h3 id="一日一技-如何只用软件实现显示器的输入源切换"><a class="header-anchor" href="#一日一技-如何只用软件实现显示器的输入源切换">¶</a><a href="https://sspai.com/post/83908" target="_blank" rel="noopener">一日一技 | 如何只用软件实现显示器的输入源切换</a></h3><p>pubdata:2023-11-03 03:30:00markdate:2023-11-21 02:31:03.869373</p><h3 id="App-1-给你不受语言限制、无需繁琐操作的冲浪体验：沉浸式翻译"><a class="header-anchor" href="#App-1-给你不受语言限制、无需繁琐操作的冲浪体验：沉浸式翻译">¶</a><a href="https://sspai.com/post/83943" target="_blank" rel="noopener">App+1 | 给你不受语言限制、无需繁琐操作的冲浪体验：沉浸式翻译</a></h3><p>pubdata:2023-11-02 07:00:00markdate:2023-11-21 02:31:43.259976</p><h2 id="ttrss标记个数-6-2"><a class="header-anchor" href="#ttrss标记个数-6-2">¶</a>=&gt; ttrss标记个数: 6</h2><h3 id="组装一台-22TB-容量的-NAS（家庭存储服务器）"><a class="header-anchor" href="#组装一台-22TB-容量的-NAS（家庭存储服务器）">¶</a><a href="https://icloudnative.io/posts/budget-nas/" target="_blank" rel="noopener">组装一台 22TB 容量的 NAS（家庭存储服务器）</a></h3><p>pubdata:2022-06-10 01:06:37markdate:2023-12-07 07:35:47.022086</p><h3 id="腾讯面试：服务端调用listen之后sleep休眠，请问客户端的connect能不能成功？"><a class="header-anchor" href="#腾讯面试：服务端调用listen之后sleep休眠，请问客户端的connect能不能成功？">¶</a><a href="https://zhuanlan.zhihu.com/p/670719289" target="_blank" rel="noopener">腾讯面试：服务端调用listen之后sleep休眠，请问客户端的connect能不能成功？</a></h3><p>pubdata:2023-12-06 07:27:00markdate:2023-12-08 01:09:37.236953</p><h3 id="NAS-我的自建-NAS"><a class="header-anchor" href="#NAS-我的自建-NAS">¶</a><a href="https://www.v2ex.com/t/999761#reply1" target="_blank" rel="noopener">[NAS] 我的自建 NAS</a></h3><p>pubdata:2023-12-12 09:17:39markdate:2023-12-12 11:57:28.161800</p><h3 id="WeChatMsg-留痕-–-支持语音聊天，微信聊天记录导出工具-Windows"><a class="header-anchor" href="#WeChatMsg-留痕-–-支持语音聊天，微信聊天记录导出工具-Windows">¶</a><a href="https://www.appinn.com/wechatmsg/" target="_blank" rel="noopener">WeChatMsg 留痕 – 支持语音聊天，微信聊天记录导出工具[Windows]</a></h3><p>pubdata:2023-12-15 07:00:22markdate:2023-12-18 09:31:55.841920</p><h3 id="Latest-–-开源、免费，Mac-软件管理器，可检查-Mac-绝大多数软件更新"><a class="header-anchor" href="#Latest-–-开源、免费，Mac-软件管理器，可检查-Mac-绝大多数软件更新">¶</a><a href="https://www.appinn.com/max-codes-latest/" target="_blank" rel="noopener">Latest – 开源、免费，Mac 软件管理器，可检查 Mac 绝大多数软件更新</a></h3><p>pubdata:2023-12-18 04:05:41markdate:2023-12-19 08:42:40.404081</p><h3 id="古有-Infuse，现有-VidHub，要不来试试？"><a class="header-anchor" href="#古有-Infuse，现有-VidHub，要不来试试？">¶</a><a href="https://www.appinn.com/vidhub-video-player/" target="_blank" rel="noopener">古有 Infuse，现有 VidHub，要不来试试？</a></h3><p>pubdata:2023-12-22 03:02:42markdate:2023-12-25 04:16:04.061410</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年度汇报，记录一下过去一年的工作和生活。&lt;/p&gt;
    
    </summary>
    
      <category term="年度汇报" scheme="https://talengu.github.io/public/categories/%E5%B9%B4%E5%BA%A6%E6%B1%87%E6%8A%A5/"/>
    
    
      <category term="年度汇报" scheme="https://talengu.github.io/public/tags/%E5%B9%B4%E5%BA%A6%E6%B1%87%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>「2022年度汇报」ttrss</title>
    <link href="https://talengu.github.io/public/2022/12/31/test/2022/"/>
    <id>https://talengu.github.io/public/2022/12/31/test/2022/</id>
    <published>2022-12-31T16:00:04.000Z</published>
    <updated>2022-12-31T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>年度汇报，记录一下过去一年的工作和生活。</p><a id="more"></a><h1>202207月度汇报</h1><h2 id="🔖BGmi-–-自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人"><a class="header-anchor" href="#🔖BGmi-–-自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人">¶</a>🔖<a href="https://www.appinn.com/bgmi/" target="_blank" rel="noopener">BGmi – 自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人</a></h2><p>pubdata:2022-06-30 02:48:00markdate:2022-07-01 06:32:58.020141</p><h2 id="🔖老牌截图工具-PicPick-更新，新增录屏功能，支持-MP4-GIF-格式"><a class="header-anchor" href="#🔖老牌截图工具-PicPick-更新，新增录屏功能，支持-MP4-GIF-格式">¶</a>🔖<a href="https://www.appinn.com/picpick-6-2/" target="_blank" rel="noopener">老牌截图工具 PicPick 更新，新增录屏功能，支持 MP4/GIF 格式</a></h2><p>pubdata:2022-06-29 07:19:19markdate:2022-07-02 04:11:20.453414</p><h2 id="🔖白板与笔记融合：我的四个氢图使用场景"><a class="header-anchor" href="#🔖白板与笔记融合：我的四个氢图使用场景">¶</a>🔖<a href="https://sspai.com/post/73246" target="_blank" rel="noopener">白板与笔记融合：我的四个氢图使用场景</a></h2><p>pubdata:2022-06-30 03:30:02markdate:2022-07-03 01:08:35.583781</p><h2 id="🔖跨时空圆桌：伟大创作者们如何安排日常生活"><a class="header-anchor" href="#🔖跨时空圆桌：伟大创作者们如何安排日常生活">¶</a>🔖<a href="https://sspai.com/post/73779" target="_blank" rel="noopener">跨时空圆桌：伟大创作者们如何安排日常生活</a></h2><p>pubdata:2022-06-15 09:30:00markdate:2022-07-03 01:50:35.971655</p><h2 id="🔖Typing-Learner-–-硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」-Windows-macOS"><a class="header-anchor" href="#🔖Typing-Learner-–-硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」-Windows-macOS">¶</a>🔖<a href="https://www.appinn.com/typing-learner/" target="_blank" rel="noopener">Typing Learner – 硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」[Windows/macOS]</a></h2><p>pubdata:2022-07-03 04:07:39markdate:2022-07-04 05:06:58.902152</p><h2 id="🔖创建自己的第一个-Power-Automate-工作流，从此繁琐操作是路人"><a class="header-anchor" href="#🔖创建自己的第一个-Power-Automate-工作流，从此繁琐操作是路人">¶</a>🔖<a href="https://sspai.com/post/73710" target="_blank" rel="noopener">创建自己的第一个 Power Automate 工作流，从此繁琐操作是路人</a></h2><p>pubdata:2022-07-05 10:44:47markdate:2022-07-06 11:29:55.648077</p><h2 id="🔖为-WSL-配置这些新功能，不用虚拟机也能体验完整-Linux"><a class="header-anchor" href="#🔖为-WSL-配置这些新功能，不用虚拟机也能体验完整-Linux">¶</a>🔖<a href="https://sspai.com/post/74167" target="_blank" rel="noopener">为 WSL 配置这些新功能，不用虚拟机也能体验完整 Linux</a></h2><p>pubdata:2022-07-08 03:30:00markdate:2022-07-09 03:08:43.747852</p><h2 id="🔖当飞盘成为人类的玩具，我们该如何参与这场游戏"><a class="header-anchor" href="#🔖当飞盘成为人类的玩具，我们该如何参与这场游戏">¶</a>🔖<a href="https://sspai.com/post/73505" target="_blank" rel="noopener">当飞盘成为人类的玩具，我们该如何参与这场游戏</a></h2><p>pubdata:2022-06-06 08:00:00markdate:2022-07-10 01:36:40.114938</p><h2 id="🔖走进小众但不冷门的房车世界"><a class="header-anchor" href="#🔖走进小众但不冷门的房车世界">¶</a>🔖<a href="https://sspai.com/post/74043" target="_blank" rel="noopener">走进小众但不冷门的房车世界</a></h2><p>pubdata:2022-07-01 08:04:43markdate:2022-07-10 02:09:34.733003</p><h2 id="🔖从盲目崇拜到理性使用，谈谈我眼中的「双向链接」"><a class="header-anchor" href="#🔖从盲目崇拜到理性使用，谈谈我眼中的「双向链接」">¶</a>🔖<a href="https://sspai.com/post/73407" target="_blank" rel="noopener">从盲目崇拜到理性使用，谈谈我眼中的「双向链接」</a></h2><p>pubdata:2022-05-27 06:31:27markdate:2022-07-11 14:31:37.724795</p><h2 id="🔖打开终端总有好心情：我的美化方案及配置分享"><a class="header-anchor" href="#🔖打开终端总有好心情：我的美化方案及配置分享">¶</a>🔖<a href="https://sspai.com/post/74216" target="_blank" rel="noopener">打开终端总有好心情：我的美化方案及配置分享</a></h2><p>pubdata:2022-07-11 08:00:51markdate:2022-07-12 04:52:00.122103</p><h2 id="🔖咖啡美酒冷泡茶，这些消暑饮品在家就能动手做"><a class="header-anchor" href="#🔖咖啡美酒冷泡茶，这些消暑饮品在家就能动手做">¶</a>🔖<a href="https://sspai.com/post/74196" target="_blank" rel="noopener">咖啡美酒冷泡茶，这些消暑饮品在家就能动手做</a></h2><p>pubdata:2022-07-10 07:17:11markdate:2022-07-12 05:03:55.504330</p><h2 id="🔖语雀，即将开源！"><a class="header-anchor" href="#🔖语雀，即将开源！">¶</a>🔖<a href="https://zhuanlan.zhihu.com/p/540713275" target="_blank" rel="noopener">语雀，即将开源！</a></h2><p>pubdata:2022-07-12 08:19:47markdate:2022-07-14 10:28:28.713392</p><p>统计 ✅ : 6 📅 : 3 🔖 : 47</p><!-- more --><h2 id="✅-6"><a class="header-anchor" href="#✅-6">¶</a>✅ : 6</h2><p>✅目标图标系统-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>✅ <a href="https://blog.csdn.net/hhhhhyyyyy8/article/details/102133863" target="_blank" rel="noopener">Linux内核数据包bridge上转发流程_hhhhhyyyyy8的博客-CSDN博客_br_multicast_flood</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W27.md">C日常/2022-W27.md</a><br>✅ 邮箱转rss-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W23.md">C日常/2022-W23.md</a><br>✅  hacker news rss添加-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W23.md">C日常/2022-W23.md</a><br>✅ 经济学人转载leader文章-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W23.md">C日常/2022-W23.md</a><br>✅ github博客评论系统是否换成【不换】-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W23.md">C日常/2022-W23.md</a></p><h2 id="📅-3"><a class="header-anchor" href="#📅-3">¶</a>📅 : 3</h2><p>📅 端口触发 端口转发-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>📅 全屋智能-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W26.md">C日常/2022-W26.md</a><br>📅 改进-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W26.md">C日常/2022-W26.md</a></p><h2 id="🔖-47"><a class="header-anchor" href="#🔖-47">¶</a>🔖 : 47</h2><p>🔖 ish保持后台运行-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W19.md">C日常/2022-W19.md</a><br>🔖 <a href="https://www.jianshu.com/p/f29ca723db4f" target="_blank" rel="noopener">Git 运行配置（git config、gitk、git gui） - michael_jia - 简书</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W19.md">C日常/2022-W19.md</a><br>🔖<a href="https://www.cnblogs.com/xuanbjut/p/12624702.html" target="_blank" rel="noopener">wmctrl像xmonad那样方便地用快捷键来控制任务窗口的显示 - pycod - 博客园</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W19.md">C日常/2022-W19.md</a><br>🔖 <a href="https://blog.csdn.net/anlian523/article/details/113627568" target="_blank" rel="noopener">VSCode复制代码时去掉样式/语法高亮/代码高亮/黑色背景_anlian523的博客-CSDN博客_idea复制代码不带黑色背景</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W19.md">C日常/2022-W19.md</a><br>🔖 <a href="https://blog.csdn.net/dog250/article/details/121400218" target="_blank" rel="noopener">为什么除法，开方，求对数比乘法，乘方，求指数更难_dog250的博客-CSDN博客</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖学习小林博客的写法-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖一万字统计学梳理-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖腾讯 彻底搞清楚tcp-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖0x5f3759df这个快速开方中的常数的数学依据是什么？-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖https流程-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖使用 Clion + QEMU/GDB 远程调试Linux内核（分享自知乎网）<a href="https://zhuanlan.zhihu.com/p/412604505?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/412604505?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖TCP/IP协议到底在讲什么？ <a href="http://www.zhihu.com/question/51074319?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848" target="_blank" rel="noopener">http://www.zhihu.com/question/51074319?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848</a> （分享自知乎网）-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖【什么是动态规划（Dynamic Programming）？动态规划的意义是什么？】阮行止：… <a href="https://www.zhihu.com/question/23995189/answer/613096905?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848" target="_blank" rel="noopener">https://www.zhihu.com/question/23995189/answer/613096905?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848</a> （分享自知乎网）-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖【为什么有人说弄懂了《算法导论》的 90%，就超越了 90%的程序员？】启舰：… <a href="https://www.zhihu.com/question/315201616/answer/1960517601?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848" target="_blank" rel="noopener">https://www.zhihu.com/question/315201616/answer/1960517601?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848</a> （分享自知乎网）-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖【vs code】【keil】优雅地使用vs code代替keil。by 童话与云 👉 <a href="https://www.zhihu.com/zvideo/1422934459457253376?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848" target="_blank" rel="noopener">https://www.zhihu.com/zvideo/1422934459457253376?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖图解网络 - 75张图带你了解网络设备、网络地址规划、静态路由、实战演练（分享自知乎网）-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖vscode-journal：vscode中写日记/便签/提醒，配合nutstore与安卓、ios同步_TeQuL的博客-CSDN博客-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖结构体（结构体嵌套、结构体指针、结构体参数传递） - 蓝海人 - 博客园-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖Feedme - 8大 RSS 阅读器第三方客户端[Android] - 小众软件-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖聪明人必学的停车小技巧！。by Felicidades 👉 <a href="https://www.zhihu.com/zvideo/1414008107094093824?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848" target="_blank" rel="noopener">https://www.zhihu.com/zvideo/1414008107094093824?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖在线 DOS 游戏 - 近 2000 款怀旧游戏，仙剑、红警、三国志、大富翁、明星志愿、大航海、主题医院等 - 小众软件-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖Feeddd · 重新掌控你的订阅源-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖【如何长时间高效学习？】硬核学长2077：… <a href="https://www.zhihu.com/question/28358499/answer/1762418904?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848" target="_blank" rel="noopener">https://www.zhihu.com/question/28358499/answer/1762418904?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848</a> （分享自知乎网）-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖【你身边的学霸都有怎样的学习方法或习惯？】硬核学长2077：… <a href="https://www.zhihu.com/question/54265751/answer/1995587976?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848" target="_blank" rel="noopener">https://www.zhihu.com/question/54265751/answer/1995587976?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848</a> （分享自知乎网）-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖【如何不痛苦地早起？】铁木君：… <a href="https://www.zhihu.com/question/22120300/answer/1887544838?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848" target="_blank" rel="noopener">https://www.zhihu.com/question/22120300/answer/1887544838?utm_source=md.obsidian&amp;utm_medium=social&amp;utm_oi=619610399826382848</a> （分享自知乎网）-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖[[obsidian_tips]]-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖<a href="https://sspai.com/post/72757" target="_blank" rel="noopener">随时可用的 PC 体验是这样「炼」成的，Windows 新版睡眠机制详解 - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖<a href="https://blog.csdn.net/who538592/article/details/79483323" target="_blank" rel="noopener">TC流量控制_who538592的博客-CSDN博客_tc流量控制</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W16.md">C日常/2022-W16.md</a><br>🔖 <a href="https://sspai.com/post/74090" target="_blank" rel="noopener">大家都说好的蛋白粉，我们应该如何取舍 - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W28.md">C日常/2022-W28.md</a><br>🔖 <a href="https://zhuanlan.zhihu.com/p/508345279" target="_blank" rel="noopener">我的obsidian插件开发的学习过程</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W28.md">C日常/2022-W28.md</a><br>🔖 <a href="https://blog.csdn.net/Haywardwang/article/details/108626491" target="_blank" rel="noopener">python 词云构建_Haywardwang的博客-CSDN博客</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W28.md">C日常/2022-W28.md</a><br>🔖 <a href="https://blog.csdn.net/weixin_56842628/article/details/117921526?utm_medium=distribute.wap_relevant.none-task-blog-2~default~baidujs_title~default-9-117921526-blog-108626491.wap_blog_relevant_default&amp;spm=1001.2101.3001.4242.6&amp;utm_relevant_index=10" target="_blank" rel="noopener">如何用Python制作简单又好看的词云？来瞅瞅吧~_小熊爱Python的博客-CSDN博客_python词云代码简单</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W28.md">C日常/2022-W28.md</a><br>🔖 <a href="https://sspai.com/post/73779" target="_blank" rel="noopener">跨时空圆桌：伟大创作者们如何安排日常生活 - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W27.md">C日常/2022-W27.md</a><br>🔖 <a href="https://www.appinn.com/typing-learner/" target="_blank" rel="noopener">Typing Learner - 硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」[Windows/macOS] - 小众软件</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W27.md">C日常/2022-W27.md</a><br>🔖 <a href="https://www.zhihu.com/question/391756708/answer/2556173863" target="_blank" rel="noopener">SpaceX的可回收火箭有什么神奇之处，为何其他航天大国还不能仿造？ - YY硕 的回答 - 知乎</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W27.md">C日常/2022-W27.md</a><br>🔖 <a href="https://mp.weixin.qq.com/s/KBKO4C1d4CkyHAPEkh8D4Q" target="_blank" rel="noopener">这几个通信协议的动图不错</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W27.md">C日常/2022-W27.md</a><br>🔖 <a href="https://oorkan.medium.com/emojifying-your-linux-terminal-9a5c1e8f6b3c" target="_blank" rel="noopener">Emojifying your Linux terminal  🚀</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W27.md">C日常/2022-W27.md</a><br>🔖 <a href="https://sspai.com/post/74167" target="_blank" rel="noopener">为 WSL 配置这些新功能，不用虚拟机也能体验完整 Linux - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W27.md">C日常/2022-W27.md</a><br>🔖<a href="https://sspai.com/post/72274" target="_blank" rel="noopener">意识先行，工具辅助：谈谈我们该怎样分辨虚假信息</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W27.md">C日常/2022-W27.md</a><br>🔖<a href="https://zhuanlan.zhihu.com/p/495262462" target="_blank" rel="noopener">网站低代码开发</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W27.md">C日常/2022-W27.md</a><br>🔖 学习体系化，效率提升-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W27.md">C日常/2022-W27.md</a><br>🔖 <a href="https://sspai.com/post/73958" target="_blank" rel="noopener">玩转 Obsidian 08：利用 Dataview 打造自动化 HomePage - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W26.md">C日常/2022-W26.md</a><br>🔖 <a href="https://post.m.smzdm.com/p/adwgg2rd/" target="_blank" rel="noopener">小爱同学，打开我的三菱空调——米家空调伴侣2使用分享_智能家居_什么值得买</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W26.md">C日常/2022-W26.md</a><br>🔖 <a href="https://sspai.com/post/73829" target="_blank" rel="noopener">用 59 分钟，找到工具的效率之源 - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W26.md">C日常/2022-W26.md</a><br>🔖 <a href="https://cloud.tencent.com/developer/article/1879646" target="_blank" rel="noopener">tcpdump是在哪儿抓到的包？ - 腾讯云开发者社区-腾讯云</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W26.md">C日常/2022-W26.md</a><br>🔖 <a href="https://www.jianshu.com/p/79bcf09aed25" target="_blank" rel="noopener">IPTables五----ebtables - marshalzxy - 简书</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W26.md">C日常/2022-W26.md</a><br>🔖 <a href="https://david-waiting.medium.com/a-beginners-guide-to-generic-routing-encapsulation-fb2b4fb63abb" target="_blank" rel="noopener">A Beginner’s Guide to Generic Routing Encapsulation</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W26.md">C日常/2022-W26.md</a></p><h1>202208 月度</h1><h2 id="🔖AVNC-–-Android-上的开源-VNC-客户端"><a class="header-anchor" href="#🔖AVNC-–-Android-上的开源-VNC-客户端">¶</a>🔖<a href="https://www.appinn.com/avnc-for-android/" target="_blank" rel="noopener">AVNC – Android 上的开源 VNC 客户端</a></h2><p>pubdata:2022-08-07 04:59:52markdate:2022-08-07 17:42:37.878979</p><h2 id="🔖TigerVNC-–-高性能、跨平台开源-VNC-服务器与客户端"><a class="header-anchor" href="#🔖TigerVNC-–-高性能、跨平台开源-VNC-服务器与客户端">¶</a>🔖<a href="https://www.appinn.com/tigervnc/" target="_blank" rel="noopener">TigerVNC – 高性能、跨平台开源 VNC 服务器与客户端</a></h2><p>pubdata:2022-08-08 04:30:32markdate:2022-08-09 00:48:54.680756</p><h2 id="🔖Notion-又一开源替代品，诞生了！"><a class="header-anchor" href="#🔖Notion-又一开源替代品，诞生了！">¶</a>🔖<a href="https://zhuanlan.zhihu.com/p/552965032" target="_blank" rel="noopener">Notion 又一开源替代品，诞生了！</a></h2><p>pubdata:2022-08-12 04:42:26markdate:2022-08-13 16:16:00.234349</p><h2 id="🔖如何写一份高可读性的软件工程设计文档"><a class="header-anchor" href="#🔖如何写一份高可读性的软件工程设计文档">¶</a>🔖<a href="https://zhuanlan.zhihu.com/p/552095835" target="_blank" rel="noopener">如何写一份高可读性的软件工程设计文档</a></h2><p>pubdata:2022-08-10 09:00:14markdate:2022-08-20 02:27:47.773301</p><h2 id="🔖StrokesPlus-net-–-一款很厉害的鼠标手势软件，还有大佬汉化、以及持续更新脚本"><a class="header-anchor" href="#🔖StrokesPlus-net-–-一款很厉害的鼠标手势软件，还有大佬汉化、以及持续更新脚本">¶</a>🔖<a href="https://www.appinn.com/strokesplus-net/" target="_blank" rel="noopener">StrokesPlus.net – 一款很厉害的鼠标手势软件，还有大佬汉化、以及持续更新脚本</a></h2><p>pubdata:2022-08-24 04:29:23markdate:2022-08-25 03:51:08.820884</p><h2 id="统计-✅-1-📅-1-🔖-26"><a class="header-anchor" href="#统计-✅-1-📅-1-🔖-26">¶</a>统计 ✅ : 1 📅 : 1 🔖 : 26</h2><h2 id="✅-1"><a class="header-anchor" href="#✅-1">¶</a>✅ : 1</h2><p>✅自动生成rss月报-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a></p><h2 id="📅-1"><a class="header-anchor" href="#📅-1">¶</a>📅 : 1</h2><p>📅 加上地区统计-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W32.md">C日常/2022-W32.md</a></p><h2 id="🔖-26"><a class="header-anchor" href="#🔖-26">¶</a>🔖 : 26</h2><p>🔖 <a href="https://github.com/serhack/pdf-diff" target="_blank" rel="noopener">GitHub - serhack/pdf-diff: A tool for visualizing differences between two pdf files.</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W32.md">C日常/2022-W32.md</a><br>🔖 <a href="http://arthurchiao.art/blog/conntrack-design-and-implementation-zh/" target="_blank" rel="noopener">连接跟踪（conntrack）：原理、应用及 Linux 内核实现</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W32.md">C日常/2022-W32.md</a><br>🔖 <a href="https://codemirror.net/docs/guide/" target="_blank" rel="noopener">CodeMirror System Guide</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W32.md">C日常/2022-W32.md</a><br>🔖 <a href="https://zhuanlan.zhihu.com/p/357334969?utm_id=0" target="_blank" rel="noopener">mac使用VNC远程访问Ubuntu图形界面</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W32.md">C日常/2022-W32.md</a><br>🔖 <a href="https://mp.weixin.qq.com/s/FBJ_GIvdwNbvGKVKeroZjA" target="_blank" rel="noopener">冠军私教课</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W32.md">C日常/2022-W32.md</a><br>🔖 <a href="https://cloud.tencent.com/developer/article/1585686" target="_blank" rel="noopener">如何统计 Hexo 网站的访问地区和IP - 腾讯云开发者社区-腾讯云</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W32.md">C日常/2022-W32.md</a><br>🔖 <a href="https://www.appinn.com/navidrome/" target="_blank" rel="noopener">Navidrome - 开源音乐服务器，自建云端音乐播放器 - 小众软件</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W30.md">C日常/2022-W30.md</a><br>🔖 <a href="https://sspai.com/post/73443" target="_blank" rel="noopener">力量训练：办卡之前需要了解的训练基础与细节制定 - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W30.md">C日常/2022-W30.md</a><br>🔖 <a href="https://zhuanlan.zhihu.com/p/495262462" target="_blank" rel="noopener">网站低代码开发</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖长大后，如果是时间修剪了我们的好奇心，我们应该责怪时间吗？-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖半导体行业的组成-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖Weylus – 共享屏幕，将平板作为电脑触摸屏使用[Win/macOS/Linux]-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖跨平台开发 <a href="https://beeware.org/" target="_blank" rel="noopener">BeeWare</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖资本论复旦大学-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖 Linux三剑客-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖pdf补丁丁-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖 <a href="https://www.wdbyte.com/java/char-image.html_1-%E5%AD%97%E7%AC%A6%E5%9B%BE%E6%A1%88%E6%80%9D%E8%B7%AF" target="_blank" rel="noopener">字符作画，我用字符画个冰墩墩 | 未读代码</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖 <a href="https://zhuanlan.zhihu.com/p/474337723?utm_source=ZHShareTargetIDMore&amp;utm_medium=social&amp;utm_oi=619610399826382848" target="_blank" rel="noopener">一文让你读懂Linux五大模块内核源码，内核整体架构设计（超详细）</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖 <a href="https://zhuanlan.zhihu.com/p/483731291?utm_source=ZHShareTargetIDMore&amp;utm_medium=social&amp;utm_oi=619610399826382848" target="_blank" rel="noopener">学习数学思维推荐阅读的五本数学书籍</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖Snapdrop for Android – 在电脑与 Android 手机间互传文件-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖Photoview – 支持人脸识别的开源、自托管本地相册-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖GitHub - LibrePhotos/librephotos: A self-hosted open source photo management service. This is the repository of the backend.-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖 <a href="https://www.cnblogs.com/imxiaobei/p/13619630.html" target="_blank" rel="noopener">一文搞懂后台高性能服务器设计的常见套路, BAT 高频面试系列 - 编程指北 - 博客园</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖 <a href="https://www.appinn.com/dual-subtitles/" target="_blank" rel="noopener">YouTube™ 双字幕 - 显示双语字幕（包括自动翻译）、字幕下载，以及自定义字幕样式[Chrome/Edge] - 小众软件</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖 <a href="https://mp.weixin.qq.com/s/cd-uS5NDIreT02GaHpdxlw" target="_blank" rel="noopener">一文搞懂WiFi的所有知识点</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a><br>🔖 <a href="https://zhuanlan.zhihu.com/p/122523174" target="_blank" rel="noopener">Doxygen 中文文档</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W29.md">C日常/2022-W29.md</a></p><h1>202209 月度</h1><h2 id="🔖WireGuard-基础教程：wg-quick-路由策略解读"><a class="header-anchor" href="#🔖WireGuard-基础教程：wg-quick-路由策略解读">¶</a>🔖<a href="https://icloudnative.io/posts/linux-routing-of-wireguard/" target="_blank" rel="noopener">WireGuard 基础教程：wg-quick 路由策略解读</a></h2><p>pubdata:2022-08-31 01:06:37markdate:2022-09-03 06:23:25.656749</p><h2 id="🔖微软官方超实用-15-小工具集-PowerToys-v0-62-0-发布，新增文本提取器-OCR-功能"><a class="header-anchor" href="#🔖微软官方超实用-15-小工具集-PowerToys-v0-62-0-发布，新增文本提取器-OCR-功能">¶</a>🔖<a href="https://www.appinn.com/powertoys-v0-62-0/" target="_blank" rel="noopener">微软官方超实用 15+ 小工具集 PowerToys v0.62.0 发布，新增文本提取器 OCR 功能</a></h2><p>pubdata:2022-09-07 04:11:14markdate:2022-09-08 04:19:59.942860</p><h2 id="🔖Stream-Deck-太贵了？触屏音箱也能成为你的直播助手"><a class="header-anchor" href="#🔖Stream-Deck-太贵了？触屏音箱也能成为你的直播助手">¶</a>🔖<a href="https://sspai.com/post/75789" target="_blank" rel="noopener">Stream Deck 太贵了？触屏音箱也能成为你的直播助手</a></h2><p>pubdata:2022-09-19 06:31:44markdate:2022-09-21 03:28:05.514939</p><h2 id="统计-✅-0-📅-2-🔖-10"><a class="header-anchor" href="#统计-✅-0-📅-2-🔖-10">¶</a>统计 ✅ : 0 📅 : 2 🔖 : 10</h2><h2 id="✅-0"><a class="header-anchor" href="#✅-0">¶</a>✅ : 0</h2><h2 id="📅-2"><a class="header-anchor" href="#📅-2">¶</a>📅 : 2</h2><p>📅升级电脑-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W35.md">C日常/2022-W35.md</a><br>📅 添加rss-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W33.md">C日常/2022-W33.md</a></p><h2 id="🔖-10"><a class="header-anchor" href="#🔖-10">¶</a>🔖 : 10</h2><p>🔖 <a href="https://www.appinn.com/umi-ocr/" target="_blank" rel="noopener">Umi-OCR - 免费的离线 OCR 文字识别软件[Windows] - 小众软件</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W36.md">C日常/2022-W36.md</a><br>🔖 设计模式-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W36.md">C日常/2022-W36.md</a><br>🔖 苏炳添向母校捐赠100万元！-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W36.md">C日常/2022-W36.md</a><br>🔖 <a href="https://github.com/dlvhdr/gh-dash" target="_blank" rel="noopener">gh-dash</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W36.md">C日常/2022-W36.md</a><br>🔖 <a href="https://nginxproxymanager.com/" target="_blank" rel="noopener">Nginx Proxy Manager</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W36.md">C日常/2022-W36.md</a><br>🔖1、<a href="https://knots3d.com/knots/en_us/ALL" target="_blank" rel="noopener">Knots 3D</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W33.md">C日常/2022-W33.md</a><br>🔖 <a href="https://m.runoob.com/typescript/" target="_blank" rel="noopener">TypeScript 教程 | 菜鸟教程</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W33.md">C日常/2022-W33.md</a><br>🔖 <a href="https://m.runoob.com/js/" target="_blank" rel="noopener">Javascript 教程 | 菜鸟教程</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W33.md">C日常/2022-W33.md</a><br>🔖 Makefile-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W33.md">C日常/2022-W33.md</a><br>🔖 <a href="https://www.zhihu.com/question/450738311/answer/2635126508?utm_medium=social&amp;utm_oi=619610399826382848&amp;utm_psn=1545021439438381056&amp;utm_source=ZHShareTargetIDMore" target="_blank" rel="noopener">windows 有什么好用的截图软件？ - 知乎</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W33.md">C日常/2022-W33.md</a></p><h1>202210 月度</h1><h2 id="🔖一日一技｜Obsidian-Command-进阶用法三则"><a class="header-anchor" href="#🔖一日一技｜Obsidian-Command-进阶用法三则">¶</a>🔖<a href="https://sspai.com/post/75847" target="_blank" rel="noopener">一日一技｜Obsidian Command 进阶用法三则</a></h2><p>pubdata:2022-10-01 07:00:00markdate:2022-10-08 11:41:38.979766</p><h2 id="🔖用代码编辑器进行知识管理：我用-VSCode-构建自己的笔记系统"><a class="header-anchor" href="#🔖用代码编辑器进行知识管理：我用-VSCode-构建自己的笔记系统">¶</a>🔖<a href="https://sspai.com/post/75940" target="_blank" rel="noopener">用代码编辑器进行知识管理：我用 VSCode 构建自己的笔记系统</a></h2><p>pubdata:2022-09-28 03:29:57markdate:2022-10-09 04:14:05.692239</p><h2 id="统计-✅-0-📅-2-🔖-8"><a class="header-anchor" href="#统计-✅-0-📅-2-🔖-8">¶</a>统计 ✅ : 0 📅 : 2 🔖 : 8</h2><h2 id="✅-0-2"><a class="header-anchor" href="#✅-0-2">¶</a>✅ : 0</h2><h2 id="📅-2-2"><a class="header-anchor" href="#📅-2-2">¶</a>📅 : 2</h2><p>📅 转载一下-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W36.md">C日常/2022-W36.md</a><br>📅 tracker更新-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W36.md">C日常/2022-W36.md</a></p><h2 id="🔖-8"><a class="header-anchor" href="#🔖-8">¶</a>🔖 : 8</h2><p>🔖肝下50万字的《Linux内核精通》笔记，你的底层原理水平将从入门到入魔【建议收藏】-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W36.md">C日常/2022-W36.md</a><br>🔖计算机组成原理(万字爆肝整理)-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W36.md">C日常/2022-W36.md</a><br>🔖 <a href="https://xiaolincoding.com/network/" target="_blank" rel="noopener">图解网络介绍</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W37.md">C日常/2022-W37.md</a><br>🔖 <a href="https://refactoringguru.cn/design-patterns" target="_blank" rel="noopener">常用设计模式有哪些？</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W37.md">C日常/2022-W37.md</a><br>🔖 智能家庭网关-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W37.md">C日常/2022-W37.md</a><br>🔖 <a href="https://sadh.life/post/builtins/" target="_blank" rel="noopener">Understanding all of Python, through its builtins</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W37.md">C日常/2022-W37.md</a><br>🔖 操作系统自学-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W37.md">C日常/2022-W37.md</a><br>🔖 机器人计划-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W37.md">C日常/2022-W37.md</a></p><h1>202211 月度</h1><h2 id="🔖微软官方小工具更新，这些新特性你或许也能用得上"><a class="header-anchor" href="#🔖微软官方小工具更新，这些新特性你或许也能用得上">¶</a>🔖<a href="https://sspai.com/post/76649" target="_blank" rel="noopener">微软官方小工具更新，这些新特性你或许也能用得上</a></h2><p>pubdata:2022-11-06 03:40:00markdate:2022-11-17 17:18:09.571032</p><h1>202212 月度</h1><h2 id="🔖TextLocator-–-卖萌的小老头：低-CPU-占用的本地文档全文搜索工具-Win"><a class="header-anchor" href="#🔖TextLocator-–-卖萌的小老头：低-CPU-占用的本地文档全文搜索工具-Win">¶</a>🔖<a href="https://www.appinn.com/textlocator/" target="_blank" rel="noopener">TextLocator – 卖萌的小老头：低 CPU 占用的本地文档全文搜索工具[Win]</a></h2><p>pubdata:2022-11-30 08:25:46markdate:2022-12-04 02:42:46.065650</p><h2 id="🔖OpenSearcher-–-开源的全文搜索工具：支持-Word、PPT、PDF，以及电子书-ePub、Mobi-等格式-Windows"><a class="header-anchor" href="#🔖OpenSearcher-–-开源的全文搜索工具：支持-Word、PPT、PDF，以及电子书-ePub、Mobi-等格式-Windows">¶</a>🔖<a href="https://www.appinn.com/opensearcher/" target="_blank" rel="noopener">OpenSearcher – 开源的全文搜索工具：支持 Word、PPT、PDF，以及电子书 ePub、Mobi 等格式[Windows]</a></h2><p>pubdata:2022-12-01 07:31:17markdate:2022-12-04 02:42:48.883434</p><h2 id="🔖App-1-入门-Android-自动化，它比-Tasker-更好上手：MacroDroid"><a class="header-anchor" href="#🔖App-1-入门-Android-自动化，它比-Tasker-更好上手：MacroDroid">¶</a>🔖<a href="https://sspai.com/post/77077" target="_blank" rel="noopener">App+1 | 入门 Android 自动化，它比 Tasker 更好上手：MacroDroid</a></h2><p>pubdata:2022-12-02 06:30:00markdate:2022-12-04 04:03:56.824102</p><h2 id="🔖为纸质书籍进行数字备份：如何制作一本功能完备的-PDF-电子书"><a class="header-anchor" href="#🔖为纸质书籍进行数字备份：如何制作一本功能完备的-PDF-电子书">¶</a>🔖<a href="https://sspai.com/post/77118" target="_blank" rel="noopener">为纸质书籍进行数字备份：如何制作一本功能完备的 PDF 电子书</a></h2><p>pubdata:2022-12-06 06:34:06markdate:2022-12-08 13:52:36.058996</p><h2 id="🔖找笔记方便、写作又给力的知识库，我是这么搭建出来的"><a class="header-anchor" href="#🔖找笔记方便、写作又给力的知识库，我是这么搭建出来的">¶</a>🔖<a href="https://sspai.com/post/77144" target="_blank" rel="noopener">找笔记方便、写作又给力的知识库，我是这么搭建出来的</a></h2><p>pubdata:2022-12-09 06:32:24markdate:2022-12-12 05:12:48.101671</p><h2 id="🔖如何满足小众的录屏需求？自己配置-FFmpeg-解决问题"><a class="header-anchor" href="#🔖如何满足小众的录屏需求？自己配置-FFmpeg-解决问题">¶</a>🔖<a href="https://sspai.com/post/76637" target="_blank" rel="noopener">如何满足小众的录屏需求？自己配置 FFmpeg 解决问题</a></h2><p>pubdata:2022-11-05 03:00:00markdate:2022-12-24 03:02:42.639305</p><h2 id="🔖家用NAS推荐买什么价位的？"><a class="header-anchor" href="#🔖家用NAS推荐买什么价位的？">¶</a>🔖<a href="http://www.zhihu.com/question/566650643/answer/2809190517?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title" target="_blank" rel="noopener">家用NAS推荐买什么价位的？</a></h2><p>pubdata:2022-12-21 09:26:21markdate:2022-12-25 03:49:49.009390</p><p>统计 ✅ : 1 📅 : 6 🔖 : 21</p><!-- more --><h2 id="✅-1-2"><a class="header-anchor" href="#✅-1-2">¶</a>✅ : 1</h2><p>✅ 🔖 <a href="https://www.zhihu.com/question/23564190/answer/2795830055?utm_id=0" target="_blank" rel="noopener">如何更深入地学习 Linux？ - michaelli 的回答 - 知乎</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W49.md">C日常/2022-W49.md</a></p><h2 id="📅-6"><a class="header-anchor" href="#📅-6">¶</a>📅 : 6</h2><p>📅 使用draw io和 cflow 生成函数调用图 单文件-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W50.md">C日常/2022-W50.md</a><br>📅 ios图像转存到本地-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W47.md">C日常/2022-W47.md</a><br>📅 学习智能家庭软件-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W47.md">C日常/2022-W47.md</a><br>📅 🔖 <a href="https://zhuanlan.zhihu.com/p/36279445?utm_id=0" target="_blank" rel="noopener">Vim 8 中 C/C++ 符号索引：GTags 篇</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W49.md">C日常/2022-W49.md</a><br>📅Vim中使用gtags-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W49.md">C日常/2022-W49.md</a><br>📅  <a href="https://blog.csdn.net/tian154731/article/details/113842348" target="_blank" rel="noopener">安卓手机抢茅台程序_JAVA学无止境的博客-CSDN博客</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W42.md">C日常/2022-W42.md</a></p><h2 id="🔖-21"><a class="header-anchor" href="#🔖-21">¶</a>🔖 : 21</h2><p>🔖 <a href="https://www.appinn.com/opensearcher/" target="_blank" rel="noopener">OpenSearcher - 开源的全文搜索工具：支持 Word、PPT、PDF，以及电子书 ePub、Mobi 等格式[Windows] - 小众软件</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W48.md">C日常/2022-W48.md</a><br>🔖 <a href="https://m.bilibili.com/video/av848443011" target="_blank" rel="noopener">【英雄联盟手游】装备属性及效果介绍-哔哩哔哩</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W43.md">C日常/2022-W43.md</a><br>🔖 电影 《走着瞧》马-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W43.md">C日常/2022-W43.md</a><br>🔖冰雪暴  -&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W43.md">C日常/2022-W43.md</a><br>🔖 <a href="https://blog.csdn.net/lyndon_li/article/details/122163468" target="_blank" rel="noopener">cflow——C语言函数调用关系生成器_Li-Yongjun的博客-CSDN博客_cflow</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W50.md">C日常/2022-W50.md</a><br>🔖 卡尔曼滤波https://www.zhihu.com/question/41823401/answer/2799679942-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W50.md">C日常/2022-W50.md</a><br>🔖 tmux vim剪切板-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W50.md">C日常/2022-W50.md</a><br>🔖 linux gdb Qemu调试-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W50.md">C日常/2022-W50.md</a><br>🔖 <a href="https://blog.csdn.net/jiangjun00000000/article/details/118277732" target="_blank" rel="noopener">如何在Debian10的Gnome桌面系统中安装并使能托盘图标_萌虎下山了的博客-CSDN博客_gnome 托盘</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W50.md">C日常/2022-W50.md</a><br>🔖 <a href="https://blog.csdn.net/allway2/article/details/122160151" target="_blank" rel="noopener">如何在 Debian 11 Bullseye Linux 上安装和配置 KVM_allway2的博客-CSDN博客_debian kvm</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W50.md">C日常/2022-W50.md</a><br>🔖 <a href="https://blog.csdn.net/u010330109/article/details/121855809" target="_blank" rel="noopener">Debian 11 gnome 桌面设置显示图标_远远看看山的博客-CSDN博客_debian显示桌面图表</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W50.md">C日常/2022-W50.md</a><br>🔖 <a href="https://github.com/mli/autocut" target="_blank" rel="noopener">AutoCut</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W47.md">C日常/2022-W47.md</a><br>🔖 <a href="https://sspai.com/post/76899" target="_blank" rel="noopener">找不到现成的字幕？Whisper 让不懂外语的你也能看懂日剧 - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W47.md">C日常/2022-W47.md</a><br>🔖 canva平面设计-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W47.md">C日常/2022-W47.md</a><br>🔖 <a href="https://sspai.com/post/76922" target="_blank" rel="noopener">我们为什么需要 Matter：飞利浦 Hue 的跨平台联动探索记录 - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W47.md">C日常/2022-W47.md</a><br>🔖 <a href="https://sspai.com/post/75567" target="_blank" rel="noopener">选对插件，让简悦也可以重器轻用 - 少数派</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W47.md">C日常/2022-W47.md</a><br>🔖 算法可视化-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W49.md">C日常/2022-W49.md</a><br>✅ 🔖 <a href="https://www.zhihu.com/question/23564190/answer/2795830055?utm_id=0" target="_blank" rel="noopener">如何更深入地学习 Linux？ - michaelli 的回答 - 知乎</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W49.md">C日常/2022-W49.md</a><br>📅 🔖 <a href="https://zhuanlan.zhihu.com/p/36279445?utm_id=0" target="_blank" rel="noopener">Vim 8 中 C/C++ 符号索引：GTags 篇</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W49.md">C日常/2022-W49.md</a><br>🔖<a href="https://www.1point3acres.com/bbs/thread-918311-1-1.html" target="_blank" rel="noopener">50岁码农面试记</a>（中文）-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W42.md">C日常/2022-W42.md</a><br>🔖 <a href="https://github.com/FavioVazquez/ds-cheatsheets" target="_blank" rel="noopener">https://github.com/FavioVazquez/ds-cheatsheets</a>-&gt;<a href="C%E6%97%A5%E5%B8%B8/2022-W42.md">C日常/2022-W42.md</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年度汇报，记录一下过去一年的工作和生活。&lt;/p&gt;
    
    </summary>
    
      <category term="年度汇报" scheme="https://talengu.github.io/public/categories/%E5%B9%B4%E5%BA%A6%E6%B1%87%E6%8A%A5/"/>
    
    
      <category term="年度汇报" scheme="https://talengu.github.io/public/tags/%E5%B9%B4%E5%BA%A6%E6%B1%87%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>rss翻译github脚本</title>
    <link href="https://talengu.github.io/public/2022/12/21/rss_translate/"/>
    <id>https://talengu.github.io/public/2022/12/21/rss_translate/</id>
    <published>2022-12-21T12:39:04.000Z</published>
    <updated>2022-12-21T12:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><p>自动翻译 rss，我利用github action开发了一下， 供大家玩乐。</p><p>比如将： <a href="http://www.mckinsey.com/insights/rss" target="_blank" rel="noopener">http://www.mckinsey.com/insights/rss</a> -&gt; <a href="https://talengu.github.io/rss-translate/rss/mckinsey_rss.xml">mckinsey_rss.xml</a> <img src="/public/2022/12/21/rss_translate/image-20230202020105514.png" alt></p><a id="more"></a><p>将需要翻译的rss 连接放到 <a href="https://github.com/talengu/rss-translate/edit/main/test.ini" target="_blank" rel="noopener">test.ini</a> 配置 ，并提交。</p><p><img src="/public/2022/12/21/rss_translate/image-20230202020439917.png" alt></p><ul><li>name：输出的xml名字</li><li>url：需要转换的url</li><li>max：输出xml 最大item数</li><li>action：设置语言转换，默认auto转中文。多语言支持 action = “auto”，这里可以换成多种语言，支持语言列表见 <a href="https://pygtrans.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">pygtrans</a> 如：action = &quot;en-&gt;zh-CN&quot;</li></ul><p>在 <a href="https://talengu.github.io/rss-translate/">https://talengu.github.io/rss-translate/</a> 等待生成连接即可。</p><p><img src="/public/2022/12/21/rss_translate/image-20230202020620284.png" alt></p><p>注：</p><ul><li>需要github账号，修改配置文件。</li><li>更新周期为1天，且为随机时间点。通过github action实现，见 <a href="https://github.com/talengu/rss-translate/blob/main/.github/cron_random.py" target="_blank" rel="noopener">random.py</a></li><li>多语言支持 action = “auto”，这里可以换成多种语言，支持语言列表见 <a href="https://pygtrans.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">pygtrans</a> 如：action = &quot;en-&gt;zh-CN&quot;</li></ul><p>欢迎大家使用！！！🐱</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;¶&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;自动翻译 rss，我利用github action开发了一下， 供大家玩乐。&lt;/p&gt;
&lt;p&gt;比如将：
 &lt;a href=&quot;http://www.mckinsey.com/insights/rss&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.mckinsey.com/insights/rss&lt;/a&gt; -&amp;gt; &lt;a href=&quot;https://talengu.github.io/rss-translate/rss/mckinsey_rss.xml&quot;&gt;mckinsey_rss.xml&lt;/a&gt;
 
&lt;img src=&quot;/public/2022/12/21/rss_translate/image-20230202020105514.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="信息收集" scheme="https://talengu.github.io/public/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="工具" scheme="https://talengu.github.io/public/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="rss" scheme="https://talengu.github.io/public/tags/rss/"/>
    
  </entry>
  
  <entry>
    <title>c结构体对齐</title>
    <link href="https://talengu.github.io/public/2022/12/15/c_struct/"/>
    <id>https://talengu.github.io/public/2022/12/15/c_struct/</id>
    <published>2022-12-15T12:00:00.000Z</published>
    <updated>2022-12-15T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><p>c语言的字节对齐，机器的大小段模式的理解。</p><p>计算机存储的基础知识。</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tm</span>&#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a;</span><br><span class="line">&#125;TM;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">hp</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b;</span><br><span class="line">TM *t;</span><br><span class="line"><span class="keyword">unsigned</span> short c;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> d;</span><br><span class="line">&#125;HP;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HP hp=&#123;</span><br><span class="line">.a=<span class="number">0xa1</span>,</span><br><span class="line">.b=<span class="number">0xb1</span>,</span><br><span class="line">.c=<span class="number">0xc1c2</span>,</span><br><span class="line">.d=<span class="number">0x1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *p=&amp;hp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sizeof(HP) = %lu\n"</span>,<span class="keyword">sizeof</span>(HP) );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(HP); ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02x "</span>,p[i] );</span><br><span class="line"><span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">8</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> d=hp.d;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//OUT</span><br><span class="line">|| sizeof(HP) = 32</span><br><span class="line">|| a1 b1 00 00 00 00 00 00 </span><br><span class="line">|| 00 00 00 00 00 00 00 00 </span><br><span class="line">|| c2 c1 00 00 00 00 00 00 </span><br><span class="line">|| 01 00 00 00 00 00 00 00 </span><br><span class="line">|| 1</span><br></pre></td></tr></table></figure><h2 id="存储方式"><a class="header-anchor" href="#存储方式">¶</a>存储方式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HP hp=&#123;</span><br><span class="line">.a=<span class="number">0xa1</span>,</span><br><span class="line">.b=<span class="number">0xb1</span>,</span><br><span class="line">.c=<span class="number">0xc1c2</span>,</span><br><span class="line">.d=<span class="number">0xd1d2d3d4</span>,<span class="comment">//&lt;-0x1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//OUT</span><br><span class="line">|| sizeof(HP) = 32</span><br><span class="line">|| a1 b1 00 00 00 00 00 00 </span><br><span class="line">|| 00 00 00 00 00 00 00 00 </span><br><span class="line">|| c2 c1 00 00 00 00 00 00 </span><br><span class="line">|| d4 d3 d2 d1 00 00 00 00 </span><br><span class="line">|| 3520254932</span><br></pre></td></tr></table></figure><h2 id="字节对齐"><a class="header-anchor" href="#字节对齐">¶</a>字节对齐</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将 d 改为 d:1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">hp</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> a;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b;</span><br><span class="line">TM *t;</span><br><span class="line"><span class="keyword">unsigned</span> short c;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> d:<span class="number">1</span>; <span class="comment">//&lt;--- unsigned long d;</span></span><br><span class="line">&#125;HP;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//OUT</span><br><span class="line">|| 1 warning generated.</span><br><span class="line">|| sizeof(HP) = 24</span><br><span class="line">|| a1 b1 00 00 00 00 00 00 </span><br><span class="line">|| 00 00 00 00 00 00 00 00 </span><br><span class="line">|| c2 c1 01 00 00 00 00 00 </span><br><span class="line">|| 1</span><br></pre></td></tr></table></figure><p>少占用了一个8字节。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;¶&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;c语言的字节对齐，机器的大小段模式的理解。&lt;/p&gt;
&lt;p&gt;计算机存储的基础知识。&lt;/p&gt;
    
    </summary>
    
      <category term="c语言" scheme="https://talengu.github.io/public/categories/c%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c语言" scheme="https://talengu.github.io/public/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>「转」Linux 内核精通</title>
    <link href="https://talengu.github.io/public/2022/12/15/%E7%AE%80%E6%82%A6%E5%90%8C%E6%AD%A5md/%E8%82%9D%E4%B8%8B%2050%20%E4%B8%87%E5%AD%97%E7%9A%84%E3%80%8ALinux%20%E5%86%85%E6%A0%B8%E7%B2%BE%E9%80%9A%E3%80%8B%E7%AC%94%E8%AE%B0%EF%BC%8C%E4%BD%A0%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E6%B0%B4%E5%B9%B3%E5%B0%86%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%AD%94%E3%80%90%E5%BB%BA%E8%AE%AE%E6%94%B6%E8%97%8F%E3%80%91/"/>
    <id>https://talengu.github.io/public/2022/12/15/简悦同步md/肝下 50 万字的《Linux 内核精通》笔记，你的底层原理水平将从入门到入魔【建议收藏】/</id>
    <published>2022-12-15T12:00:00.000Z</published>
    <updated>2022-12-15T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="https://zhuanlan.zhihu.com/p/572266986" target="_blank" rel="noopener">zhuanlan.zhihu.com</a></p></blockquote><h2 id="一、为什么要学习-Linux-内核"><a class="header-anchor" href="#一、为什么要学习-Linux-内核">¶</a>一、为什么要学习 Linux 内核</h2><a id="more"></a><p>大部分程序员可能永远没有机会开发 Linux 内核或者驱动 Linux，那么我们为什么还需要学习 Linux 内核呢？Linux 的源代码和架构都是开放的，我们可以学到很多操作系统的概念和实现原理。Linux 的设计哲学体系继承了 UNIX，现在整个设计体系相当稳定和简化，这是大部分服务器使用 Linux 的重要原因。</p><p><strong>那学习 Linux 内核的原因就在于此。</strong></p><p>进一步了解内核的原理，有助于你更好地使用命令和程序设计，让你的面试和开发更上一层楼。但是不建议直接看源代码，因为 Linux 代码太大，容易丢失。</p><p>而最好的办法是，先了解一下 Linux 内核机制，知道基本的原理与流程。</p><p>不过，Linux 内核机制也非常复杂，而且其中互相关联。</p><p><img src="https://pic1.zhimg.com/v2-f34e4013f744ab349c160d1b3564f68c_r.jpg" alt></p><p>比如说，进程运行要分配内存，内存映射涉及文件的关联，文件的读写需要经过块设备，从文件中加载代码才能运行起来进程。这些知识点要反复对照，才能理清。</p><p><strong>但是一旦攻克！你会发现 Linux 这个复杂的系统开始透明起来。</strong></p><h2 id="二、如何学习-Linux-内核？"><a class="header-anchor" href="#二、如何学习-Linux-内核？">¶</a>二、如何学习 Linux 内核？</h2><p>内核的知识就像下面的绳结一样，一环扣一环，我们要解开它们，就必须要先找到线头也就是内核中的函数接口。初学阶段，我们一般不深入的研究内核代码，会使用内核的接口函数就不错了。</p><p>下面提供了如何学习这些内核函数的方法，就像解绳子一样</p><p><strong>在我们学习 Linux 内核之前，我们首先需要掌握以下几点：</strong></p><p><a href="https://zhuanlan.zhihu.com/p/440423464" target="_blank" rel="noopener">(1) 如何学习内核，先了解 Linux 内核由哪些组成？</a></p><p><a href="https://zhuanlan.zhihu.com/p/440423464" target="_blank" rel="noopener">(2) 须知 Linux 内核源码（下载的链接 ）组织结构？</a></p><p>(3) <a href="https://zhuanlan.zhihu.com/p/440423464" target="_blank" rel="noopener">重点需要学习地知识点有哪些？</a></p><p>(4) <a href="https://link.zhihu.com/?target=https%3A//docs.qq.com/doc/DTXFKZlZ4YmFYQWZS" target="_blank" rel="noopener">最后依据我为大家提供的的学习资料，开启我们的 Linux 内核学习之旅。</a></p><p><a href="https://zhuanlan.zhihu.com/p/437667448" target="_blank" rel="noopener">(5) 全网最牛 Linux 内核 Makefile 系统文件详解 (纯文字代码)</a></p><p><a href="https://zhuanlan.zhihu.com/p/436340295" target="_blank" rel="noopener">(6) 全网最详细的 Intel CPU 体系结构分析 (内核源码)</a></p><p><a href="https://zhuanlan.zhihu.com/p/438248184" target="_blank" rel="noopener">(7) 深入理解 Linux Kernel 内核整体架构 (图文详解)</a></p><p><a href="https://zhuanlan.zhihu.com/p/499637419" target="_blank" rel="noopener">(8)QEMU 调试 Linux 内核环境搭建</a></p><p><a href="https://zhuanlan.zhihu.com/p/469270699" target="_blank" rel="noopener">(9) 网友说 Linux 驱动讲不彻底，原来这才是 Linux 驱动</a></p><p><a href="https://zhuanlan.zhihu.com/p/419643250" target="_blank" rel="noopener">(10) 一文让你深度了解 Linux 内核架构和工作原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/477292559" target="_blank" rel="noopener">(11) 从 Linux 内核看 socket 底层的本质 (IO)</a></p><p><a href="https://zhuanlan.zhihu.com/p/458996875" target="_blank" rel="noopener">(12)Linux 用户空间与内核空间通信 (Netlink 通信机制)</a></p><h2 id="二，学习资料"><a class="header-anchor" href="#二，学习资料">¶</a>二，学习资料</h2><h3 id="2-1-操作系统原理"><a class="header-anchor" href="#2-1-操作系统原理">¶</a><strong>2.1 操作系统原理</strong></h3><p>【 强烈推荐阅读】<a href="https://zhuanlan.zhihu.com/p/442771856" target="_blank" rel="noopener">一文带你彻底了解，零拷贝 Zero-Copy 技术 (图解)</a></p><p><a href="https://zhuanlan.zhihu.com/p/440820446" target="_blank" rel="noopener">Linux 操作系统学习——启动</a></p><p><a href="https://zhuanlan.zhihu.com/p/440825051" target="_blank" rel="noopener">Linux 操作系统学习——内核运行</a></p><p><a href="https://zhuanlan.zhihu.com/p/440829030" target="_blank" rel="noopener">Linux 操作系统学习——内核初始化</a></p><p><a href="https://zhuanlan.zhihu.com/p/446635858" target="_blank" rel="noopener">操作系统原理 (一)：操作系统原理与概述 (流程图)</a></p><p><a href="https://zhuanlan.zhihu.com/p/434528439" target="_blank" rel="noopener">操作系统原理 (二)：Linux 操作系统基础的常用命令</a></p><p><a href="https://zhuanlan.zhihu.com/p/434511399" target="_blank" rel="noopener">操作系统原理 (三)：Linux 操作系统 I/O 机制原理 (流程图详解)</a></p><p><a href="https://zhuanlan.zhihu.com/p/448266123" target="_blank" rel="noopener">操作系统原理 (四)：内存管理 RAID 磁盘阵列与配置</a></p><p><a href="https://zhuanlan.zhihu.com/p/448258669" target="_blank" rel="noopener">操作系统原理 (五)：内存管理之磁盘高速缓存机制原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/448147542" target="_blank" rel="noopener">操作系统原理 (六)：存储管理之页式、段式、段页式存储</a></p><p><a href="https://zhuanlan.zhihu.com/p/447668827" target="_blank" rel="noopener">系统操作原理 (七)：进程的状态和转换 (五态模型)</a></p><p><a href="https://zhuanlan.zhihu.com/p/447720544" target="_blank" rel="noopener">操作系统原理 (八)：进程同步的几种方式及基本原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/447737355" target="_blank" rel="noopener">操作系统原理 (九)：处理器调度基本准则和实现原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/448105261" target="_blank" rel="noopener">系统操作原理 (十)：多进程，多线程，并发执行中的死锁问题</a></p><p><a href="https://zhuanlan.zhihu.com/p/447720544" target="_blank" rel="noopener">系统操作原理 (十一)：操作系统原理：进程同步的几种方式及基本原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/448147542" target="_blank" rel="noopener">系统操作原理 (十二)：趣谈操作系统原理，存储管理之页式、段式、段页式存储</a></p><p><a href="https://zhuanlan.zhihu.com/p/452839400" target="_blank" rel="noopener">系统操作原理 (十三)：操作系统：通过实战理解 CPU 上下文切换</a></p><p><a href="https://zhuanlan.zhihu.com/p/449157752" target="_blank" rel="noopener">汇编语言基础 (十一)：汇编语言基础知识 (图文代码)</a></p><p><a href="https://zhuanlan.zhihu.com/p/449787476" target="_blank" rel="noopener">汇编语言入门 (十二)：汇编指令入门级整理，这些你必须要知道</a></p><p><a href="https://zhuanlan.zhihu.com/p/449565154" target="_blank" rel="noopener">汇编语言指令 (十三)：汇编语言的所有指令总结，一篇就够了</a></p><p><a href="https://zhuanlan.zhihu.com/p/449582466" target="_blank" rel="noopener">汇编语言进阶 (十四)：ARM 体系结构处理器机制原理与实现</a></p><p><a href="https://zhuanlan.zhihu.com/p/449816076" target="_blank" rel="noopener">汇编语言进阶 (十五)： ARM 指令集与汇编语言程序设计</a></p><h3 id="2-2-内存管理专题"><a class="header-anchor" href="#2-2-内存管理专题">¶</a><strong>2.2 内存管理专题</strong></h3><p>【 强烈推荐阅读】<a href="https://zhuanlan.zhihu.com/p/442268413" target="_blank" rel="noopener">尽情阅读，技术进阶，详解 mmap 原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/429118261" target="_blank" rel="noopener">内存是什么？一文让你了解内存是怎么实现的</a></p><p><a href="https://zhuanlan.zhihu.com/p/449071725" target="_blank" rel="noopener">嵌入式开发必备技能，Linux 内核源码组织结构</a></p><p><a href="https://zhuanlan.zhihu.com/p/442258814" target="_blank" rel="noopener">一文了解 Linux 内存管理，malloc、free 实现原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/456064945" target="_blank" rel="noopener">内存管理系列 (一)：Linux 操作系统内存管理 (思维导图详解)</a></p><p><a href="https://zhuanlan.zhihu.com/p/454577271" target="_blank" rel="noopener">内存管理系列 (二)：Linux 内存管理原理知识大总结</a></p><p><a href="https://zhuanlan.zhihu.com/p/454779105" target="_blank" rel="noopener">内存管理系列 (三)：学完操作系统内存管理，能回答这 8 个问题吗？</a></p><p><a href="https://zhuanlan.zhihu.com/p/454564295" target="_blank" rel="noopener">内存管理系列 (四)：理解 Memory barrier（内存屏障）</a></p><p><a href="https://zhuanlan.zhihu.com/p/453390459" target="_blank" rel="noopener">内存管理系列 (五)：内存回收之 LRU 链表机制原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/453385879" target="_blank" rel="noopener">内存管理系列 (六)：虚拟内存和物理内存机制原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/452713026" target="_blank" rel="noopener">内存管理系列 (七)：Malloc 缺页中断不同情况处理总结及反向映射 RMAP</a></p><p><a href="https://zhuanlan.zhihu.com/p/452686042" target="_blank" rel="noopener">内存管理系列 (八)：C/C++ 开发中的 Malloc 函数的实现原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/452423278" target="_blank" rel="noopener">内存管理系列 (九)：深入理解 glibc malloc：内存分配器实现原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/452415871" target="_blank" rel="noopener">内存管理系列 (十)：操作系统是如何对内存进行管理的，内存与 CPU 之间的关系</a></p><p><a href="https://zhuanlan.zhihu.com/p/451886800" target="_blank" rel="noopener">内存管理系列 (十一)：为什么 Linux 需要虚拟内存，虚拟内存对操作系统有哪些作用</a></p><p><a href="https://zhuanlan.zhihu.com/p/451881734" target="_blank" rel="noopener">内存管理系列 (十二)：用户态内存内存映射函数 Mmap 的好处</a></p><p><a href="https://zhuanlan.zhihu.com/p/451469447" target="_blank" rel="noopener">内存管理系列 (十三)：内存管理：详解虚拟地址空间 - MMU</a></p><p><a href="https://zhuanlan.zhihu.com/p/451468637" target="_blank" rel="noopener">内存管理系列 (十四)：C 语言中的 Malloc/free 是如何分配内存的</a></p><p><a href="https://zhuanlan.zhihu.com/p/451467641" target="_blank" rel="noopener">内存管理系列 (十五)：从虚拟寻址到开源项目，Linux 下的内存管理详解</a></p><p><a href="https://zhuanlan.zhihu.com/p/451405962" target="_blank" rel="noopener">内存管理系列 (十六)：一文带你了解，虚拟内存、内存分页、分段、段页式内存管理</a></p><p><a href="https://zhuanlan.zhihu.com/p/441938447" target="_blank" rel="noopener">内存管理系列 (十七)：Linux 应用程序究竟消耗了多少内存</a></p><p><a href="https://zhuanlan.zhihu.com/p/441918912" target="_blank" rel="noopener">内存管理系列 (十八)：虚拟地址到物理地址，是什么时候开始映射</a></p><p><a href="https://zhuanlan.zhihu.com/p/431277793" target="_blank" rel="noopener">内存管理系列 (十九)：浅析 Linux 内存管理中 SLAB 分配器 (源码分析)</a></p><p><a href="https://zhuanlan.zhihu.com/p/430233534" target="_blank" rel="noopener">内存管理系列 (二十)：基于 Linux 内存管理的内存分配 (伙伴算法和 slab 算法)</a></p><p><a href="https://zhuanlan.zhihu.com/p/429987335" target="_blank" rel="noopener">内存管理系列 (二十一)：探索内存原理的内存映射文件 (图文详解)</a></p><p><a href="https://zhuanlan.zhihu.com/p/483332995" target="_blank" rel="noopener">内存管理系列 (二十二)：吊打字节面试官，CPU 缓存一致性协议 MESI</a></p><p><a href="https://zhuanlan.zhihu.com/p/458935522" target="_blank" rel="noopener">内存管理系列 (二十三)：深入理解 Linux 内核页表映射分页机制原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/474795662" target="_blank" rel="noopener">内存管理系列 (二十四)：谈谈物理内存与虚拟内存之间的映射 (超详细~)</a></p><p><a href="https://zhuanlan.zhihu.com/p/452686042" target="_blank" rel="noopener">内存管理系列 (二十五)：内存管理：C/C++ 开发中的 malloc 函数的实现原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/482776355" target="_blank" rel="noopener">内存管理系列 (二十六)：熬夜肝翻 Linux 内存管理所有知识点 (图解)</a></p><h3 id="2-3-进程管理专题"><a class="header-anchor" href="#2-3-进程管理专题">¶</a>2.3 进程管理专题</h3><p><a href="https://zhuanlan.zhihu.com/p/425886322" target="_blank" rel="noopener">进程管理系列 (一)：Linux 进程管理原理详解 (代码演示)</a></p><p><a href="https://zhuanlan.zhihu.com/p/425931602" target="_blank" rel="noopener">进程管理系列 (二)：十分钟让你像大佬一样快速了解进程状态 (二种模型)</a></p><p><a href="https://zhuanlan.zhihu.com/p/425939661" target="_blank" rel="noopener">进程管理系列 (三)：作为互联网程序员，应该了解 Linux 进程六种状态吗？</a></p><p><a href="https://zhuanlan.zhihu.com/p/426836494" target="_blank" rel="noopener">进程管理系列 (四)：五分钟让你快速了解 Linux 进程管理实时调度与 SMP</a></p><p><a href="https://zhuanlan.zhihu.com/p/426399519" target="_blank" rel="noopener">进程管理系列 (六)：浅析 Linux 的进程优先级 (代码演示)</a></p><p><a href="https://zhuanlan.zhihu.com/p/441558619" target="_blank" rel="noopener">进程管理系列 (七)：进程管理 | 浅析 C 语言中并发同步与原子操作，锁三者是什么关系</a></p><p><a href="https://zhuanlan.zhihu.com/p/441346358" target="_blank" rel="noopener">进程管理系列 (八)：进程管理 | 深入理解 Linux 进程述符和进程状态</a></p><p><a href="https://zhuanlan.zhihu.com/p/442921692" target="_blank" rel="noopener">进程管理系列 (九)：一文读懂 Linux 内核中的任务间调度策略</a></p><p><a href="https://zhuanlan.zhihu.com/p/442916346" target="_blank" rel="noopener">进程管理系列 (十)：Linux 内核之进程和线程的创建和派生</a></p><p><a href="https://zhuanlan.zhihu.com/p/442905446" target="_blank" rel="noopener">进程管理系列 (十一)：基于 Linux 有几种进程状态</a></p><p><a href="https://zhuanlan.zhihu.com/p/455680633" target="_blank" rel="noopener">进程管理系列 (十二)：操作系统的几种 CPU 调度策略</a></p><p><a href="https://zhuanlan.zhihu.com/p/462066025" target="_blank" rel="noopener">进程管理系列 (十二)：Linux 进程管理之调度和进程切换</a></p><p><a href="https://zhuanlan.zhihu.com/p/465574868" target="_blank" rel="noopener">进程管理系列 (十三)：一文搞懂六大进程通信机制原理 (全网最详细)</a></p><p><a href="https://zhuanlan.zhihu.com/p/456631465" target="_blank" rel="noopener">进程管理系列 (十四)：超详细的 Socket 通信原理和实例讲解 (白嫖走起~)</a></p><p><a href="https://zhuanlan.zhihu.com/p/473639031" target="_blank" rel="noopener">进程管理系列 (十五)：这是一份很全很全的 IO 基础知识与概念</a></p><p><a href="https://zhuanlan.zhihu.com/p/472955572" target="_blank" rel="noopener">进程管理系列 (十六)：深入理解 Linux 内核进程的管理与调度 (全知乎最详细)</a></p><h3 id="2-4-网络协议栈专题"><a class="header-anchor" href="#2-4-网络协议栈专题">¶</a><strong>2.4 网络协议栈专题</strong></h3><p>【 强烈推荐阅读】<a href="https://zhuanlan.zhihu.com/p/449869444" target="_blank" rel="noopener">嵌入式必备：如何学习 Linux 内核网络协议栈</a></p><p><a href="https://zhuanlan.zhihu.com/p/460693504" target="_blank" rel="noopener">趣谈网络协议栈 (一)：套接字缓冲区原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/458188649" target="_blank" rel="noopener">趣谈网络协议栈 (二)：数据包是如何处理的过程</a></p><p><a href="https://zhuanlan.zhihu.com/p/453813447" target="_blank" rel="noopener">趣谈网络协议栈 (三)：七层模型下三层数据通信</a></p><p><a href="https://zhuanlan.zhihu.com/p/453814298" target="_blank" rel="noopener">趣谈网络协议栈 (四)：传输的 Arp 报文结构</a></p><p><a href="https://zhuanlan.zhihu.com/p/453814919" target="_blank" rel="noopener">趣谈网络协议栈 (五)：Socket 编程常用函数的原理及代码实现</a></p><p><a href="https://zhuanlan.zhihu.com/p/453815877" target="_blank" rel="noopener">趣谈网络协议栈 (六)：学习 select 和 poll 函数的内核实现</a></p><p><a href="https://zhuanlan.zhihu.com/p/453816689" target="_blank" rel="noopener">趣谈网络协议栈 (七)：Epoll 从用户态到内核态过程分析</a></p><p><a href="https://zhuanlan.zhihu.com/p/444071187" target="_blank" rel="noopener">趣谈网络协议栈 (八)：套接字发送网络数据的过程</a></p><h3 id="2-5-设备驱动专题"><a class="header-anchor" href="#2-5-设备驱动专题">¶</a>2.5 设备驱动专题</h3><p><a href="https://zhuanlan.zhihu.com/p/448718574" target="_blank" rel="noopener">浅谈设备驱动 (一)：操作系统 I/O 流程详解</a></p><p><a href="https://zhuanlan.zhihu.com/p/445188798" target="_blank" rel="noopener">浅谈设备驱动 (二)：Linux 操作系统学习之字符设备</a></p><p><a href="https://zhuanlan.zhihu.com/p/445185233" target="_blank" rel="noopener">浅谈设备驱动 (三)：结合设备信息集合，探究设备和驱动是如何绑定的</a></p><h3 id="2-6-文件系统"><a class="header-anchor" href="#2-6-文件系统">¶</a>2.6 文件系统</h3><p><a href="https://zhuanlan.zhihu.com/p/460393575" target="_blank" rel="noopener">详谈文件系统 (一)：一文让你彻底了解 Linux 内核文件系统 (大总结)</a></p><h3 id="2-7-面试题-经验"><a class="header-anchor" href="#2-7-面试题-经验">¶</a>2.7 面试题 / 经验</h3><p>【 强烈推荐阅读】<a href="https://zhuanlan.zhihu.com/p/458546929" target="_blank" rel="noopener">从事十年嵌入式转内核开发 (23K 到 45K), 给兄弟们的一些建议</a></p><p><a href="https://zhuanlan.zhihu.com/p/456073398" target="_blank" rel="noopener">谈谈 Linux 内核的学习路线，具体要怎么学？</a></p><p><a href="https://zhuanlan.zhihu.com/p/453576978" target="_blank" rel="noopener">2022 年嵌入式开发想进互联网大厂，你技术过硬吗？</a></p><p><a href="https://zhuanlan.zhihu.com/p/452972023" target="_blank" rel="noopener">嵌入式 Linux 内核学习经验总结，一篇让你掌握方法</a></p><p><a href="https://zhuanlan.zhihu.com/p/445363696" target="_blank" rel="noopener">盘点 Linux 内核 (驱动开发，嵌入式，内核人群) 必问的面试题</a></p><p><a href="https://zhuanlan.zhihu.com/p/470952847" target="_blank" rel="noopener">2022 春招大厂 - 嵌入式开发经典笔试面试题目大整理</a></p><h3 id="2-8-内核书籍"><a class="header-anchor" href="#2-8-内核书籍">¶</a>2.8 内核书籍</h3><ul><li>《深入了解 Linux 内核》</li><li>《Linux 就该这么学》</li><li>《Linux 内核完全注释 V3.0 书签版》</li><li>《Linux 命令行大全 - 绍茨 (william E.shotts)》</li><li>《Linux 命令速查手册》</li><li>《Linux 性能优化大师》</li><li>《Linux 环境编程：从应用到内核》</li><li>《Linux 集群和自动化运维 余洪春》</li><li>《Linux 驱动程序开发实例 (第 2 版)》</li><li>《Linux 高级程序设计 (第 3 版)》</li><li>《构建高可用 Linux 服务器 (第 4 版)》</li></ul><p><strong>书籍免费领取地址：</strong><a href="https://link.zhihu.com/?target=https%3A//docs.qq.com/doc/DTkZRWXRFcWx1bWVx" target="_blank" rel="noopener">https://docs.qq.com/doc/DTkZRWXRFcWx1bWVx</a></p><h2 id="三，内核学习路线"><a class="header-anchor" href="#三，内核学习路线">¶</a>三，内核学习路线</h2><p>很多同学对 Linux 接触很少，对 Linux 平台的开发一无所知。现在，趋势越来越表明，作为一个优秀的软件开发者或者计算机 IT 从业者，掌握 Linux 是一个非常重要的谋生资源和手段。接下来我将结合我个人几年的开发经验，谈谈 Linux 的学习方法和学习中应该注意的一些事情，特别是关于 Linux，类 UNIX 系统和开源软件文化。</p><p>就像我刚才说的，很多同学之前可能连 Linux 是什么都不知道，更别说 UNIX 了。所以我们从最基础的一点开始，Linux 和 UNIX 的历史我们就不多说了，直接进入入门学习。</p><p>Linux 入门非常简单。问题是你有没有耐心，有没有爱折腾，有没有不排除重装之类的大修。可以说不折腾是学不好 Linux 的。鸟哥说你要真正了解 Linux 的分区机制，并且对 LVM 的使用相当熟练。不超过 20 次是无法积累 Linux 安装经验的，所以不要怕折腾。</p><p>既然之前大家都用 Windows，我也尽量照顾这些 “菜鸟”。我的推荐，如果你是第一次接触 Linux，那就先在虚拟机里试试。我推荐虚拟机用的 Virtual Box。我不提倡使用 VM，因为 VM 是开源的，是收费的。我不想推广盗版。当然，如果你有足够的钱，你可以试试 VM，但我想说的是，即使是 VM 也不一定好。付费软件不一定好。首先，虚拟盒子很小。Windows 平台下安装包 80MB 左右，而 VM 每转 600MB。虽然很强大，但是消耗了很多资源。更何况虚拟盒子完全可以满足你的需求。所以，还是自己选比较好。如何使用虚拟机是你的事。这个就不教你了，因为很简单。如果不能，可以用谷歌或者百度。如果你英语好，可以直接看官方文件。</p><p>现在介绍 Linux 发行版的知识。正如你所见，Linux 发行版并非 Linux，Linux 仅是指操作系统的内核，作为科班出生的你不要让我解释，我也没时间。</p><p><strong>我推荐的发行版如下：</strong></p><ol><li>UBUNTU 适合纯新手，追求稳定的官方支持，对系统稳定性要求弱，喜欢最新的应用，相对不喜欢折腾开发者。</li><li>比 UBUNTU 难很多的发行版 Debian，特点是稳定易用的包管理系统，缺点是缺乏企业支持，以社区开发为驱动。</li><li>Arch，追逐时尚的开发者首选，优点是包更新相当快，升级无缝。基本上一次安装就可以一直工作，没有 UBUNTU 那样的版本概念。专业点叫滚动升级，让你的系统保持最新。缺点很明显，不稳定。同时安装配置也比 Debian 麻烦。</li><li>比 Arch 更难的 Gentoo，考验用户的综合水平。从系统安装到微调，内核编译都是手把手。是高手和黑客展示自己技术手段，按需配置符合自己要求的系统的首选。</li></ol><p><strong>Slackware 与 Gentoo 类似：</strong></p><p>社区维护的 RedHat 的副本 CentOS，完全是用 RedHat 的源代码重新编译的，理论上和 RedHat 的兼容性是最好的。如果你专注于 Linux 服务器，比如网络管理和网站建设，那么 CentOS 就是你的选择。</p><p>LFS，终极黑客炫耀工具，完全从源代码安装编译系统。在安装之前，您只能获得一个文档。您所要做的就是按照文档中的说明，一步一步，一个订单一个订单地，一个一个地构建您的 Linux 包。完全在你的掌控之中，你想要什么就有什么。如果你制作了 LFS，那就证明你的 Linux 技术相当不错。如果你能借鉴 LFS 文档，把 Linux 从源代码移植到嵌入式系统，我敢说你能在中国企业做得很好。</p><p>你得挑一个适合自己的系统，然后装在虚拟机里开始用。如果你想快速学习 Linux，我有一个建议，你应该忘记图形界面。不要去想图形界面能不能为你的问题提供答案，而是去世界各地寻找，询问如何用命令行解决你的问题。在这个过程中，你最好掌握好 Linux 的命令，至少要知道常用的命令，同时要建立自己的知识库，里面包含了你积累的知识。</p><p>下一阶段需要学习 Linux 平台的 C++/C++ 开发，以及 Bash 脚本编程，如果对 Java 有很深的兴趣，还需要学习 Java。同样，我建议你抛弃图形界面的 IDE，从 VIM 开始。为什么是 VIM 而不是 Emacs？我无意挑起编辑器大战，但我认为 VIM 适合新手和手笨脑慢的开发者。Emacs 的按键太多，太复杂，我很害怕。然后是 GCC，Make，Eclipse(Java，C++ 或者)。虽然 Eclipse 中列出了 C++，但是我不建议用 IDE 开发 C++，因为这不是 Linux 的文化，你很容易忽略一些应该注意的问题。IDE 让你懒的跟猪一样懒。如果你对程序调试和测试感兴趣，你必须学好 GDB。如果不是 GDB，这也是一门必修课。这是发展的第一步。注意，我没有提到任何关于 Linux API 的东西，现阶段也不关心这个。你要做的就是积累经验，Linux 平台开发的经验。我推荐的书如下:《C 语言编程》，或者谭浩强的。c，白皮书当然更好。++C++ Primer Plus 是 C 推荐的，我不喜欢 Java，所以不推荐。工具推荐 VIM 的官方手册，GCC 中文文档，GDB 中文文档，GNU 开源软件开发指南 (电子书)，汇编语言编程 (让你对库，链接，嵌入式汇编，编译器优化选项有个初步的了解，不深入)。</p><p>如果过不了这个阶段，就不用做了。这是底线，也是最基本的基础。否则，离开，不要开发 Linux。不专业的 Linux 开发者做出来的程序与 Linux 文化或者 UNIX 文化相悖，程序走不了多远，也不可能像 Bash、VIM 这样神奇的产品。所以做不好就走人。</p><p>接下来进入 Linux 系统编程，唯一的选择，APUE，UNIX 环境下的高级编程。反复读，10 遍太少。如果你在大学能把这本书砸了，里面的内容都练过了，有作品，口语表达能力足够强，面试的时候就能说服所有考官。(可能有点夸张，但 APUE 绝对是圣经读物，连 Windows 程序员都从中汲取养分。谷歌创始人的案头书，扎伯克的床头读物。)</p><p>看完这本书，你会对 Linux 系统编程有很好的了解。Linux 和 Windows 平台有什么区别？它们的优缺点是什么？我的总结如下: Windows 平台开发难。微软的系统 API 一直在扩展。如果你想使用最新最高效的功能，你必须时刻学习最适合当前流行系统的功能。不，Linux 有大约 100 个核心 API，所以你可以用很好的记忆力记住它们。而且会长期不变。为什么不呢？因为它兼容 UNIX，符合 POSIX 标准。因此，Linux 平台的开发大多集中在底层或服务器编程上。这是它的优势。当然图形是 Linux 的软肋，但从一个开发者的角度来说，我不在乎，因为我也能适应命令行。如果有更好的图形界面，我会把它作为礼物。另外，Windows 是关闭的，你甚至不知道系统做了什么。你将永远被微软牵着鼻子走。想想吧。如果微软说 Win8 不支持 QQ，腾讯也不会哭死。而且 Linux 是完全开源的。如果不喜欢，可以自己改，只要足够熟练。另外，虽然 Windows 使用的人很多，但是使用的场合比较单一，以桌面为主。Linux 各方面都有发展，尤其是云计算、服务器软件、嵌入式领域、企业应用，兼容性一流。由于 POSIX 可以在 UNIX 系统上无缝运行，因此 Apple Mac 和 IBM AS400 系列都完全支持它。另外，Linux 的开发环境支持绝对一流，无论是 C/C++，Java，Bash，Python，PHP，Javascript，。。。。。。连 C# 都支持。而且微软除了 Visual Stdio 套件都不太友好吧？</p><p>如果你看了 APUE 后有很多感触，想验证你的一些想法或经验，推荐 UNIX 编程艺术，世界顶尖黑客将与你分享他们的观点。现在是时候转移注意力了。总的来说，我分为四个方向: 网络、图形、嵌入式、设备驱动。</p><p>如果选择网络，细分的话，其他的不太熟悉，只说服务器软件编写和高性能并发程序编写。相对来说，这是网络编程中技术含量最高的，也是最底层的。需要很多经验，看很多书，做很多项目。</p><p><strong>我的看法是以下面的顺序来看书：</strong></p><ol><li>APUE 的深度阅读——尤其是进程、线程、IPC、套接字</li><li>多核编程——Pthread 一定要吃透，你是 NB</li><li>UNIX 网络编程–第 1 卷，第 2 卷</li><li>TCP/IP 网络详解——是时候再看一遍以上两本书了。</li><li>TCP/IP 网络的详细说明–第 2 卷。我觉得看第二卷就差不多了。当然，最好还是看第三卷。尽力去看吧。</li><li>Lighttpd 源代码——这个服务器也很有名。</li><li>NGX 源代码——与 Apache 相比，Nginx 的源代码更少。如果能大致看一下，就是 NB 了。看源码主要是学习里面的 socket 编程和并发控制，想想就激动。如果你有这些技能，你可以试试给暴雪发简历，给他们写服务器后台，以为全世界的魔兽都运行在你的服务器软件上。</li><li>Linux 内核 TCP/IP 协议栈——深入了解 TCP/IP 实现</li><li>如果还是喜欢驱动设计，可以看看底层协议，比如链路层。给路由器，网卡，网络设备，嵌入式系统软件写驱动应该不是问题。当然，一般的网络公司，哪怕是百度级别的，都应该毫不犹豫的录用你。看后面的书只需要时间和经验，所以 35 岁之前就做吧！跳槽到给你未来的地方！</li></ol><p><strong>图形方向，我觉得图形方向也是很有前途的，以下几个方面：</strong></p><p>Opengl 的工业和游戏开发在国外已经比较成熟。</p><p>动画特效，比如皮克斯，在国外也比较成熟。</p><p>GPU 计算技术可以应用于浏览器网页渲染和 GPU 计算资源利用。因为开源，所以有很多文档程序可以参考。如果能进入火狐开发，或者谷歌做浏览器开发，应该很不错。</p><p><strong>嵌入式方向：嵌入式方向没说的，Linux 很重要</strong></p><p>掌握多种架构，不仅仅是 X86，ARM，MCU 等。必须理解。如果你不懂硬件，我预见你会死在路上，我也想往嵌入式方向走，但是我觉得就算是学电子的学生也比不过学校教嵌入式的方式。我劝你，做之前一定要了解硬件。如果你去做嵌入式应用开发，只能祝你好运了。不要碰上诺基亚、惠普这样的公司，否则你会很惨。</p><p>驱动设计: 软件开发周期很长，硬件不一样，很快。每个月都有这么多新硬件诞生，如何让它们在 Linux 上工作是你的工作。因为 Linux 兼容性好，如果不是太低级的驱动，基本的 C 语言就可以了，系统架构影响不大。由于系统支持，您可能可以在 ARM 上使用 PC 硬件，但需要做一些更改。所以硬件驱动开发不像嵌入式，对硬件知识要求很高。可能的方向很多，比如家电，特别是像索尼、日立、希捷、富士康这样的工厂，比较稀缺。</p><h2 id="四，学习-Linux-内核"><a class="header-anchor" href="#四，学习-Linux-内核">¶</a><strong>四，学习 Linux 内核</strong></h2><p>学习 linux 内核不像学习语言。一个月或者三月就能掌握 C 或者 java。学习 linux 内核需要循序渐进，掌握正确的 linux 内核学习路线非常重要。本文将分享一些学习 linux 内核的建议。</p><ol><li><p>了解操作系统的基本概念。如果没有，可以学习《操作系统: 设计与实现》，Andrew S.Tanenbaum 写的那本，以 MINIX 为例解释操作系统的概念。非常推荐。</p></li><li><p>有了操作系统的基本概念，你就可以理解 Linux 的机制了。推荐罗伯特 · 拉芙写的 Linux 内核设计与实现。这本书从概念上解释了 Linux 有什么以及它是如何工作的。这本书应该反复仔细阅读。</p></li><li><p>有了 Linux 内核的知识，我们还需要具体学习 Linux 内核源代码。经典的是丹尼尔 ·p· 博韦特写的《深入理解 Linux 内核》。学习这本书的时候，要看看内核代码。这本书学起来挺费劲的，所以有很多代码要研究。但是，如果这本书很好理解，那么恭喜你，你已经对 Linux 内核很熟悉了。</p></li><li><p>如果你想开发设备驱动，可以向 O 'Reilly Press 学习 Linux 设备驱动。这本书是驾驶入门的好材料。还有一本很好的教材，精通 Linux 驱动开发，可以参考一下。开车，难免要学习一些硬件协议和资料。如果你研究的是哪一种，可以找相应的硬件文档，了解硬件的工作原理。这些我就不细说了。</p></li><li><p>网络部分，学习一些 Linux 网络部分学习《深入了解 LINUX 网络技术内幕》。这本书把 Linux 的网络部分讲得非常清楚透彻。不过我们一般不做这方面的研究，也不需要做那么多研究。毕竟现在相关岗位很少。</p></li><li><p>现在 Linux 相关的工作大多集中在一些嵌入式开发领域，如 arm、mips 等。你要学习以下关于架构的信息，了解 CPU 的设计和工作模式。看看 ARM 对应的芯片手册就知道了，很详细的。mips 随便看看 MIPS 运行，有一两个版本。两个版本有些区别，建议全看。</p></li><li><p>补充一点经验。不要以为 Linux 庞大复杂，就很难学。认真学习，什么都可以学。就看你的毅力和恒心了。另外，不要走弯路，不要看市面上那些讲 Linux0.11 的书，学你想学的就好。就像学 C 语言看谭浩强一样，走弯路，费力气，严重影响学习效果。</p></li></ol><p><strong>关于 linux 内核学习路线，再多说几句应用编程，有时候经常会需要的：</strong></p><ol><li><p>学习 Linux 应用编程，建议看《unix 环境高级编程》，把里面的例子都做一遍，会对整个 Linux 编程有系统都认识。</p></li><li><p>针对 Linux，有本 《Linux 系统编程》，学完上一本，这本很快看一遍就懂了。主要是针对 Linux 具体懂一些内容，讲的挺全了，很实用。</p></li><li><p>Linux 网络编程，系统的学习一下《unix 网络编程。卷 1，套接字联网 api》，基本上网络应用相关的程序就都没问题了。</p></li></ol><p>这些内容，分几年时间，分步计划学习，就会成为 Linux 高手了。个人建议参加零声教育的培训，学习效率会高很多，有目的性的参加培训，缩短周期，快速成型才是时代所需。</p><p><strong>官方地址：</strong><a href="https://link.zhihu.com/?target=https%3A//ke.qq.com/course/4032547%3FflowToken%3D1040236" target="_blank" rel="noopener">Linux 内核源码 / 内存调优 / 文件系统 / 进程管理 / 设备驱动 / 网络协议栈 - 学习视频教程 - 腾讯课堂</a></p><p><strong>以上就是 Linux 内核学习路线，关于学习 Linux 内核的建议，希望对小伙伴们有帮助。</strong></p><p><img src="https://pic3.zhimg.com/v2-937a1ab104f7526be077ec69d7c41c42_b.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&quot;http://ksria.com/simpread/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/572266986&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zhuanlan.zhihu.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、为什么要学习-Linux-内核&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#一、为什么要学习-Linux-内核&quot;&gt;¶&lt;/a&gt;一、为什么要学习 Linux 内核&lt;/h2&gt;
    
    </summary>
    
      <category term="linux" scheme="https://talengu.github.io/public/categories/linux/"/>
    
    
      <category term="linux" scheme="https://talengu.github.io/public/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>「转」九张图一览 Linux 性能工具 全景图</title>
    <link href="https://talengu.github.io/public/2022/12/11/linux/linux_tools/"/>
    <id>https://talengu.github.io/public/2022/12/11/linux/linux_tools/</id>
    <published>2022-12-11T12:00:00.000Z</published>
    <updated>2022-12-11T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><p>当今时代，绝大多数企业的应用都是运行在 Linux 操作系统上，所以对应用进行性能诊断和性能优化时，离不开 Linux 的各种性能观测工具和性能优化工具。</p><p>笔者使用过的常见的 Linux 性能观测和性能优化工具有：</p><ul><li>top/uptime</li><li>ps/pstree</li><li>df/du/free/lsblk</li><li>ip/ifconfig/ping/telnet</li><li>route/dig/nslookup</li><li>lsof/netstat/ss</li><li>tcpdump/tshark/wireshark</li><li>netstat/vmstat/iostat/pidstat/dstat/mpstat</li><li>sar/sysctl/ethtool</li></ul><p>最近在拜读国际著名的 LINUX 性能专家 Brendan Gregg 的个人博客和技术书籍，摘抄了如下九张图，一览 Linux 性能工具全景图，大家共勉！</p><a id="more"></a><h2 id="2-Linux-性能工具全景图"><a class="header-anchor" href="#2-Linux-性能工具全景图">¶</a><strong>2. Linux 性能工具全景图</strong></h2><ul><li>linux performance observability tools</li></ul><p><img src="/public/2022/12/11/linux/linux_tools/v2-2eadd97c53a3f20f255394c3d90ea914_r.jpg" alt></p><ul><li>linux static performance tools</li></ul><p><img src="/public/2022/12/11/linux/linux_tools/v2-20032bac53c856c5733259eece5c2f76_r.jpg" alt></p><ul><li>linux performance benchmark tools</li></ul><p><img src="/public/2022/12/11/linux/linux_tools/v2-de23423f2eb9deb5410b7128c933f9a9_r.jpg" alt></p><ul><li>linux performance tuning tools</li></ul><p><img src="/public/2022/12/11/linux/linux_tools/v2-cdf37de145763b762ba5af1a620f9686_r.jpg" alt></p><ul><li>linux performance observability: sar</li></ul><p><img src="/public/2022/12/11/linux/linux_tools/v2-eee71a6bf3865367741137da03031411_r.jpg" alt></p><ul><li>linux performance observability: perf-tools</li></ul><p><img src="/public/2022/12/11/linux/linux_tools/v2-1c0134fefbb04597db98ae455a40fad5_r.jpg" alt></p><ul><li><a href="https://www.zhihu.com/search?q=linux%20bcc&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2795830055%7D" target="_blank" rel="noopener">linux bcc</a>/BPF Tracing tools</li></ul><p><img src="/public/2022/12/11/linux/linux_tools/v2-ffe70303f4d64828ca931d987b12a6d8_r.jpg" alt></p><ul><li>bpftrace/eBPF Tools</li></ul><p><img src="/public/2022/12/11/linux/linux_tools/v2-5985d44e43738933c0b54c89cc20ec09_r.jpg" alt></p><ul><li>BPF Performance Tools: Linux System and Application Observability</li></ul><p><img src="/public/2022/12/11/linux/linux_tools/v2-0f53016fa1d993ffbbf6fc520e318784_r.jpg" alt></p><h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2><p>更多 LINUX 性能资料，大家可以访问大师的个人网站和和技术书籍</p><ul><li><a href="https://www.brendangregg.com/" target="_blank" rel="noopener">https://www.brendangregg.com/</a></li><li>《性能之巅：洞悉系统、企业与云计算》（《Systems Performance: Enterprise and the Cloud, 2nd Edition (2020)》）</li><li>《洞悉 Linux 系统和应用性能》（《BPF Performance Tools》）</li><li>ps: 要说 LINUX 内核近几年 (和今后几年）最引人注目的发展模块，那就是 <a href="https://www.zhihu.com/search?q=bpf&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2795830055%7D" target="_blank" rel="noopener">bpf</a> 了，完全值得花点精力学习跟进下。</li><li>如何更深入地学习 Linux？ - michaelli的回答 - 知乎<a href="https://www.zhihu.com/question/23564190/answer/2795830055" target="_blank" rel="noopener">https://www.zhihu.com/question/23564190/answer/2795830055</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;¶&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;当今时代，绝大多数企业的应用都是运行在 Linux 操作系统上，所以对应用进行性能诊断和性能优化时，离不开 Linux 的各种性能观测工具和性能优化工具。&lt;/p&gt;
&lt;p&gt;笔者使用过的常见的 Linux 性能观测和性能优化工具有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;top/uptime&lt;/li&gt;
&lt;li&gt;ps/pstree&lt;/li&gt;
&lt;li&gt;df/du/free/lsblk&lt;/li&gt;
&lt;li&gt;ip/ifconfig/ping/telnet&lt;/li&gt;
&lt;li&gt;route/dig/nslookup&lt;/li&gt;
&lt;li&gt;lsof/netstat/ss&lt;/li&gt;
&lt;li&gt;tcpdump/tshark/wireshark&lt;/li&gt;
&lt;li&gt;netstat/vmstat/iostat/pidstat/dstat/mpstat&lt;/li&gt;
&lt;li&gt;sar/sysctl/ethtool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最近在拜读国际著名的 LINUX 性能专家 Brendan Gregg 的个人博客和技术书籍，摘抄了如下九张图，一览 Linux 性能工具全景图，大家共勉！&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://talengu.github.io/public/categories/linux/"/>
    
    
      <category term="linux" scheme="https://talengu.github.io/public/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>tcp ip 协议族</title>
    <link href="https://talengu.github.io/public/2022/12/08/linux_network/tcp_ip/"/>
    <id>https://talengu.github.io/public/2022/12/08/linux_network/tcp_ip/</id>
    <published>2022-12-08T12:00:00.000Z</published>
    <updated>2022-12-08T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><p>tcp ip 协议族</p><a id="more"></a><p><img src="/public/2022/12/08/linux_network/tcp_ip/tcp_ip.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;¶&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;tcp ip 协议族&lt;/p&gt;
    
    </summary>
    
      <category term="linux 网络" scheme="https://talengu.github.io/public/categories/linux-%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="https://talengu.github.io/public/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>「转」连接跟踪（conntrack）：原理、应用及 Linux 内核实现</title>
    <link href="https://talengu.github.io/public/2022/12/04/linux_network/conntrack_linux/"/>
    <id>https://talengu.github.io/public/2022/12/04/linux_network/conntrack_linux/</id>
    <published>2022-12-04T12:00:00.000Z</published>
    <updated>2022-12-04T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a class="header-anchor" href="#摘要">¶</a>摘要</h2><p>本文介绍连接跟踪（connection tracking，conntrack，CT）的原理，应用，及其在 Linux 内核中的实现。</p><p>代码分析基于内核 <code>4.19</code>。为使行文简洁，所贴代码只保留了核心逻辑，但都给出了代码 所在的源文件，如有需要请查阅。</p><p>水平有限，文中不免有错误之处，欢迎指正交流。</p><p>连接跟踪是许多网络应用的基础。例如，Kubernetes Service、ServiceMesh sidecar、 软件四层负载均衡器 LVS/IPVS、Docker network、OVS、iptables 主机防火墙等等，都依赖 连接跟踪功能。</p><a id="more"></a><h2 id="1-1-概念"><a class="header-anchor" href="#1-1-概念">¶</a>1.1 概念</h2><p>连接跟踪，顾名思义，就是<strong>跟踪（并记录）连接的状态</strong>。</p><p><img src="/public/2022/12/04/linux_network/conntrack_linux/node-conntrack.png" alt></p><p>Fig 1.1. 连接跟踪及其内核位置示意图</p><p>例如，上图是一台 IP 地址为 <code>10.1.1.2</code> 的 Linux 机器，我们能看到这台机器上有三条 连接：</p><ol><li>机器访问外部 HTTP 服务的连接（目的端口 80）</li><li>外部访问机器内 FTP 服务的连接（目的端口 21）</li><li>机器访问外部 DNS 服务的连接（目的端口 53）</li></ol><p>连接跟踪所做的事情就是发现并跟踪这些连接的状态，具体包括：</p><ul><li>从数据包中提取<strong>元组</strong>（tuple）信息，辨别<strong>数据流</strong>（flow）和对应的<strong>连接</strong>（connection）</li><li>为所有连接维护一个<strong>状态数据库</strong>（conntrack table），例如连接的创建时间、发送 包数、发送字节数等等</li><li>回收过期的连接（GC）</li><li>为更上层的功能（例如 NAT）提供服务</li></ul><p>需要注意的是，<strong>连接跟踪中所说的“连接”，概念和 TCP/IP 协议中“面向连接”（ connection oriented）的 “连接” 并不完全相同</strong>，简单来说：</p><ul><li>TCP/IP 协议中，连接是一个四层（Layer 4）的概念。<ul><li>TCP 是有连接的，或称面向连接的（connection oriented），发送出去的包都要求对端应答（ACK），并且有重传机制</li><li>UDP 是无连接的，发送的包无需对端应答，也没有重传机制</li></ul></li><li>CT 中，一个元组（tuple）定义的一条数据流（flow ）就表示一条连接（connection）。<ul><li>后面会看到 UDP 甚至是 <strong>ICMP 这种三层协议在 CT 中也都是有连接记录的</strong></li><li>但<strong>不是所有协议都会被连接跟踪</strong></li></ul></li></ul><p>本文中用到 “连接” 一词时，大部分情况下指的都是后者，即 “连接跟踪” 中的“连接”。</p><h2 id="1-2-原理"><a class="header-anchor" href="#1-2-原理">¶</a>1.2 原理</h2><p>了解以上概念之后，我们来思考下连接跟踪的技术原理。</p><p>要跟踪一台机器的所有连接状态，就需要</p><ol><li><strong>拦截（或称过滤）流经这台机器的每一个数据包，并进行分析</strong>。</li><li>根据这些信息<strong>建立</strong>起这台机器上的<strong>连接信息数据库</strong>（conntrack table）。</li><li>根据拦截到的包信息，不断更新数据库</li></ol><p>例如，</p><ol><li>拦截到一个 TCP <code>SYNC</code> 包时，说明正在尝试建立 TCP 连接，需要创建一条新 conntrack entry 来记录这条连接</li><li>拦截到一个属于已有 conntrack entry 的包时，需要更新这条 conntrack entry 的收发包数等统计信息</li></ol><p>除了以上两点功能需求，还要考虑<strong>性能问题</strong>，因为连接跟踪要对每个包进行过滤和分析 。性能问题非常重要，但不是本文重点，后面介绍实现时会进一步提及。</p><p>之外，这些功能最好还有配套的管理工具来更方便地使用。</p><h2 id="1-3-设计：Netfilter"><a class="header-anchor" href="#1-3-设计：Netfilter">¶</a>1.3 设计：Netfilter</h2><p><strong>Linux 的连接跟踪是在 <a href="https://en.wikipedia.org/wiki/Netfilter" target="_blank" rel="noopener">Netfilter</a> 中实现的。</strong></p><p><img src="/public/2022/12/04/linux_network/conntrack_linux/netfilter-design.png" alt></p><p>Fig 1.2. Netfilter architecture inside Linux kernel</p><p><a href="https://en.wikipedia.org/wiki/Netfilter" target="_blank" rel="noopener">Netfilter</a> 是 Linux 内核中一个对数据 包进行<strong>控制、修改和过滤</strong>（manipulation and filtering）的框架。它在内核协议 栈中设置了若干 hook 点，以此对数据包进行拦截、过滤或其他处理。</p><blockquote><p>说地更直白一些，hook 机制就是在数据包的必经之路上设置若干检测点，所有到达这 些检测点的包都必须接受检测，根据检测的结果决定：</p><ol><li>放行：不对包进行任何修改，退出检测逻辑，继续后面正常的包处理</li><li>修改：例如修改 IP 地址进行 NAT，然后将包放回正常的包处理逻辑</li><li>丢弃：安全策略或防火墙功能</li></ol><p>连接跟踪模块只是完成连接信息的采集和录入功能，并不会修改或丢弃数据包，后者是其 他模块（例如 NAT）基于 Netfilter hook 完成的。</p></blockquote><p>Netfilter 是最古老的内核框架之一，1998 年开始开发，2000 年合并到 <code>2.4.x</code> 内 核主线版本 [5]。</p><h2 id="1-4-设计：进一步思考"><a class="header-anchor" href="#1-4-设计：进一步思考">¶</a>1.4 设计：进一步思考</h2><p>现在提到连接跟踪（conntrack），可能首先都会想到 Netfilter。但由上节讨论可知， 连接跟踪概念是独立于 Netfilter 的，<strong>Netfilter 只是 Linux 内核中的一种连接跟踪实现</strong>。</p><p>换句话说，<strong>只要具备了 hook 能力，能拦截到进出主机的每个包，完全可以在此基础上自 己实现一套连接跟踪</strong>。</p><p><img src="/public/2022/12/04/linux_network/conntrack_linux/cilium-conntrack.png" alt></p><p>Fig 1.3. Cilium's conntrack and NAT architectrue</p><p>云原生网络方案 Cilium 在 <code>1.7.4+</code> 版本就实现了这样一套独立的连接跟踪和 NAT 机制 （完备功能需要 Kernel <code>4.19+</code>）。其基本原理是：</p><ol><li>基于 BPF hook 实现数据包的拦截功能（等价于 netfilter 里面的 hook 机制）</li><li>在 BPF hook 的基础上，实现一套全新的 conntrack 和 NAT</li></ol><p>因此，即便<a href="https://github.com/cilium/cilium/issues/12879" target="_blank" rel="noopener">卸载 Netfilter</a> ，也不会影响 Cilium 对 Kubernetes ClusterIP、NodePort、ExternalIPs 和 LoadBalancer 等功能的支持 [2]。</p><p>由于这套连接跟踪机制是独立于 Netfilter 的，因此它的 conntrack 和 NAT 信息也没有 存储在内核的（也就是 Netfilter 的）conntrack table 和 NAT table。所以常规的 <code>conntrack/netstats/ss/lsof</code> 等工具是看不到的，要使用 Cilium 的命令，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cilium bpf nat list</span><br><span class="line">$ cilium bpf ct list global</span><br></pre></td></tr></table></figure><p>配置也是独立的，需要在 Cilium 里面配置，例如命令行选项 <code>--bpf-ct-tcp-max</code>。</p><p>另外，本文会多次提到连接跟踪模块和 NAT 模块独立，但<strong>出于性能考虑，具体实现中 二者代码可能是有耦合的</strong>。例如 Cilium 做 conntrack 的垃圾回收（GC）时就会顺便把 NAT 里相应的 entry 回收掉，而非为 NAT 做单独的 GC。</p><h2 id="1-5-应用"><a class="header-anchor" href="#1-5-应用">¶</a>1.5 应用</h2><p>来看几个 conntrack 的具体应用。</p><h3 id="1-5-1-网络地址转换（NAT）"><a class="header-anchor" href="#1-5-1-网络地址转换（NAT）">¶</a>1.5.1 网络地址转换（NAT）</h3><p>网络地址转换（NAT），名字表达的意思也比较清楚：对（数据包的）网络地址（<code>IP + Port</code>）进行转换。</p><p><img src="/public/2022/12/04/linux_network/conntrack_linux/node-nat.png" alt></p><p>Fig 1.4. NAT 及其内核位置示意图</p><p>例如上图中，机器自己的 IP <code>10.1.1.2</code> 是能与外部正常通信的，但 <code>192.168</code> 网段是私有 IP 段，外界无法访问，也就是说源 IP 地址是 <code>192.168</code> 的包，其<strong>应答包是无 法回来的</strong>。因此，</p><ul><li>当源地址为 <code>192.168</code> 网段的包要出去时，机器会先将源 IP 换成机器自己的 <code>10.1.1.2</code> 再发送出去；</li><li>收到应答包时，再进行相反的转换。</li></ul><p>这就是 NAT 的基本过程。</p><p>Docker 默认的 <code>bridge</code> 网络模式就是这个原理 [4]。每个容器会分一个私有网段的 IP 地址，这个 IP 地址可以在宿主机内的不同容器之间通信，但容器流量出宿主机时要进行 NAT。</p><p>NAT 又可以细分为几类：</p><ul><li>SNAT：对源地址（source）进行转换</li><li>DNAT：对目的地址（destination）进行转换</li><li>Full NAT：同时对源地址和目的地址进行转换</li></ul><p>以上场景属于 SNAT，将不同私有 IP 都映射成同一个 “公有 IP”，以使其能访问外部网络服 务。这种场景也属于正向代理。</p><p>NAT 依赖连接跟踪的结果。连接跟踪<strong>最重要的使用场景</strong>就是 NAT。</p><h4 id="四层负载均衡（L4LB）"><a class="header-anchor" href="#四层负载均衡（L4LB）">¶</a>四层负载均衡（L4LB）</h4><p>再将范围稍微延伸一点，讨论一下 NAT 模式的四层负载均衡。</p><p>四层负载均衡是根据包的四层信息（例如 <code>src/dst ip, src/dst port, proto</code>）做流量分发。</p><p>VIP（Virtual IP）是四层负载均衡的一种实现方式：</p><ul><li>多个后端真实 IP（Real IP）挂到同一个虚拟 IP（VIP）上</li><li>客户端过来的流量先到达 VIP，再经负载均衡算法转发给某个特定的后端 IP</li></ul><p>如果在 VIP 和 Real IP 节点之间使用的 NAT 技术（也可以使用其他技术），那客户端访 问服务端时，L4LB 节点将做双向 NAT（Full NAT），数据流如下图所示：</p><p><img src="/public/2022/12/04/linux_network/conntrack_linux/nat.png" alt></p><p>Fig 1.5. L4LB: Traffic path in NAT mode [3]</p><h3 id="1-5-2-有状态防火墙"><a class="header-anchor" href="#1-5-2-有状态防火墙">¶</a>1.5.2 有状态防火墙</h3><p>有状态防火墙（stateful firewall）是相对于早期的<strong>无状态防火墙</strong>（stateless firewall）而言的：早期防火墙只能写 <code>drop syn to port 443</code> 或者 <code>allow syn to port 80</code> 这种非常简单直接 的规则，<strong>没有 flow 的概念</strong>，因此无法实现诸如 <strong>“如果这个 ack 之前已经有 syn， 就 allow，否则 drop”</strong> 这样的规则，使用非常受限 [6]。</p><p>显然，要实现有状态防火墙，就必须记录 flow 和状态，这正是 conntrack 做的事情。</p><p>来看个更具体的防火墙应用：OpenStack 主机防火墙解决方案 —— 安全组（security group）。</p><h4 id="OpenStack-安全组"><a class="header-anchor" href="#OpenStack-安全组">¶</a>OpenStack 安全组</h4><p>简单来说，安全组实现了<strong>虚拟机级别</strong>的安全隔离，具体实现是：在 node 上连接 VM 的 网络设备上做有状态防火墙。在当时，最能实现这一功能的可能就是 Netfilter/iptables。</p><p>回到宿主机内网络拓扑问题： OpenStack 使用 OVS bridge 来连接一台宿主机内的所有 VM。 如果只从网络连通性考虑，那每个 VM 应该直接连到 OVS bridge <code>br-int</code>。但这里问题 就来了 [7]：</p><ul><li>（较早版本的）OVS 没有 conntrack 模块，</li><li>Linux 中有 conntrack 模块，但基于 conntrack 的防火墙<strong>工作在 IP 层</strong>（L3），通过 iptables 控制，</li><li>而 <strong>OVS 是 L2 模块</strong>，无法使用 L3 模块的功能，</li></ul><p>最终结果是：无法在 OVS （连接虚拟机）的设备上做防火墙。</p><p>所以，2016 之前 OpenStack 的解决方案是，在每个 OVS 和 VM 之间再加一个 Linux bridge ，如下图所示，</p><p><img src="/public/2022/12/04/linux_network/conntrack_linux/ovs-compute.png" alt></p><p>Fig 1.6. Network topology within an OpenStack compute node, picture from <a href="https://thesaitech.wordpress.com/2017/09/24/how-to-trace-the-tap-interfaces-and-linux-bridges-on-the-hypervisor-your-openstack-vm-is-on/" target="_blank" rel="noopener">Sai's Blog</a></p><p>Linux bridge 也是 L2 模块，按道理也无法使用 iptables。但是，<strong>它有一个 L2 工具 ebtables，能够跳转到 iptables</strong>，因此间接支持了 iptables，也就能用到 Netfilter/iptables 防火墙的功能。</p><p>这种暴力堆砌的方式不仅丑陋、增加网络复杂性，而且会导致性能问题。因此， RedHat 在 2016 年提出了一个 OVS conntrack 方案 [7]，从那以后，才有可能干掉 Linux bridge 而仍然具备安全组的功能。</p><h2 id="1-6-小结"><a class="header-anchor" href="#1-6-小结">¶</a>1.6 小结</h2><p>以上是理论篇，接下来看一下内核实现。</p><p>Netfilter 由几个模块构成，其中最主要的是<strong>连接跟踪</strong>（CT）模块和<strong>网络地址转换</strong>（NAT）模块。</p><p>CT 模块的主要职责是识别出可进行连接跟踪的包。 CT 模块独立于 NAT 模块，但主要目的是服务于后者。</p><h2 id="2-1-Netfilter-框架"><a class="header-anchor" href="#2-1-Netfilter-框架">¶</a>2.1 Netfilter 框架</h2><h3 id="5-个-hook-点"><a class="header-anchor" href="#5-个-hook-点">¶</a>5 个 hook 点</h3><p><img src="/public/2022/12/04/linux_network/conntrack_linux/hooks.png" alt></p><p>图 2.1. The 5 hook points in netfilter framework</p><p>如上图所示，Netfilter 在内核协议栈的包处理路径上提供了 5 个 hook 点，分别是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/uapi/linux/netfilter_ipv4.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_IP_PRE_ROUTING    0 <span class="comment">/* After promisc drops, checksum checks. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_IP_LOCAL_IN       1 <span class="comment">/* If the packet is destined for this box. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_IP_FORWARD        2 <span class="comment">/* If the packet is destined for another interface. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_IP_LOCAL_OUT      3 <span class="comment">/* Packets coming from a local process. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_IP_POST_ROUTING   4 <span class="comment">/* Packets about to hit the wire. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_IP_NUMHOOKS       5</span></span><br></pre></td></tr></table></figure><p>用户可以在这些 hook 点注册自己的处理函数（handlers）。当有数据包经过 hook 点时， 就会调用相应的 handlers。</p><blockquote><p>另外还有一套 <code>NF_INET_</code> 开头的定义，<code>include/uapi/linux/netfilter.h</code>。 这两套是等价的，从注释看，<code>NF_IP_</code> 开头的定义可能是为了保持兼容性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">enum</span> nf_inet_hooks &#123;</span><br><span class="line">&gt;  NF_INET_PRE_ROUTING,</span><br><span class="line">&gt;  NF_INET_LOCAL_IN,</span><br><span class="line">&gt;  NF_INET_FORWARD,</span><br><span class="line">&gt;  NF_INET_LOCAL_OUT,</span><br><span class="line">&gt;  NF_INET_POST_ROUTING,</span><br><span class="line">&gt;  NF_INET_NUMHOOKS</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="hook-返回值类型"><a class="header-anchor" href="#hook-返回值类型">¶</a>hook 返回值类型</h3><p>hook 函数对包进行判断或处理之后，需要返回一个判断结果，指导接下来要对这个包做什 么。可能的结果有：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/uapi/linux/netfilter.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_DROP   0  <span class="comment">// 已丢弃这个包</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_ACCEPT 1  <span class="comment">// 接受这个包，结束判断，继续下一步处理</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_STOLEN 2  <span class="comment">// 临时 hold 这个包，不用再继续穿越协议栈了。常见的情形是缓存分片之后的包（等待重组）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_QUEUE  3  <span class="comment">// 应当将包放到队列</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NF_REPEAT 4  <span class="comment">// 当前处理函数应当被再次调用</span></span></span><br></pre></td></tr></table></figure><h3 id="hook-优先级"><a class="header-anchor" href="#hook-优先级">¶</a>hook 优先级</h3><p>每个 hook 点可以注册多个处理函数（handler）。在注册时必须指定这些 handlers 的<strong>优先级</strong>，这样触发 hook 时能够根据优先级依次调用处理函数。</p><h2 id="2-2-过滤规则的组织"><a class="header-anchor" href="#2-2-过滤规则的组织">¶</a>2.2 过滤规则的组织</h2><p><code>iptables</code> 是配置 Netfilter 过滤功能的用户空间工具。为便于管理， 过滤规则按功能分为若干 table：</p><ul><li>raw</li><li>filter</li><li>nat</li><li>mangle</li></ul><p>这不是本文重点。更多信息可参考 <a href="chrome-extension://ijllcpnolfcooahcekpamkbidhejabll/blog/deep-dive-into-iptables-and-netfilter-arch-zh/" target="_blank" rel="noopener">(译) 深入理解 iptables 和 netfilter 架构</a></p><p>连接跟踪模块用于维护<strong>可跟踪协议</strong>（trackable protocols）的连接状态。 也就是说，连接跟踪<strong>针对的是特定协议的包，而不是所有协议的包</strong>。 稍后会看到它支持哪些协议。</p><h2 id="3-1-重要结构体和函数"><a class="header-anchor" href="#3-1-重要结构体和函数">¶</a>3.1 重要结构体和函数</h2><p>重要结构体：</p><ul><li><code>struct nf_conntrack_tuple {}</code>: 定义一个 tuple。<ul><li><code>struct nf_conntrack_man {}</code>：tuple 的 manipulable part。<ul><li><code>struct nf_conntrack_man_proto {}</code>：manipulable part 中协议相关的部分。</li></ul></li></ul></li><li><code>struct nf_conntrack_l4proto {}</code>: 支持连接跟踪的<strong>协议需要实现的方法集</strong>（以及其他协议相关字段）。</li><li><code>struct nf_conntrack_tuple_hash {}</code>：哈希表（conntrack table）中的表项（entry）。</li><li><code>struct nf_conn {}</code>：<strong>定义一个 flow</strong>。</li></ul><p>重要函数：</p><ul><li><p><code>hash_conntrack_raw()</code>：根据 tuple 计算出一个 32 位的哈希值（hash key）。</p></li><li><p><code>nf_conntrack_in()</code>：<strong>连接跟踪模块的核心，包进入连接跟踪的地方</strong>。</p></li><li><p><code>resolve_normal_ct() -&gt; init_conntrack() -&gt; ct = __nf_conntrack_alloc(); l4proto-&gt;new(ct)</code></p><p>创建一个新的连接记录（conntrack entry），然后初始化。</p></li><li><p><code>nf_conntrack_confirm()</code>：确认前面通过 <code>nf_conntrack_in()</code> 创建的新连接（是否被丢弃）。</p></li></ul><h2 id="3-2-struct-nf-conntrack-tuple-：元组（Tuple）"><a class="header-anchor" href="#3-2-struct-nf-conntrack-tuple-：元组（Tuple）">¶</a>3.2 <code>struct nf_conntrack_tuple {}</code>：元组（Tuple）</h2><p>Tuple 是连接跟踪中最重要的概念之一。</p><p><strong>一个 tuple 定义一个单向（unidirectional）flow</strong>。内核代码中有如下注释：</p><blockquote><p>//include/net/netfilter/nf_conntrack_tuple.h</p><p>A <code>tuple</code> is a structure containing the information to uniquely identify a connection. ie. if two packets have the same tuple, they are in the same connection; if not, they are not.</p></blockquote><h3 id="结构体定义"><a class="header-anchor" href="#结构体定义">¶</a>结构体定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//include/net/netfilter/nf_conntrack_tuple.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为方便 NAT 的实现，内核将 tuple 结构体拆分为 "manipulatable" 和 "non-manipulatable" 两部分</span></span><br><span class="line"><span class="comment">// 下面结构体中的 _man 是 manipulatable 的缩写</span></span><br><span class="line">                                               <span class="comment">// ude/uapi/linux/netfilter.h</span></span><br><span class="line">                                               <span class="keyword">union</span> nf_inet_addr &#123;</span><br><span class="line">                                                   __u32            all[<span class="number">4</span>];</span><br><span class="line">                                                   __be32           ip;</span><br><span class="line">                                                   __be32           ip6[<span class="number">4</span>];</span><br><span class="line">                                                   <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>   <span class="title">in</span>;</span></span><br><span class="line">                                                   <span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span>  <span class="title">in6</span>;</span></span><br><span class="line"><span class="comment">/* manipulable part of the tuple */</span>         /  &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack_man</span> &#123;</span>                  /</span><br><span class="line">    <span class="keyword">union</span> nf_inet_addr           u3; --&gt;--/</span><br><span class="line">    <span class="keyword">union</span> nf_conntrack_man_proto u;  --&gt;--\</span><br><span class="line">                                           \   <span class="comment">// include/uapi/linux/netfilter/nf_conntrack_tuple_common.h</span></span><br><span class="line">    <span class="keyword">u_int16_t</span> l3num; <span class="comment">// L3 proto            \  // 协议相关的部分</span></span><br><span class="line">&#125;;                                            <span class="keyword">union</span> nf_conntrack_man_proto &#123;</span><br><span class="line">                                                  __be16 all;<span class="comment">/* Add other protocols here. */</span></span><br><span class="line"></span><br><span class="line">                                                  <span class="class"><span class="keyword">struct</span> &#123;</span> __be16 port; &#125; tcp;</span><br><span class="line">                                                  <span class="class"><span class="keyword">struct</span> &#123;</span> __be16 port; &#125; udp;</span><br><span class="line">                                                  <span class="class"><span class="keyword">struct</span> &#123;</span> __be16 id;   &#125; icmp;</span><br><span class="line">                                                  <span class="class"><span class="keyword">struct</span> &#123;</span> __be16 port; &#125; dccp;</span><br><span class="line">                                                  <span class="class"><span class="keyword">struct</span> &#123;</span> __be16 port; &#125; sctp;</span><br><span class="line">                                                  <span class="class"><span class="keyword">struct</span> &#123;</span> __be16 key;  &#125; gre;</span><br><span class="line">                                              &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack_tuple</span> &#123;</span> <span class="comment">/* This contains the information to distinguish a connection. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack_man</span> <span class="title">src</span>;</span>  <span class="comment">// 源地址信息，manipulable part</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="keyword">union</span> nf_inet_addr u3;</span><br><span class="line">        <span class="keyword">union</span> &#123;</span><br><span class="line">            __be16 all; <span class="comment">/* Add other protocols here. */</span></span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> &#123;</span> __be16 port;         &#125; tcp;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> &#123;</span> __be16 port;         &#125; udp;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">u_int8_t</span> type, code; &#125; icmp;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> &#123;</span> __be16 port;         &#125; dccp;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> &#123;</span> __be16 port;         &#125; sctp;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> &#123;</span> __be16 key;          &#125; gre;</span><br><span class="line">        &#125; u;</span><br><span class="line">        <span class="keyword">u_int8_t</span> protonum; <span class="comment">/* The protocol. */</span></span><br><span class="line">        <span class="keyword">u_int8_t</span> dir;      <span class="comment">/* The direction (for tuplehash) */</span></span><br><span class="line">    &#125; dst;                       <span class="comment">// 目的地址信息</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Tuple 结构体中只有两个字段 src 和 dst</strong>，分别保存源和目的信息。<code>src</code> 和 <code>dst</code> 自身也是结构体，能保存不同类型协议的数据。以 IPv4 UDP 为例，五元组分别保存在如下字段：</p><ul><li><code>dst.protonum</code>：协议类型</li><li><code>src.u3.ip</code>：源 IP 地址</li><li><code>dst.u3.ip</code>：目的 IP 地址</li><li><code>src.u.udp.port</code>：源端口号</li><li><code>dst.u.udp.port</code>：目的端口号</li></ul><h3 id="CT-支持的协议"><a class="header-anchor" href="#CT-支持的协议">¶</a>CT 支持的协议</h3><p>从以上定义可以看到，连接跟踪模块<strong>目前只支持以下六种协议</strong>：TCP、UDP、ICMP、DCCP、SCTP、GRE。</p><p><strong>注意其中的 ICMP 协议</strong>。大家可能会认为，连接跟踪模块依据包的三层和四层信息做 哈希，而 ICMP 是三层协议，没有四层信息，因此 ICMP 肯定不会被 CT 记录。但<strong>实际上 是会的</strong>，上面代码可以看到，ICMP 使用了其头信息中的 ICMP <code>type</code>和 <code>code</code> 字段来 定义 tuple。</p><h2 id="3-3-struct-nf-conntrack-l4proto-：协议需要实现的方法集合"><a class="header-anchor" href="#3-3-struct-nf-conntrack-l4proto-：协议需要实现的方法集合">¶</a>3.3 <code>struct nf_conntrack_l4proto {}</code>：协议需要实现的方法集合</h2><p>支持连接跟踪的协议都需要实现 <code>struct nf_conntrack_l4proto {}</code> 结构体 中定义的方法，例如 <code>pkt_to_tuple()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/net/netfilter/nf_conntrack_l4proto.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack_l4proto</span> &#123;</span></span><br><span class="line">    <span class="keyword">u_int16_t</span> l3proto; <span class="comment">/* L3 Protocol number. */</span></span><br><span class="line">    <span class="keyword">u_int8_t</span>  l4proto; <span class="comment">/* L4 Protocol number. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从包（skb）中提取 tuple</span></span><br><span class="line">    <span class="keyword">bool</span> (*pkt_to_tuple)(struct sk_buff *skb, ... struct nf_conntrack_tuple *tuple);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对包进行判决，返回判决结果（returns verdict for packet）</span></span><br><span class="line">    <span class="keyword">int</span> (*packet)(struct nf_conn *ct, <span class="keyword">const</span> struct sk_buff *skb ...);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新连接。如果成功返回 TRUE；如果返回的是 TRUE，接下来会调用 packet() 方法</span></span><br><span class="line">    <span class="keyword">bool</span> (*<span class="keyword">new</span>)(struct nf_conn *ct, <span class="keyword">const</span> struct sk_buff *skb, <span class="keyword">unsigned</span> <span class="keyword">int</span> dataoff);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断当前数据包能否被连接跟踪。如果返回成功，接下来会调用 packet() 方法</span></span><br><span class="line">    <span class="keyword">int</span> (*error)(struct net *net, struct nf_conn *tmpl, struct sk_buff *skb, ...);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-4-struct-nf-conntrack-tuple-hash-：哈希表项"><a class="header-anchor" href="#3-4-struct-nf-conntrack-tuple-hash-：哈希表项">¶</a>3.4 <code>struct nf_conntrack_tuple_hash {}</code>：哈希表项</h2><p>conntrack 将活动连接的状态存储在一张哈希表中（<code>key: value</code>）。</p><p><code>hash_conntrack_raw()</code> 根据 tuple 计算出一个 32 位的哈希值（key）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// net/netfilter/nf_conntrack_core.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> u32 <span class="title">hash_conntrack_raw</span><span class="params">(struct nf_conntrack_tuple *tuple, struct net *net)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    get_random_once(&amp;nf_conntrack_hash_rnd, <span class="keyword">sizeof</span>(nf_conntrack_hash_rnd));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The direction must be ignored, so we hash everything up to the</span></span><br><span class="line"><span class="comment">     * destination ports (which is a multiple of 4) and treat the last three bytes manually.  */</span></span><br><span class="line">    u32 seed = nf_conntrack_hash_rnd ^ net_hash_mix(net);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> n = (<span class="keyword">sizeof</span>(tuple-&gt;src) + <span class="keyword">sizeof</span>(tuple-&gt;dst.u3)) / <span class="keyword">sizeof</span>(u32);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jhash2((u32 *)tuple, n, seed ^ ((tuple-&gt;dst.u.all &lt;&lt; <span class="number">16</span>) | tuple-&gt;dst.protonum));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意其中是如何利用 tuple 的不同字段来计算哈希的。</p><p><code>nf_conntrack_tuple_hash</code> 是哈希表中的表项（value）:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/net/netfilter/nf_conntrack_tuple.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每条连接在哈希表中都对应两项，分别对应两个方向（egress/ingress）</span></span><br><span class="line"><span class="comment">// Connections have two entries in the hash table: one for each way</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack_tuple_hash</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hlist_nulls_node</span>   <span class="title">hnnode</span>;</span>   <span class="comment">// 指向该哈希对应的连接 struct nf_conn，采用 list 形式是为了解决哈希冲突</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack_tuple</span> <span class="title">tuple</span>;</span>    <span class="comment">// N 元组，前面详细介绍过了</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-5-struct-nf-conn-：连接（connection）"><a class="header-anchor" href="#3-5-struct-nf-conn-：连接（connection）">¶</a>3.5 <code>struct nf_conn {}</code>：连接（connection）</h2><p><strong>Netfilter 中每个 flow 都称为一个 connection</strong>，即使是对那些非面向连接的协议（例 如 UDP）。每个 connection 用 <code>struct nf_conn {}</code> 表示，主要字段如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/net/netfilter/nf_conntrack.h</span></span><br><span class="line"></span><br><span class="line">                                                  <span class="comment">// include/linux/skbuff.h</span></span><br><span class="line">                                        ------&gt;   <span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack</span> &#123;</span></span><br><span class="line">                                        |             <span class="keyword">atomic_t</span> use;  <span class="comment">// 连接引用计数？</span></span><br><span class="line">                                        |         &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nf_conn</span> &#123;</span>                        |</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack</span>            <span class="title">ct_general</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack_tuple_hash</span> <span class="title">tuplehash</span>[<span class="title">IP_CT_DIR_MAX</span>];</span> <span class="comment">// 哈希表项，数组是因为要记录两个方向的 flow</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> status; <span class="comment">// 连接状态，见下文</span></span><br><span class="line">    u32 timeout;          <span class="comment">// 连接状态的定时器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">possible_net_t</span> ct_net;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span>    <span class="title">nat_bysource</span>;</span></span><br><span class="line">                                                        <span class="comment">// per conntrack: protocol private data</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nf_conn</span> *<span class="title">master</span>;</span>                             <span class="keyword">union</span> nf_conntrack_proto &#123;</span><br><span class="line">                                                       /    <span class="comment">/* insert conntrack proto private data here */</span></span><br><span class="line">    <span class="keyword">u_int32_t</span> mark;    <span class="comment">/* 对 skb 进行特殊标记 */</span>      /     <span class="class"><span class="keyword">struct</span> <span class="title">nf_ct_dccp</span> <span class="title">dccp</span>;</span></span><br><span class="line">    <span class="keyword">u_int32_t</span> secmark;                               /      <span class="class"><span class="keyword">struct</span> <span class="title">ip_ct_sctp</span> <span class="title">sctp</span>;</span></span><br><span class="line">                                                    /       <span class="class"><span class="keyword">struct</span> <span class="title">ip_ct_tcp</span> <span class="title">tcp</span>;</span></span><br><span class="line">    <span class="keyword">union</span> nf_conntrack_proto proto; ----------&gt;----/        <span class="class"><span class="keyword">struct</span> <span class="title">nf_ct_gre</span> <span class="title">gre</span>;</span></span><br><span class="line">&#125;;                                                          <span class="keyword">unsigned</span> <span class="keyword">int</span> tmpl_padto;</span><br><span class="line">                                                        &#125;;</span><br></pre></td></tr></table></figure><p><strong>连接的状态集合 enum ip_conntrack_status</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// include/uapi/linux/netfilter/nf_conntrack_common.h</span><br><span class="line"></span><br><span class="line">enum ip_conntrack_status &#123;</span><br><span class="line">    IPS_EXPECTED      = (1 &lt;&lt; IPS_EXPECTED_BIT),</span><br><span class="line">    IPS_SEEN_REPLY    = (1 &lt;&lt; IPS_SEEN_REPLY_BIT),</span><br><span class="line">    IPS_ASSURED       = (1 &lt;&lt; IPS_ASSURED_BIT),</span><br><span class="line">    IPS_CONFIRMED     = (1 &lt;&lt; IPS_CONFIRMED_BIT),</span><br><span class="line">    IPS_SRC_NAT       = (1 &lt;&lt; IPS_SRC_NAT_BIT),</span><br><span class="line">    IPS_DST_NAT       = (1 &lt;&lt; IPS_DST_NAT_BIT),</span><br><span class="line">    IPS_NAT_MASK      = (IPS_DST_NAT | IPS_SRC_NAT),</span><br><span class="line">    IPS_SEQ_ADJUST    = (1 &lt;&lt; IPS_SEQ_ADJUST_BIT),</span><br><span class="line">    IPS_SRC_NAT_DONE  = (1 &lt;&lt; IPS_SRC_NAT_DONE_BIT),</span><br><span class="line">    IPS_DST_NAT_DONE  = (1 &lt;&lt; IPS_DST_NAT_DONE_BIT),</span><br><span class="line">    IPS_NAT_DONE_MASK = (IPS_DST_NAT_DONE | IPS_SRC_NAT_DONE),</span><br><span class="line">    IPS_DYING         = (1 &lt;&lt; IPS_DYING_BIT),</span><br><span class="line">    IPS_FIXED_TIMEOUT = (1 &lt;&lt; IPS_FIXED_TIMEOUT_BIT),</span><br><span class="line">    IPS_TEMPLATE      = (1 &lt;&lt; IPS_TEMPLATE_BIT),</span><br><span class="line">    IPS_UNTRACKED     = (1 &lt;&lt; IPS_UNTRACKED_BIT),</span><br><span class="line">    IPS_HELPER        = (1 &lt;&lt; IPS_HELPER_BIT),</span><br><span class="line">    IPS_OFFLOAD       = (1 &lt;&lt; IPS_OFFLOAD_BIT),</span><br><span class="line"></span><br><span class="line">    IPS_UNCHANGEABLE_MASK = (IPS_NAT_DONE_MASK | IPS_NAT_MASK |</span><br><span class="line">                 IPS_EXPECTED | IPS_CONFIRMED | IPS_DYING |</span><br><span class="line">                 IPS_SEQ_ADJUST | IPS_TEMPLATE | IPS_OFFLOAD),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-6-nf-conntrack-in-：进入连接跟踪"><a class="header-anchor" href="#3-6-nf-conntrack-in-：进入连接跟踪">¶</a>3.6 <code>nf_conntrack_in()</code>：进入连接跟踪</h2><p><img src="/public/2022/12/04/linux_network/conntrack_linux/netfilter-conntrack.png" alt></p><p>Fig. Netfilter 中的连接跟踪点</p><p>如上图所示，Netfilter 在四个 Hook 点对包进行跟踪：</p><ol><li><p><code>PRE_ROUTING</code> 和 <code>LOCAL_OUT</code>：<strong>调用 nf_conntrack_in() 开始连接跟踪</strong>， 正常情况下会创建一条新连接记录，然后将 conntrack entry 放到 <strong>unconfirmed list</strong>。</p><p>为什么是这两个 hook 点呢？因为它们都是<strong>新连接的第一个包最先达到的地方</strong>，</p><ul><li><code>PRE_ROUTING</code> 是<strong>外部主动和本机建连</strong>时包最先到达的地方</li><li><code>LOCAL_OUT</code> 是<strong>本机主动和外部建连</strong>时包最先到达的地方</li></ul></li><li><p><code>POST_ROUTING</code> 和 <code>LOCAL_IN</code>：<strong>调用 nf_conntrack_confirm() 将 nf_conntrack_in() 创建的连接移到 confirmed list</strong>。</p><p>同样要问，为什么在这两个 hook 点呢？因为如果新连接的第一个包没有被丢弃，那这 是它们<strong>离开 netfilter 之前的最后 hook 点</strong>：</p><ul><li><strong>外部主动和本机建连</strong>的包，如果在中间处理中没有被丢弃，<code>LOCAL_IN</code> 是其被送到应用（例如 nginx 服务）之前的最后 hook 点</li><li><strong>本机主动和外部建连</strong>的包，如果在中间处理中没有被丢弃，<code>POST_ROUTING</code> 是其离开主机时的最后 hook 点</li></ul></li></ol><p>下面的代码可以看到<strong>这些 handler 是如何注册到 Netfilter hook 点的</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// net/netfilter/nf_conntrack_proto.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Connection tracking may drop packets, but never alters them, so make it the first hook.  */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">nf_hook_ops</span> <span class="title">ipv4_conntrack_ops</span>[] = &#123;</span></span><br><span class="line">    &#123;</span><br><span class="line">        .hook        = ipv4_conntrack_in,       <span class="comment">// 调用 nf_conntrack_in() 进入连接跟踪</span></span><br><span class="line">        .pf          = NFPROTO_IPV4,</span><br><span class="line">        .hooknum     = NF_INET_PRE_ROUTING,     <span class="comment">// PRE_ROUTING hook 点</span></span><br><span class="line">        .priority    = NF_IP_PRI_CONNTRACK,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .hook        = ipv4_conntrack_local,    <span class="comment">// 调用 nf_conntrack_in() 进入连接跟踪</span></span><br><span class="line">        .pf          = NFPROTO_IPV4,</span><br><span class="line">        .hooknum     = NF_INET_LOCAL_OUT,       <span class="comment">// LOCAL_OUT hook 点</span></span><br><span class="line">        .priority    = NF_IP_PRI_CONNTRACK,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .hook        = ipv4_confirm,            <span class="comment">// 调用 nf_conntrack_confirm()</span></span><br><span class="line">        .pf          = NFPROTO_IPV4,</span><br><span class="line">        .hooknum     = NF_INET_POST_ROUTING,    <span class="comment">// POST_ROUTING hook 点</span></span><br><span class="line">        .priority    = NF_IP_PRI_CONNTRACK_CONFIRM,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .hook        = ipv4_confirm,            <span class="comment">// 调用 nf_conntrack_confirm()</span></span><br><span class="line">        .pf          = NFPROTO_IPV4,</span><br><span class="line">        .hooknum     = NF_INET_LOCAL_IN,        <span class="comment">// LOCAL_IN hook 点</span></span><br><span class="line">        .priority    = NF_IP_PRI_CONNTRACK_CONFIRM,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>nf_conntrack_in()</code> 是<strong>连接跟踪模块的核心</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// net/netfilter/nf_conntrack_core.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span></span><br><span class="line">nf_conntrack_in(struct net *net, <span class="keyword">u_int8_t</span> pf, <span class="keyword">unsigned</span> <span class="keyword">int</span> hooknum, struct sk_buff *skb)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">nf_conn</span> *<span class="title">tmpl</span> = <span class="title">nf_ct_get</span>(<span class="title">skb</span>, &amp;<span class="title">ctinfo</span>);</span> <span class="comment">// 获取 skb 对应的 conntrack_info 和连接记录</span></span><br><span class="line">  <span class="keyword">if</span> (tmpl || ctinfo == IP_CT_UNTRACKED) &#123;        <span class="comment">// 如果记录存在，或者是不需要跟踪的类型</span></span><br><span class="line">      <span class="keyword">if</span> ((tmpl &amp;&amp; !nf_ct_is_template(tmpl)) || ctinfo == IP_CT_UNTRACKED) &#123;</span><br><span class="line">          NF_CT_STAT_INC_ATOMIC(net, ignore);     <span class="comment">// 无需跟踪的类型，增加 ignore 计数</span></span><br><span class="line">          <span class="keyword">return</span> NF_ACCEPT;                       <span class="comment">// 返回 NF_ACCEPT，继续后面的处理</span></span><br><span class="line">      &#125;</span><br><span class="line">      skb-&gt;_nfct = <span class="number">0</span>;                             <span class="comment">// 不属于 ignore 类型，计数器置零，准备后续处理</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack_l4proto</span> *<span class="title">l4proto</span> = __<span class="title">nf_ct_l4proto_find</span>(...);</span>    <span class="comment">// 提取协议相关的 L4 头信息</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (l4proto-&gt;error != <span class="literal">NULL</span>) &#123;                   <span class="comment">// skb 的完整性和合法性验证</span></span><br><span class="line">      <span class="keyword">if</span> (l4proto-&gt;error(net, tmpl, skb, dataoff, pf, hooknum) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          NF_CT_STAT_INC_ATOMIC(net, error);</span><br><span class="line">          NF_CT_STAT_INC_ATOMIC(net, invalid);</span><br><span class="line">          <span class="keyword">goto</span> out;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">repeat:</span><br><span class="line">  <span class="comment">// 开始连接跟踪：提取 tuple；创建新连接记录，或者更新已有连接的状态</span></span><br><span class="line">  resolve_normal_ct(net, tmpl, skb, ... l4proto);</span><br><span class="line"></span><br><span class="line">  l4proto-&gt;packet(ct, skb, dataoff, ctinfo); <span class="comment">// 进行一些协议相关的处理，例如 UDP 会更新 timeout</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ctinfo == IP_CT_ESTABLISHED_REPLY &amp;&amp; !test_and_set_bit(IPS_SEEN_REPLY_BIT, &amp;ct-&gt;status))</span><br><span class="line">      nf_conntrack_event_cache(IPCT_REPLY, ct);</span><br><span class="line">out:</span><br><span class="line">  <span class="keyword">if</span> (tmpl)</span><br><span class="line">      nf_ct_put(tmpl); <span class="comment">// 解除对连接记录 tmpl 的引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致流程：</p><ol><li>尝试获取这个 skb 对应的连接跟踪记录</li><li>判断是否需要对这个包做连接跟踪，如果不需要，更新 ignore 计数（<code>conntrack -S</code> 能看到这个计数）， 返回 <code>NF_ACCEPT</code>；如果需要，就<strong>初始化这个 skb 的引用计数</strong>。</li><li>从包的 L4 header 中提取信息，初始化协议相关的 <code>struct nf_conntrack_l4proto {}</code> 变量，其中包含了该协议的<strong>连接跟踪相关的回调方法</strong>。</li><li>调用该协议的 <code>error()</code> 方法检查包的完整性、校验和等信息。</li><li>调用 <code>resolve_normal_ct()</code> <strong>开始连接跟踪</strong>，它会创建新 tuple，新 conntrack entry，或者更新已有连接的状态。</li><li>调用该协议的 <code>packet()</code> 方法进行一些协议相关的处理，例如对于 UDP，如果 status bit 里面设置了 <code>IPS_SEEN_REPLY</code> 位，就会更新 timeout。timeout 大小和协 议相关，越小越越可以防止 DoS 攻击（DoS 的基本原理就是将机器的可用连接耗尽）</li></ol><h2 id="3-7-init-conntrack-：创建新连接记录"><a class="header-anchor" href="#3-7-init-conntrack-：创建新连接记录">¶</a>3.7 <code>init_conntrack()</code>：创建新连接记录</h2><p>如果连接不存在（flow 的第一个包），<code>resolve_normal_ct()</code> 会调用 <code>init_conntrack</code> ，后者进而会调用 <code>new()</code> 方法创建一个新的 conntrack entry。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/net/netfilter/nf_conntrack_core.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocate a new conntrack</span></span><br><span class="line"><span class="keyword">static</span> noinline <span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack_tuple_hash</span> *</span></span><br><span class="line"><span class="class"><span class="title">init_conntrack</span>(<span class="title">struct</span> <span class="title">net</span> *<span class="title">net</span>, <span class="title">struct</span> <span class="title">nf_conn</span> *<span class="title">tmpl</span>,</span></span><br><span class="line"><span class="class">           <span class="title">const</span> <span class="title">struct</span> <span class="title">nf_conntrack_tuple</span> *<span class="title">tuple</span>,</span></span><br><span class="line"><span class="class">           <span class="title">const</span> <span class="title">struct</span> <span class="title">nf_conntrack_l4proto</span> *<span class="title">l4proto</span>,</span></span><br><span class="line"><span class="class">           <span class="title">struct</span> <span class="title">sk_buff</span> *<span class="title">skb</span>, <span class="title">unsigned</span> <span class="title">int</span> <span class="title">dataoff</span>, <span class="title">u32</span> <span class="title">hash</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nf_conn</span> *<span class="title">ct</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 conntrack table 中分配一个 entry，如果哈希表满了，会在内核日志中打印</span></span><br><span class="line">    <span class="comment">// "nf_conntrack: table full, dropping packet" 信息，通过 `dmesg -T` 能看到</span></span><br><span class="line">    ct = __nf_conntrack_alloc(net, zone, tuple, &amp;repl_tuple, GFP_ATOMIC, hash);</span><br><span class="line"></span><br><span class="line">    l4proto-&gt;<span class="keyword">new</span>(ct, skb, dataoff); <span class="comment">// 协议相关的方法</span></span><br><span class="line"></span><br><span class="line">    local_bh_disable();             <span class="comment">// 关闭软中断</span></span><br><span class="line">    <span class="keyword">if</span> (net-&gt;ct.expect_count) &#123;</span><br><span class="line">        <span class="built_in">exp</span> = nf_ct_find_expectation(net, zone, tuple);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">exp</span>) &#123;</span><br><span class="line">            <span class="comment">/* Welcome, Mr. Bond.  We've been expecting you... */</span></span><br><span class="line">            __set_bit(IPS_EXPECTED_BIT, &amp;ct-&gt;status);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* exp-&gt;master safe, refcnt bumped in nf_ct_find_expectation */</span></span><br><span class="line">            ct-&gt;master = <span class="built_in">exp</span>-&gt;master;</span><br><span class="line">            ct-&gt;mark = <span class="built_in">exp</span>-&gt;master-&gt;mark;</span><br><span class="line">            ct-&gt;secmark = <span class="built_in">exp</span>-&gt;master-&gt;secmark;</span><br><span class="line">            NF_CT_STAT_INC(net, expect_new);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Now it is inserted into the unconfirmed list, bump refcount */</span></span><br><span class="line">    <span class="comment">// 至此这个新的 conntrack entry 已经被插入 unconfirmed list</span></span><br><span class="line">    nf_conntrack_get(&amp;ct-&gt;ct_general);</span><br><span class="line">    nf_ct_add_to_unconfirmed_list(ct);</span><br><span class="line"></span><br><span class="line">    local_bh_enable();              <span class="comment">// 重新打开软中断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">exp</span>-&gt;expectfn)</span><br><span class="line">            <span class="built_in">exp</span>-&gt;expectfn(ct, <span class="built_in">exp</span>);</span><br><span class="line">        nf_ct_expect_put(<span class="built_in">exp</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;ct-&gt;tuplehash[IP_CT_DIR_ORIGINAL];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每种协议需要实现自己的 <code>l4proto-&gt;new()</code> 方法，代码见：<code>net/netfilter/nf_conntrack_proto_*.c</code>。 例如 TCP 协议对应的 <code>new()</code> 方法是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// net/netfilter/nf_conntrack_proto_tcp.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Called when a new connection for this protocol found. */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">tcp_new</span><span class="params">(struct nf_conn *ct, <span class="keyword">const</span> struct sk_buff *skb, <span class="keyword">unsigned</span> <span class="keyword">int</span> dataoff)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (new_state == TCP_CONNTRACK_SYN_SENT) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;ct-&gt;proto.tcp, <span class="number">0</span>, <span class="keyword">sizeof</span>(ct-&gt;proto.tcp));</span><br><span class="line">        <span class="comment">/* SYN packet */</span></span><br><span class="line">        ct-&gt;proto.tcp.seen[<span class="number">0</span>].td_end = segment_seq_plus_len(ntohl(th-&gt;seq), skb-&gt;len, dataoff, th);</span><br><span class="line">        ct-&gt;proto.tcp.seen[<span class="number">0</span>].td_maxwin = ntohs(th-&gt;window);</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前包会影响后面包的状态判断，<code>init_conntrack()</code> 会设置 <code>struct nf_conn</code> 的 <code>master</code> 字段。面向连接的协议会用到这个特性，例如 TCP。</p><h2 id="3-8-nf-conntrack-confirm-：确认包没有被丢弃"><a class="header-anchor" href="#3-8-nf-conntrack-confirm-：确认包没有被丢弃">¶</a>3.8 <code>nf_conntrack_confirm()</code>：确认包没有被丢弃</h2><p><code>nf_conntrack_in()</code> 创建的新 conntrack entry 会插入到一个 <strong>未确认连接</strong>（ unconfirmed connection）列表。</p><p>如果这个包之后没有被丢弃，那它在经过 <code>POST_ROUTING</code> 时会被 <code>nf_conntrack_confirm()</code> 方法处理，原理我们在分析过了 3.6 节的开头分析过了。 <code>nf_conntrack_confirm()</code> 完成之后，状态就变为了 <code>IPS_CONFIRMED</code>，并且连接记录从 <strong>未确认列表</strong>移到<strong>正常</strong>的列表。</p><p>之所以把创建一个新 entry 的过程分为创建（new）和确认（confirm）两个阶段 ，是因为<strong>包在经过 nf_conntrack_in() 之后，到达 nf_conntrack_confirm() 之前 ，可能会被内核丢弃</strong>。这样会导致系统残留大量的半连接状态记录，在性能和安全性上都 是很大问题。分为两步之后，可以加快半连接状态 conntrack entry 的 GC。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/net/netfilter/nf_conntrack_core.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Confirm a connection: returns NF_DROP if packet must be dropped. */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nf_conntrack_confirm</span><span class="params">(struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nf_conn</span> *<span class="title">ct</span> = (<span class="title">struct</span> <span class="title">nf_conn</span> *)<span class="title">skb_nfct</span>(<span class="title">skb</span>);</span></span><br><span class="line">    <span class="keyword">int</span> ret = NF_ACCEPT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ct) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!nf_ct_is_confirmed(ct))</span><br><span class="line">            ret = __nf_conntrack_confirm(skb);</span><br><span class="line">        <span class="keyword">if</span> (likely(ret == NF_ACCEPT))</span><br><span class="line">            nf_ct_deliver_cached_events(ct);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>confirm 逻辑，省略了各种错误处理逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// net/netfilter/nf_conntrack_core.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Confirm a connection given skb; places it in hash table */</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">__nf_conntrack_confirm(struct sk_buff *skb)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nf_conn</span> *<span class="title">ct</span>;</span></span><br><span class="line">    ct = nf_ct_get(skb, &amp;ctinfo);</span><br><span class="line"></span><br><span class="line">    local_bh_disable();               <span class="comment">// 关闭软中断</span></span><br><span class="line"></span><br><span class="line">    hash = *(<span class="keyword">unsigned</span> <span class="keyword">long</span> *)&amp;ct-&gt;tuplehash[IP_CT_DIR_REPLY].hnnode.pprev;</span><br><span class="line">    reply_hash = hash_conntrack(net, &amp;ct-&gt;tuplehash[IP_CT_DIR_REPLY].tuple);</span><br><span class="line"></span><br><span class="line">    ct-&gt;timeout += nfct_time_stamp;   <span class="comment">// 更新连接超时时间，超时后会被 GC</span></span><br><span class="line">    atomic_inc(&amp;ct-&gt;ct_general.use);  <span class="comment">// 设置连接引用计数？</span></span><br><span class="line">    ct-&gt;status |= IPS_CONFIRMED;      <span class="comment">// 设置连接状态为 confirmed</span></span><br><span class="line"></span><br><span class="line">    __nf_conntrack_hash_insert(ct, hash, reply_hash);  <span class="comment">// 插入到连接跟踪哈希表</span></span><br><span class="line"></span><br><span class="line">    local_bh_enable();                <span class="comment">// 重新打开软中断</span></span><br><span class="line"></span><br><span class="line">    nf_conntrack_event_cache(master_ct(ct) ? IPCT_RELATED : IPCT_NEW, ct);</span><br><span class="line">    <span class="keyword">return</span> NF_ACCEPT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<strong>连接跟踪的处理逻辑中需要频繁关闭和打开软中断</strong>，此外还有各种锁， 这是短连高并发场景下连接跟踪性能损耗的主要原因？。</p><p>NAT 是与连接跟踪独立的模块。</p><h2 id="4-1-重要数据结构和函数"><a class="header-anchor" href="#4-1-重要数据结构和函数">¶</a>4.1 重要数据结构和函数</h2><p><strong>重要数据结构：</strong></p><p>支持 NAT 的协议需要实现其中的方法：</p><ul><li><code>struct nf_nat_l3proto {}</code></li><li><code>struct nf_nat_l4proto {}</code></li></ul><p><strong>重要函数：</strong></p><ul><li><code>nf_nat_inet_fn()</code>：NAT 的核心函数，在<strong>除 NF_INET_FORWARD 之外的其他 hook 点都会被调用</strong>。</li></ul><h2 id="4-2-NAT-模块初始化"><a class="header-anchor" href="#4-2-NAT-模块初始化">¶</a>4.2 NAT 模块初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// net/netfilter/nf_nat_core.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">nf_nat_hook</span> <span class="title">nat_hook</span> = &#123;</span></span><br><span class="line">    .parse_nat_setup    = nfnetlink_parse_nat_setup,</span><br><span class="line">    .decode_session        = __nf_nat_decode_session,</span><br><span class="line">    .manip_pkt        = nf_nat_manip_pkt,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">nf_nat_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nf_nat_bysource = nf_ct_alloc_hashtable(&amp;nf_nat_htable_size, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    nf_ct_helper_expectfn_register(&amp;follow_master_nat);</span><br><span class="line"></span><br><span class="line">    RCU_INIT_POINTER(nf_nat_hook, &amp;nat_hook);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">module_init(nf_nat_init);</span><br></pre></td></tr></table></figure><h2 id="4-3-struct-nf-nat-l3proto-：协议相关的-NAT-方法集"><a class="header-anchor" href="#4-3-struct-nf-nat-l3proto-：协议相关的-NAT-方法集">¶</a>4.3 <code>struct nf_nat_l3proto {}</code>：协议相关的 NAT 方法集</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/net/netfilter/nf_nat_l3proto.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nf_nat_l3proto</span> &#123;</span></span><br><span class="line">    u8    l3proto; <span class="comment">// 例如，AF_INET</span></span><br><span class="line"></span><br><span class="line">    u32     (*secure_port    )(<span class="keyword">const</span> struct nf_conntrack_tuple *t, __be16);</span><br><span class="line">    <span class="keyword">bool</span>    (*manip_pkt      )(struct sk_buff *skb, ...);</span><br><span class="line">    <span class="keyword">void</span>    (*csum_update    )(struct sk_buff *skb, ...);</span><br><span class="line">    <span class="keyword">void</span>    (*csum_recalc    )(struct sk_buff *skb, u8 proto, ...);</span><br><span class="line">    <span class="keyword">void</span>    (*decode_session )(struct sk_buff *skb, ...);</span><br><span class="line">    <span class="keyword">int</span>     (*nlattr_to_range)(struct nlattr *tb[], struct nf_nat_range2 *range);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-4-struct-nf-nat-l4proto-：协议相关的-NAT-方法集"><a class="header-anchor" href="#4-4-struct-nf-nat-l4proto-：协议相关的-NAT-方法集">¶</a>4.4 <code>struct nf_nat_l4proto {}</code>：协议相关的 NAT 方法集</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// include/net/netfilter/nf_nat_l4proto.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nf_nat_l4proto</span> &#123;</span></span><br><span class="line">    u8 l4proto; <span class="comment">// Protocol number，例如 IPPROTO_UDP, IPPROTO_TCP</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据传入的 tuple 和 NAT 类型（SNAT/DNAT）修改包的 L3/L4 头</span></span><br><span class="line">    <span class="keyword">bool</span> (*manip_pkt)(struct sk_buff *skb, *l3proto, *tuple, maniptype);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个唯一的 tuple</span></span><br><span class="line">    <span class="comment">// 例如对于 UDP，会根据 src_ip, dst_ip, src_port 加一个随机数生成一个 16bit 的 dst_port</span></span><br><span class="line">    <span class="keyword">void</span> (*unique_tuple)(*l3proto, tuple, struct nf_nat_range2 *range, maniptype, struct nf_conn *ct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the address range is exhausted the NAT modules will begin to drop packets.</span></span><br><span class="line">    <span class="keyword">int</span> (*nlattr_to_range)(struct nlattr *tb[], struct nf_nat_range2 *range);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>各协议实现的方法，见：<code>net/netfilter/nf_nat_proto_*.c</code>。例如 TCP 的实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// net/netfilter/nf_nat_proto_tcp.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">nf_nat_l4proto</span> <span class="title">nf_nat_l4proto_tcp</span> = &#123;</span></span><br><span class="line">    .l4proto        = IPPROTO_TCP,</span><br><span class="line">    .manip_pkt        = tcp_manip_pkt,</span><br><span class="line">    .in_range        = nf_nat_l4proto_in_range,</span><br><span class="line">    .unique_tuple        = tcp_unique_tuple,</span><br><span class="line">    .nlattr_to_range    = nf_nat_l4proto_nlattr_to_range,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-5-nf-nat-inet-fn-：进入-NAT"><a class="header-anchor" href="#4-5-nf-nat-inet-fn-：进入-NAT">¶</a>4.5 <code>nf_nat_inet_fn()</code>：进入 NAT</h2><p>NAT 的核心函数是 <code>nf_nat_inet_fn()</code>，它会在以下 hook 点被调用：</p><ul><li><code>NF_INET_PRE_ROUTING</code></li><li><code>NF_INET_POST_ROUTING</code></li><li><code>NF_INET_LOCAL_OUT</code></li><li><code>NF_INET_LOCAL_IN</code></li></ul><p>也就是除了 <code>NF_INET_FORWARD</code> 之外其他 hook 点都会被调用。</p><p><strong>在这些 hook 点的优先级</strong>：<strong>Conntrack &gt; NAT &gt; Packet Filtering</strong>。 <strong>连接跟踪的优先级高于 NAT</strong> 是因为 NAT 依赖连接跟踪的结果。</p><p><img src="/public/2022/12/04/linux_network/conntrack_linux/hook-to-nat.png" alt></p><p>Fig. NAT</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span></span><br><span class="line">nf_nat_inet_fn(<span class="keyword">void</span> *priv, struct sk_buff *skb, <span class="keyword">const</span> struct nf_hook_state *state)</span><br><span class="line">&#123;</span><br><span class="line">    ct = nf_ct_get(skb, &amp;ctinfo);</span><br><span class="line">    <span class="keyword">if</span> (!ct)    <span class="comment">// conntrack 不存在就做不了 NAT，直接返回，这也是我们为什么说 NAT 依赖 conntrack 的结果</span></span><br><span class="line">        <span class="keyword">return</span> NF_ACCEPT;</span><br><span class="line"></span><br><span class="line">    nat = nfct_nat(ct);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (ctinfo) &#123;</span><br><span class="line">    <span class="keyword">case</span> IP_CT_RELATED:</span><br><span class="line">    <span class="keyword">case</span> IP_CT_RELATED_REPLY: <span class="comment">/* Only ICMPs can be IP_CT_IS_REPLY.  Fallthrough */</span></span><br><span class="line">    <span class="keyword">case</span> IP_CT_NEW: <span class="comment">/* Seen it before? This can happen for loopback, retrans, or local packets. */</span></span><br><span class="line">        <span class="keyword">if</span> (!nf_nat_initialized(ct, maniptype)) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">nf_hook_entries</span> *<span class="title">e</span> = <span class="title">rcu_dereference</span>(<span class="title">lpriv</span>-&gt;<span class="title">entries</span>);</span> <span class="comment">// 获取所有 NAT 规则</span></span><br><span class="line">            <span class="keyword">if</span> (!e)</span><br><span class="line">                <span class="keyword">goto</span> null_bind;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; e-&gt;num_hook_entries; i++) &#123; <span class="comment">// 依次执行 NAT 规则</span></span><br><span class="line">                <span class="keyword">if</span> (e-&gt;hooks[i].hook(e-&gt;hooks[i].priv, skb, state) != NF_ACCEPT )</span><br><span class="line">                    <span class="keyword">return</span> ret;                         <span class="comment">// 任何规则返回非 NF_ACCEPT，就停止当前处理</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (nf_nat_initialized(ct, maniptype))</span><br><span class="line">                    <span class="keyword">goto</span> do_nat;</span><br><span class="line">            &#125;</span><br><span class="line">null_bind:</span><br><span class="line">            nf_nat_alloc_null_binding(ct, state-&gt;hook);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// Already setup manip</span></span><br><span class="line">            <span class="keyword">if</span> (nf_nat_oif_changed(state-&gt;hook, ctinfo, nat, state-&gt;out))</span><br><span class="line">                <span class="keyword">goto</span> oif_changed;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">/* ESTABLISHED */</span></span><br><span class="line">        <span class="keyword">if</span> (nf_nat_oif_changed(state-&gt;hook, ctinfo, nat, state-&gt;out))</span><br><span class="line">            <span class="keyword">goto</span> oif_changed;</span><br><span class="line">    &#125;</span><br><span class="line">do_nat:</span><br><span class="line">    <span class="keyword">return</span> nf_nat_packet(ct, ctinfo, state-&gt;hook, skb);</span><br><span class="line">oif_changed:</span><br><span class="line">    nf_ct_kill_acct(ct, ctinfo, skb);</span><br><span class="line">    <span class="keyword">return</span> NF_DROP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先查询 conntrack 记录，如果不存在，就意味着无法跟踪这个连接，那就更不可能做 NAT 了，因此直接返回。</p><p>如果找到了 conntrack 记录，并且是 <code>IP_CT_RELATED</code>、<code>IP_CT_RELATED_REPLY</code> 或 <code>IP_CT_NEW</code> 状态，就去获取 NAT 规则。如果没有规则，直接返回 <code>NF_ACCEPT</code>，对包不 做任何改动；如果有规则，最后执行 <code>nf_nat_packet</code>，这个函数会进一步调用 <code>manip_pkt</code> 完成对包的修改，如果失败，包将被丢弃。</p><h3 id="Masquerade"><a class="header-anchor" href="#Masquerade">¶</a>Masquerade</h3><p>NAT 模块</p><ul><li>一般配置方式：<code>Change IP1 to IP2 if matching XXX</code>。</li><li>高级配置方式：<code>Change IP1 to dev1's IP if matching XXX</code>，这种方式称为 Masquerade。</li></ul><p>Masquerade 优缺点：</p><ul><li>优点：<strong>当设备（网卡）的 IP 地址发生变化时，NAT 规则无需做任何修改</strong>。</li><li>缺点：<strong>性能比第一种方式要差</strong>。</li></ul><h2 id="4-6-nf-nat-packet-：执行-NAT"><a class="header-anchor" href="#4-6-nf-nat-packet-：执行-NAT">¶</a>4.6 <code>nf_nat_packet()</code>：执行 NAT</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// net/netfilter/nf_nat_core.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Do packet manipulations according to nf_nat_setup_info. */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">nf_nat_packet</span><span class="params">(struct nf_conn *ct, <span class="keyword">enum</span> ip_conntrack_info ctinfo,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">unsigned</span> <span class="keyword">int</span> hooknum, struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> nf_nat_manip_type mtype = HOOK2MANIP(hooknum);</span><br><span class="line">    <span class="keyword">enum</span> ip_conntrack_dir dir = CTINFO2DIR(ctinfo);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> verdict = NF_ACCEPT;</span><br><span class="line"></span><br><span class="line">    statusbit = (mtype == NF_NAT_MANIP_SRC? IPS_SRC_NAT : IPS_DST_NAT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dir == IP_CT_DIR_REPLY)     <span class="comment">// Invert if this is reply dir</span></span><br><span class="line">        statusbit ^= IPS_NAT_MASK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ct-&gt;status &amp; statusbit)     <span class="comment">// Non-atomic: these bits don't change. */</span></span><br><span class="line">        verdict = nf_nat_manip_pkt(skb, ct, mtype, dir);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> verdict;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">nf_nat_manip_pkt</span><span class="params">(struct sk_buff *skb, struct nf_conn *ct,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">enum</span> nf_nat_manip_type mtype, <span class="keyword">enum</span> ip_conntrack_dir dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">nf_conntrack_tuple</span> <span class="title">target</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We are aiming to look like inverse of other direction. */</span></span><br><span class="line">    nf_ct_invert_tuplepr(&amp;target, &amp;ct-&gt;tuplehash[!dir].tuple);</span><br><span class="line"></span><br><span class="line">    l3proto = __nf_nat_l3proto_find(target.src.l3num);</span><br><span class="line">    l4proto = __nf_nat_l4proto_find(target.src.l3num, target.dst.protonum);</span><br><span class="line">    <span class="keyword">if</span> (!l3proto-&gt;manip_pkt(skb, <span class="number">0</span>, l4proto, &amp;target, mtype)) <span class="comment">// 协议相关处理</span></span><br><span class="line">        <span class="keyword">return</span> NF_DROP;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NF_ACCEPT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-1-查看-加载-卸载-nf-conntrack-模块"><a class="header-anchor" href="#5-1-查看-加载-卸载-nf-conntrack-模块">¶</a>5.1 查看 / 加载 / 卸载 nf_conntrack 模块</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ modinfo nf_conntrack</span><br><span class="line">filename:       /lib/modules/5.15.0-46-generic/kernel/net/netfilter/nf_conntrack.ko</span><br><span class="line">license:        GPL</span><br><span class="line"><span class="built_in">alias</span>:          nf_conntrack-10</span><br><span class="line"><span class="built_in">alias</span>:          nf_conntrack-2</span><br><span class="line"><span class="built_in">alias</span>:          ip_conntrack</span><br><span class="line">srcversion:     30B45E5822722ACEDE23A4B</span><br><span class="line">depends:        nf_defrag_ipv6,libcrc32c,nf_defrag_ipv4</span><br><span class="line">retpoline:      Y</span><br><span class="line">intree:         Y</span><br><span class="line">name:           nf_conntrack</span><br><span class="line">vermagic:       5.15.0-46-generic SMP mod_unload modversions</span><br><span class="line">sig_id:         PKCS<span class="comment">#7</span></span><br><span class="line">signer:         Build time autogenerated kernel key</span><br><span class="line">sig_key:        17:6F:92:2F:58:6B:B2:28:13:DC:71:DC:5A:97:EE:BA:D8:4B:C7:DE</span><br><span class="line">sig_hashalgo:   sha512</span><br><span class="line">signature:      0B:32:AA:93:F4:31:52:9C:FE:0D:80:B4:F6:7C:30:63:4C:F6:03:AA:</span><br><span class="line">                ...</span><br><span class="line">                E9:1F:45:C6:77:C2:29:99:B4:3D:1A:D2</span><br><span class="line">parm:           tstamp:Enable connection tracking flow timestamping. (bool)</span><br><span class="line">parm:           acct:Enable connection tracking flow accounting. (bool)</span><br><span class="line">parm:           nf_conntrack_helper:Enable automatic conntrack helper assignment (default 0) (bool)</span><br><span class="line">parm:           expect_hashsize:uint</span><br><span class="line">parm:           enable_hooks:Always <span class="built_in">enable</span> conntrack hooks (bool)</span><br></pre></td></tr></table></figure><p>卸载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rmmod nf_conntrack_netlink nf_conntrack</span><br></pre></td></tr></table></figure><p>重新加载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ modprobe nf_conntrack</span><br><span class="line"></span><br><span class="line"># 加载时还可以指定额外的配置参数，例如：</span><br><span class="line">$ modprobe nf_conntrack nf_conntrack_helper=1 expect_hashsize=131072</span><br></pre></td></tr></table></figure><h2 id="5-2-sysctl-配置项"><a class="header-anchor" href="#5-2-sysctl-配置项">¶</a>5.2 sysctl 配置项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -a | grep nf_conntrack</span><br><span class="line">net.netfilter.nf_conntrack_acct = 0</span><br><span class="line">net.netfilter.nf_conntrack_buckets = 262144                 # hashsize = nf_conntrack_max/nf_conntrack_buckets</span><br><span class="line">net.netfilter.nf_conntrack_checksum = 1</span><br><span class="line">net.netfilter.nf_conntrack_count = 2148</span><br><span class="line">... # DCCP options</span><br><span class="line">net.netfilter.nf_conntrack_events = 1</span><br><span class="line">net.netfilter.nf_conntrack_expect_max = 1024</span><br><span class="line">... # IPv6 options</span><br><span class="line">net.netfilter.nf_conntrack_generic_timeout = 600</span><br><span class="line">net.netfilter.nf_conntrack_helper = 0</span><br><span class="line">net.netfilter.nf_conntrack_icmp_timeout = 30</span><br><span class="line">net.netfilter.nf_conntrack_log_invalid = 0</span><br><span class="line">net.netfilter.nf_conntrack_max = 1048576                    # conntrack table size</span><br><span class="line">... # SCTP options</span><br><span class="line">net.netfilter.nf_conntrack_tcp_be_liberal = 0</span><br><span class="line">net.netfilter.nf_conntrack_tcp_loose = 1</span><br><span class="line">net.netfilter.nf_conntrack_tcp_max_retrans = 3</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_close = 10</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_close_wait = 60</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_established = 21600</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_last_ack = 30</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_max_retrans = 300</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 60</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 120</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120</span><br><span class="line">net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 300</span><br><span class="line">net.netfilter.nf_conntrack_timestamp = 0</span><br><span class="line">net.netfilter.nf_conntrack_udp_timeout = 30</span><br><span class="line">net.netfilter.nf_conntrack_udp_timeout_stream = 180</span><br></pre></td></tr></table></figure><h2 id="5-3-监控"><a class="header-anchor" href="#5-3-监控">¶</a>5.3 监控</h2><h3 id="丢包监控"><a class="header-anchor" href="#丢包监控">¶</a>丢包监控</h3><p><code>/proc/net/stat</code> 下面有一些关于 conntrack 的详细统计：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/net/stat/nf_conntrack</span><br><span class="line">entries   searched found    new      invalid  ignore   delete   delete_list insert   insert_failed drop     early_drop icmp_error  expect_new expect_create expect_delete search_restart</span><br><span class="line">000008e3  00000000 00000000 00000000 0000309d 001e72d4 00000000 00000000    00000000 00000000      00000000 00000000   000000ee    00000000   00000000      00000000       000368d7</span><br><span class="line">000008e3  00000000 00000000 00000000 00007301 002b8e8c 00000000 00000000    00000000 00000000      00000000 00000000   00000170    00000000   00000000      00000000       00035794</span><br><span class="line">000008e3  00000000 00000000 00000000 00001eea 001e6382 00000000 00000000    00000000 00000000      00000000 00000000   00000059    00000000   00000000      00000000       0003f166</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此外，还可以用 <code>conntrack</code> 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ conntrack -S</span><br><span class="line">cpu=0   found=0 invalid=743150 ignore=238069 insert=0 insert_failed=0 drop=195603 early_drop=118583 error=16 search_restart=22391652</span><br><span class="line">cpu=1   found=0 invalid=2004   ignore=402790 insert=0 insert_failed=0 drop=44371  early_drop=34890  error=0  search_restart=1225447</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>ignore：不需要做连接跟踪的包（回忆前面，只有特定协议的包才会做连接跟踪）</li></ul><h3 id="conntrack-table-使用量监控"><a class="header-anchor" href="#conntrack-table-使用量监控">¶</a>conntrack table 使用量监控</h3><p>可以定期采集系统的 conntrack 使用量，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/sys/net/netfilter/nf_conntrack_count</span><br><span class="line">257273</span><br></pre></td></tr></table></figure><p>并与最大值比较：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/sys/net/netfilter/nf_conntrack_max</span><br><span class="line">262144</span><br></pre></td></tr></table></figure><h2 id="6-1-连接太多导致-conntrack-table-被打爆"><a class="header-anchor" href="#6-1-连接太多导致-conntrack-table-被打爆">¶</a>6.1 连接太多导致 conntrack table 被打爆</h2><h3 id="现象"><a class="header-anchor" href="#现象">¶</a>现象</h3><h4 id="业务层（应用层）现象"><a class="header-anchor" href="#业务层（应用层）现象">¶</a>业务层（应用层）现象</h4><ol><li><p>存在随机、偶发的<strong>新建连接</strong>超时（connect timeout）。</p><p>例如，如果业务用的是 Java，那对应的是 <code>jdbc4.CommunicationsException</code> communications link failure 之类的错误。</p></li><li><p><strong>已有连接</strong>正常。</p><p>也就是没有 read timeout 或 write timeout 之类的报错，报错都集中为 connect timeout。</p></li></ol><h4 id="网络层现象"><a class="header-anchor" href="#网络层现象">¶</a>网络层现象</h4><ol><li><p>抓包会看到三次握手的<strong>第一个 SYN 包被宿主机静默丢弃了</strong>。</p><p>需要注意的是，常规的网卡统计（<code>ifconfig</code>）和内核统计（<code>/proc/net/softnet_stat</code>） <strong>无法反映出这些丢包</strong>。</p></li><li><p><code>1s+</code> 之后出发 SYN 重传，或者还没重传连接就关闭了。</p><p><strong>第一个 SYN 的重传是 1s，这个是内核代码里写死的，不可配置</strong>（具体实现见 <a href="#ch_8.1">附录</a>）。</p><p>再考虑到其他一些耗时，第一次重传的实际间隔要大于 1s。 如果客户端设置的超时时间很小，例如 <code>1.05s</code>，那可能来不及重传连接就被关闭了，然后向上层报 connect timeout 错误。</p></li></ol><h4 id="操作系统层现象"><a class="header-anchor" href="#操作系统层现象">¶</a>操作系统层现象</h4><p>内核日志中有如下报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ demsg -T</span><br><span class="line">[Tue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet</span><br><span class="line">[Tue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet</span><br><span class="line">[Tue Apr  6 18:12:30 2021] nf_conntrack: nf_conntrack: table full, dropping packet</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>另外，<code>cat /proc/net/stat/nf_conntrack</code> 或 <code>conntrack -S</code> 能看到有 drop 统计。</p><h3 id="确认-conntrack-table-被打爆"><a class="header-anchor" href="#确认-conntrack-table-被打爆">¶</a>确认 conntrack table 被打爆</h3><p>遇到以上现象，基本就是 conntrack 表被打爆了。确认：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/sys/net/netfilter/nf_conntrack_count</span><br><span class="line">257273</span><br><span class="line"></span><br><span class="line">$ cat /proc/sys/net/netfilter/nf_conntrack_max</span><br><span class="line">net.netfilter.nf_conntrack_max = 262144</span><br></pre></td></tr></table></figure><p>如果有 conntrack count 监控会看的更清楚，因为我们命令行查看时，高峰可能过了。</p><h3 id="解决方式"><a class="header-anchor" href="#解决方式">¶</a>解决方式</h3><p>优先级从高到低：</p><ol><li><p>调大 conntrack 表</p><p>运行时配置（经实际测试，<strong>不会对现有连接造成影响</strong>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -w net.netfilter.nf_conntrack_max=524288</span><br><span class="line">$ sysctl -w net.netfilter.nf_conntrack_buckets=131072 # 推荐配置 hashsize=nf_conntrack_count/4</span><br></pre></td></tr></table></figure><p>持久化配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &apos;net.netfilter.nf_conntrack_max = 524288&apos; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">$ echo &apos;net.netfilter.nf_conntrack_buckets = 131072&apos; &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>影响：连接跟踪模块<strong>会多用一些内存</strong>。具体多用多少内存，可参考 <a href="#ch_8.2">附录</a>。</p></li><li><p>减小 GC 时间</p><p>还可以调小 conntrack 的 GC（也叫 timeout）时间，加快过期 entry 的回收。</p><p><code>nf_conntrack</code> 针对不同 TCP 状态（established、fin_wait、time_wait 等）的 entry 有不同的 GC 时间。</p><p>例如，<strong>默认的 established 状态的 GC 时间是 423000s（5 天）</strong>。设置成这么长的 <strong>可能原因</strong>是：TCP/IP 协议中允许 established 状态的连接无限期不发送任何东西（但仍然活着） [8]，协议的具体实现（Linux、BSD、Windows 等）会设置各自允许的最大 idle timeout。为防止 GC 掉这样长时间没流量但实际还活着的连接，就设置一个足够保守的 timeout 时间。[8] 中建议这个值不小于 2 小时 4 分钟（作为对比和参考， <strong>Cilium 自己实现的 CT 中，默认 established GC 是 6 小时</strong>）。 但也能看到一些厂商推荐比这个小得多的配置，例如 20 分钟。</p><p>如果对自己的网络环境和需求非常清楚，那可以将这个时间调到一个合理的、足够小的值； 如果不是非常确定的话，还是<strong>建议保守一些，例如设置 6 个小时</strong> —— 这已经比默认值 5 天小多了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -w net.netfilter.nf_conntrack_tcp_timeout_established = 21600</span><br></pre></td></tr></table></figure><p>持久化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &apos;net.netfilter.nf_conntrack_tcp_timeout_established = 21600&apos; &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>其他几个 timeout 值（尤其是 <code>nf_conntrack_tcp_timeout_time_wait</code>，默认 <code>120s</code>）也可以适当调小， 但还是那句话：<strong>如果不确定潜在后果，千万不要激进地调小</strong>。</p></li></ol><p>连接跟踪是一个非常基础且重要的网络模块，但只有在少数场景下才会引起普通开发者的注意。</p><p>例如，L4LB 短时高并发场景下，LB 节点每秒接受大量并发短连接，可能导致 conntrack table 被打爆。此时的现象是：</p><ul><li>客户端和 L4LB 建连失败，失败可能是随机的，也可能是集中在某些时间点。</li><li>客户端重试可能会成功，也可能会失败。</li><li>在 L4LB 节点抓包看，客户端过来的 TCP SYNC 包 L4LB 收到了，但没有回 ACK。即，包 被静默丢弃了（silently dropped）。</li></ul><p>此时的原因可能是 conntrack table 太小，也可能是 GC 不够及 时，甚至是 <a href="https://github.com/cilium/cilium/pull/12729" target="_blank" rel="noopener">GC 有 bug</a>。</p><h2 id="8-1-第一个-SYN-包的重传间隔计算（Linux-4-19-118-实现）"><a class="header-anchor" href="#8-1-第一个-SYN-包的重传间隔计算（Linux-4-19-118-实现）">¶</a>8.1 第一个 SYN 包的重传间隔计算（Linux 4.19.118 实现）</h2><p>调用路径：<code>tcp_connect() -&gt; tcp_connect_init() -&gt; tcp_timeout_init()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// net/ipv4/tcp_output.c</span></span><br><span class="line"><span class="comment">/* Do all connect socket setups that can be done AF independent. */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tcp_connect_init</span><span class="params">(struct sock *sk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    inet_csk(sk)-&gt;icsk_rto = tcp_timeout_init(sk);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// include/net/tcp.h</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> u32 <span class="title">tcp_timeout_init</span><span class="params">(struct sock *sk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取 SYN-RTO：如果这个 socket 上没有 BPF 程序，或者有 BPF 程序但执行失败，都返回 -1</span></span><br><span class="line">    <span class="comment">// 除非用户自己编写 BPF 程序并 attach 到 cgroup/socket，否则这里都是没有 BPF 的，因此这里返回 -1</span></span><br><span class="line">    timeout = tcp_call_bpf(sk, BPF_SOCK_OPS_TIMEOUT_INIT, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout &lt;= <span class="number">0</span>)                <span class="comment">// timeout == -1，接下来使用默认值</span></span><br><span class="line">        timeout = TCP_TIMEOUT_INIT;  <span class="comment">// 宏定义，等于系统的 HZ 数，也就是 1 秒，见下面</span></span><br><span class="line">    <span class="keyword">return</span> timeout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// include/net/tcp.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TCP_RTO_MAX    ((unsigned)(120*HZ))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TCP_RTO_MIN    ((unsigned)(HZ/5))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TCP_TIMEOUT_MIN    (2U) <span class="comment">/* Min timeout for TCP timers in jiffies */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TCP_TIMEOUT_INIT ((unsigned)(1*HZ))    <span class="comment">/* RFC6298 2.1 initial RTO value    */</span></span></span><br></pre></td></tr></table></figure><h2 id="8-2-根据-nf-conntrack-max-计算-conntrack-模块所需的内存"><a class="header-anchor" href="#8-2-根据-nf-conntrack-max-计算-conntrack-模块所需的内存">¶</a>8.2 根据 nf_conntrack_max 计算 conntrack 模块所需的内存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/slabinfo | head -n2; cat /proc/slabinfo | grep conntrack</span><br><span class="line">slabinfo - version: 2.1</span><br><span class="line"># name            &lt;active_objs&gt; &lt;num_objs&gt; &lt;objsize&gt; &lt;objperslab&gt; &lt;pagesperslab&gt; : tunables &lt;limit&gt; &lt;batchcount&gt; &lt;sharedfactor&gt; : slabdata &lt;active_slabs&gt; &lt;num_slabs&gt; &lt;sharedavail&gt;</span><br><span class="line">nf_conntrack      512824 599505    320   51    4 : tunables    0    0    0 : slabdata  11755  11755      0</span><br></pre></td></tr></table></figure><p>其中的 <strong>objsize 表示这个内核对象</strong>（这里对应的是 <code>struct nf_conn</code>）的大小， 单位是<strong>字节</strong>，所以以上输出表明<strong>每个 conntrack entry 占用 320 字节的内存空间</strong>。</p><p>如果忽略内存碎片（内存分配单位为 slab），那<strong>不同 size 的 conntrack table 占用的内存</strong>如下：</p><ul><li><code>nf_conntrack_max=512K</code>: <code>512K * 320Byte = 160MB</code></li><li><code>nf_conntrack_max=1M</code>: <code>1M * 320Byte = 320MB</code></li></ul><p>更精确的计算，可以参考 [9]。</p><ol><li><a href="https://wiki.aalto.fi/download/attachments/69901948/netfilter-paper.pdf" target="_blank" rel="noopener">Netfilter connection tracking and NAT implementation</a>. Proc. Seminar on Network Protocols in Operating Systems, Dept. Commun. and Networking, Aalto Univ. 2013.</li><li><a href="https://docs.cilium.io/en/v1.7/gettingstarted/kubeproxy-free/" target="_blank" rel="noopener">Cilium: Kubernetes without kube-proxy</a></li><li><a href="chrome-extension://ijllcpnolfcooahcekpamkbidhejabll/blog/k8s-l4lb/" target="_blank" rel="noopener">L4LB for Kubernetes: Theory and Practice with Cilium+BGP+ECMP</a></li><li><a href="https://docs.docker.com/network/bridge/" target="_blank" rel="noopener">Docker bridge network mode</a></li><li><a href="https://en.wikipedia.org/wiki/Netfilter" target="_blank" rel="noopener">Wikipedia: Netfilter</a></li><li><a href="https://blog.cloudflare.com/conntrack-tales-one-thousand-and-one-flows/" target="_blank" rel="noopener">Conntrack tales - one thousand and one flows</a></li><li><a href="https://www.redhat.com/en/blog/how-connection-tracking-open-vswitch-helps-openstack-performance" target="_blank" rel="noopener">How connection tracking in Open vSwitch helps OpenStack performance</a></li><li><a href="https://tools.ietf.org/html/rfc5382#section-5" target="_blank" rel="noopener">NAT Behavioral Requirements for TCP</a>, RFC5382</li><li><a href="https://johnleach.co.uk/posts/2009/06/17/netfilter-conntrack-memory-usage/" target="_blank" rel="noopener">Netfilter Conntrack Memory Usage</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#摘要&quot;&gt;¶&lt;/a&gt;摘要&lt;/h2&gt;
&lt;p&gt;本文介绍连接跟踪（connection tracking，conntrack，CT）的原理，应用，及其在 Linux 内核中的实现。&lt;/p&gt;
&lt;p&gt;代码分析基于内核 &lt;code&gt;4.19&lt;/code&gt;。为使行文简洁，所贴代码只保留了核心逻辑，但都给出了代码 所在的源文件，如有需要请查阅。&lt;/p&gt;
&lt;p&gt;水平有限，文中不免有错误之处，欢迎指正交流。&lt;/p&gt;
&lt;p&gt;连接跟踪是许多网络应用的基础。例如，Kubernetes Service、ServiceMesh sidecar、 软件四层负载均衡器 LVS/IPVS、Docker network、OVS、iptables 主机防火墙等等，都依赖 连接跟踪功能。&lt;/p&gt;
    
    </summary>
    
      <category term="连接跟踪" scheme="https://talengu.github.io/public/categories/%E8%BF%9E%E6%8E%A5%E8%B7%9F%E8%B8%AA/"/>
    
    
      <category term="conntrack" scheme="https://talengu.github.io/public/tags/conntrack/"/>
    
  </entry>
  
  <entry>
    <title>「转」Linux内核数据包bridge上转发流程</title>
    <link href="https://talengu.github.io/public/2022/07/06/linux/linux_bridge_forward/"/>
    <id>https://talengu.github.io/public/2022/07/06/linux/linux_bridge_forward/</id>
    <published>2022-07-06T16:00:04.000Z</published>
    <updated>2022-07-06T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址 <a href="https://blog.csdn.net/hhhhhyyyyy8/article/details/102133863" target="_blank" rel="noopener">blog.csdn.net</a>@hhhhhyyyyy8 @4.15.1</p></blockquote><h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><p>linux 内核源代码变动怎么这么大，handle_bridge 函数居然没有了，本来接着准备以 3.9.1 分析的，但发现和后面的又变了，还是以 4.15.1 现在电脑上用的版本分析吧。</p><p><strong>linux kernel：4.15.1</strong></p><p>best of best [<a href="url">link</a>](<a href="https://upload.wikimedia.org/wikipedia/commons/3/37/Netfilter-packet-flow.svg" target="_blank" rel="noopener">https://upload.wikimedia.org/wikipedia/commons/3/37/Netfilter-packet-flow.svg</a>)</p><p><img src="/public/2022/07/06/linux/linux_bridge_forward/Netfilter-packet-flow5.svg" alt></p><p>先看三张图片</p><p><a href="https://blog.csdn.net/NW_NW_NW/article/details/76153027" target="_blank" rel="noopener">IMG skb桥转发蓝图</a><img src="/public/2022/07/06/linux/linux_bridge_forward/20191005153149853.jpg" alt></p><p><a href="https://blog.csdn.net/u012247418/article/details/90137663" target="_blank" rel="noopener">IMG linux TCP/IP L2层数据包接收流程</a><img src="/public/2022/07/06/linux/linux_bridge_forward/t_70.png" alt></p><p><a href="https://www.cnblogs.com/xuanxuanBOSS/p/11424290.html" target="_blank" rel="noopener">IMG 浅析ebtables的概念和一些基本应用</a><img src="/public/2022/07/06/linux/linux_bridge_forward/netfilter.png" alt></p><blockquote><p>tips: linux 内核版本不一样，流程函数会发生细微改变。</p></blockquote><a id="more"></a><h2 id="1-br-handle-frame"><a class="header-anchor" href="#1-br-handle-frame">¶</a>1. br_handle_frame()</h2><p>作用：</p><ol><li><p>对于需要转发的报文，调用 <code>NF_BR_PRE_ROUTING</code> 处钩子函数，结束后，进入 <code>br_handle_frame_finish()</code> 函数；</p></li><li><p>对于 STP 报文，调用 <code>NF_BR_LOCAL_IN</code> 处钩子函数，结束后，进入 <code>br_handle_local_finish()</code> 函数，在 <code>br_handle_local_finish()</code> 函数中会调用 <code>br_pass_frame_up()</code> 函数。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_input.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Return NULL if skb is handled</span></span><br><span class="line"><span class="comment"> * note: already called with rcu_read_lock</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">rx_handler_result_t</span> <span class="title">br_handle_frame</span><span class="params">(struct sk_buff **pskb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sk_buff</span> *<span class="title">skb</span> = *<span class="title">pskb</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *dest = eth_hdr(skb)-&gt;h_dest;</span><br><span class="line"><span class="keyword">br_should_route_hook_t</span> *rhook;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*如果是环回地址，直接返回RX_HANDLER_PASS*/</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(skb-&gt;pkt_type == PACKET_LOOPBACK))</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_PASS;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断源MAC地址是否是有效的地址，不是直接丢弃，源MAC地址不能是多播地址和全0地址*/</span></span><br><span class="line"><span class="keyword">if</span> (!is_valid_ether_addr(eth_hdr(skb)-&gt;h_source))</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"><span class="comment">/*判断是否是共享数据包，若是则clone该数据包；若clone时分配内存出错，返回NULL*/</span></span><br><span class="line">skb = skb_share_check(skb, GFP_ATOMIC);</span><br><span class="line"><span class="keyword">if</span> (!skb)</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_CONSUMED;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*获取dev对应的网桥端口*/</span></span><br><span class="line">p = br_port_get_rcu(skb-&gt;dev);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; BR_VLAN_TUNNEL) &#123;</span><br><span class="line"><span class="keyword">if</span> (br_handle_ingress_vlan_tunnel(skb, p,</span><br><span class="line">  nbp_vlan_group_rcu(p)))</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*特殊MAC地址处理*/</span></span><br><span class="line"><span class="comment">//如果目的mac地址是本地链路地址link local reserved addr (01:80:c2:00:00:0X) STP报文</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(is_link_local_ether_addr(dest))) &#123;</span><br><span class="line">u16 fwd_mask = p-&gt;br-&gt;group_fwd_mask_required;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * See IEEE 802.1D Table 7-10 Reserved addresses</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Assignment Value</span></span><br><span class="line"><span class="comment"> * Bridge Group Address01-80-C2-00-00-00</span></span><br><span class="line"><span class="comment"> * (MAC Control) 802.301-80-C2-00-00-01</span></span><br><span class="line"><span class="comment"> * (Link Aggregation) 802.301-80-C2-00-00-02</span></span><br><span class="line"><span class="comment"> * 802.1X PAE address01-80-C2-00-00-03</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 802.1AB LLDP 01-80-C2-00-00-0E</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Others reserved for future standardization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fwd_mask |= p-&gt;group_fwd_mask;</span><br><span class="line"><span class="keyword">switch</span> (dest[<span class="number">5</span>]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x00</span>:<span class="comment">/* Bridge Group Address */</span></span><br><span class="line"><span class="comment">/* If STP is turned off,</span></span><br><span class="line"><span class="comment">   then must forward to keep loop detection */</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;br-&gt;stp_enabled == BR_NO_STP ||</span><br><span class="line">    fwd_mask &amp; (<span class="number">1u</span> &lt;&lt; dest[<span class="number">5</span>]))</span><br><span class="line"><span class="keyword">goto</span> forward;</span><br><span class="line">*pskb = skb;</span><br><span class="line">__br_handle_local_finish(skb);</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_PASS;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="number">0x01</span>:<span class="comment">/* IEEE MAC (Pause) */</span></span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0E</span>:<span class="comment">/* 802.1AB LLDP */</span></span><br><span class="line">fwd_mask |= p-&gt;br-&gt;group_fwd_mask;</span><br><span class="line"><span class="keyword">if</span> (fwd_mask &amp; (<span class="number">1u</span> &lt;&lt; dest[<span class="number">5</span>]))</span><br><span class="line"><span class="keyword">goto</span> forward;</span><br><span class="line">*pskb = skb;</span><br><span class="line">__br_handle_local_finish(skb);</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_PASS;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">/* Allow selective forwarding for most other protocols */</span></span><br><span class="line">fwd_mask |= p-&gt;br-&gt;group_fwd_mask;</span><br><span class="line"><span class="keyword">if</span> (fwd_mask &amp; (<span class="number">1u</span> &lt;&lt; dest[<span class="number">5</span>]))</span><br><span class="line"><span class="keyword">goto</span> forward;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Deliver packet to local host only */</span></span><br><span class="line"><span class="comment">/*调用NF_BR_LOCAL_IN处钩子函数，结束后，进入br_handle_local_finish函数*/</span></span><br><span class="line">NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN, dev_net(skb-&gt;dev),</span><br><span class="line"><span class="literal">NULL</span>, skb, skb-&gt;dev, <span class="literal">NULL</span>, br_handle_local_finish);</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_CONSUMED;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">forward:</span><br><span class="line"><span class="keyword">switch</span> (p-&gt;state) &#123;</span><br><span class="line"><span class="comment">//网桥端口处于转发状态</span></span><br><span class="line"><span class="keyword">case</span> BR_STATE_FORWARDING:</span><br><span class="line">rhook = rcu_dereference(br_should_route_hook);</span><br><span class="line"><span class="keyword">if</span> (rhook) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*rhook)(skb)) &#123;</span><br><span class="line">*pskb = skb;</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_PASS;</span><br><span class="line">&#125;</span><br><span class="line">dest = eth_hdr(skb)-&gt;h_dest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* fall through */</span></span><br><span class="line"><span class="comment">/*网桥端口处于学习状态，处于转发状态也会执行下面的代码，因为上面的case没有break。*/</span></span><br><span class="line"><span class="keyword">case</span> BR_STATE_LEARNING:</span><br><span class="line"><span class="comment">/*数据包目的MAC为网桥的Mac，发往本地的数据包*/</span></span><br><span class="line"><span class="keyword">if</span> (ether_addr_equal(p-&gt;br-&gt;dev-&gt;dev_addr, dest))</span><br><span class="line">skb-&gt;pkt_type = PACKET_HOST;</span><br><span class="line"><span class="comment">/*调用NF_BR_PRE_ROUTING处钩子函数，结束后进入br_handle_frame_finish函数*/</span></span><br><span class="line">NF_HOOK(NFPROTO_BRIDGE, NF_BR_PRE_ROUTING,</span><br><span class="line">dev_net(skb-&gt;dev), <span class="literal">NULL</span>, skb, skb-&gt;dev, <span class="literal">NULL</span>,</span><br><span class="line">br_handle_frame_finish);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">drop:</span><br><span class="line">kfree_skb(skb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_CONSUMED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关函数</p><h3 id="rx-handler-result-t-枚举类型"><a class="header-anchor" href="#rx-handler-result-t-枚举类型">¶</a><code>rx_handler_result_t</code> 枚举类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> rx_handler_result &#123;</span><br><span class="line">RX_HANDLER_CONSUMED,</span><br><span class="line">RX_HANDLER_ANOTHER,</span><br><span class="line">RX_HANDLER_EXACT,</span><br><span class="line">RX_HANDLER_PASS,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> rx_handler_result <span class="keyword">rx_handler_result_t</span>;</span><br></pre></td></tr></table></figure><h3 id="is-valid-ether-addr"><a class="header-anchor" href="#is-valid-ether-addr">¶</a><code>is_valid_ether_addr()</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * is_valid_ether_addr - Determine if the given Ethernet address is valid</span></span><br><span class="line"><span class="comment"> * @addr: Pointer to a six-byte array containing the Ethernet address</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Check that the Ethernet address (MAC) is not 00:00:00:00:00:00, is not</span></span><br><span class="line"><span class="comment"> * a multicast address, and is not FF:FF:FF:FF:FF:FF.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Return true if the address is valid.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Please note: addr must be aligned to u16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_valid_ether_addr</span><span class="params">(<span class="keyword">const</span> u8 *addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* FF:FF:FF:FF:FF:FF is a multicast address so we don't need to</span></span><br><span class="line"><span class="comment"> * explicitly check for it here. */</span></span><br><span class="line"><span class="keyword">return</span> !is_multicast_ether_addr(addr) &amp;&amp; !is_zero_ether_addr(addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="br-handle-local-finish"><a class="header-anchor" href="#br-handle-local-finish">¶</a><code>br_handle_local_finish()</code></h3><p><code>br_handle_local_finish()</code> 函数中调用 <code>br_pass_fame_up()</code> 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">/* note: already called with rcu_read_lock */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">br_handle_local_finish</span><span class="params">(struct net *net, struct sock *sk, struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">p</span> = <span class="title">br_port_get_rcu</span>(<span class="title">skb</span>-&gt;<span class="title">dev</span>);</span></span><br><span class="line"> </span><br><span class="line">__br_handle_local_finish(skb);</span><br><span class="line"> </span><br><span class="line">BR_INPUT_SKB_CB(skb)-&gt;brdev = p-&gt;br-&gt;dev;</span><br><span class="line">br_pass_frame_up(skb);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-br-handle-frame-finish"><a class="header-anchor" href="#2-br-handle-frame-finish">¶</a>2. br_handle_frame_finish()</h2><p>作用：</p><p>网桥设备是否处于混杂模式，如果是，则会发一份到本地进行处理</p><p>如果是广播包，则会进行广播洪泛，并会发一份到本地处理</p><p>如果是组播包，则根据组播表进行组播转发，并发一份数数包到本地处理</p><p>如果是单播包，发往本地的单播包则送到本地处理，在 fdb 表中可以找到转发表项的单播包则进行转发，未知单播包在广播域内进行洪泛</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_input.c</span></span><br><span class="line"><span class="comment">/* note: already called with rcu_read_lock */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">br_handle_frame_finish</span><span class="params">(struct net *net, struct sock *sk, struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">p</span> = <span class="title">br_port_get_rcu</span>(<span class="title">skb</span>-&gt;<span class="title">dev</span>);</span></span><br><span class="line"><span class="keyword">enum</span> br_pkt_type pkt_type = BR_PKT_UNICAST;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_fdb_entry</span> *<span class="title">dst</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_mdb_entry</span> *<span class="title">mdst</span>;</span></span><br><span class="line"><span class="keyword">bool</span> local_rcv, mcast_hit = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *dest;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge</span> *<span class="title">br</span>;</span></span><br><span class="line">u16 vid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*如果网桥端口不存在或者网桥端口状态为BR_STATE_DISABLED，则丢弃*/</span></span><br><span class="line"><span class="keyword">if</span> (!p || p-&gt;state == BR_STATE_DISABLED)</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"><span class="comment">/*判断是否允许进入桥内，如果没有开启VLAN则所有数据包都可以进入，</span></span><br><span class="line"><span class="comment">如果开启了VLAN,则根据VLAN相应的规则，从桥上进行数据包转发。*/</span></span><br><span class="line"><span class="keyword">if</span> (!br_allowed_ingress(p-&gt;br, nbp_vlan_group_rcu(p), skb, &amp;vid))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"> </span><br><span class="line">nbp_switchdev_frame_mark(p, skb);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* insert into forwarding database after filtering to avoid spoofing */</span></span><br><span class="line">br = p-&gt;br;</span><br><span class="line"><span class="comment">/*如果网桥端口标志有BR_LEARNING,则更新fdb表。</span></span><br><span class="line"><span class="comment">    一般新建网桥端口p-&gt;flags=BR_LEARNING| BR_FLOOD | BR_MCAST_FLOOD | BR_BCAST_FLOOD*/</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; BR_LEARNING)</span><br><span class="line">br_fdb_update(br, p, eth_hdr(skb)-&gt;h_source, vid, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发往本地数据包标记，!!的作用是转换为bool值</span></span><br><span class="line">local_rcv = !!(br-&gt;dev-&gt;flags &amp; IFF_PROMISC);</span><br><span class="line">dest = eth_hdr(skb)-&gt;h_dest;</span><br><span class="line"><span class="comment">/*目的地址为多播地址*/</span></span><br><span class="line"><span class="keyword">if</span> (is_multicast_ether_addr(dest)) &#123;</span><br><span class="line"><span class="comment">/* by definition the broadcast is also a multicast address */</span></span><br><span class="line"><span class="comment">/*如果目的地址是广播地址，将数据包也发往本地一份*/</span></span><br><span class="line"><span class="keyword">if</span> (is_broadcast_ether_addr(dest)) &#123;</span><br><span class="line">pkt_type = BR_PKT_BROADCAST;</span><br><span class="line">local_rcv = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pkt_type = BR_PKT_MULTICAST;</span><br><span class="line"><span class="comment">//igmp snooping留给网桥子系统的外部接口函数，</span></span><br><span class="line"><span class="comment">//当网桥接收了igmp数据包后就会调用该函数进行后续处理</span></span><br><span class="line"><span class="keyword">if</span> (br_multicast_rcv(br, p, skb, vid))</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果网桥端口状态此时还是BR_STATE_LEARNING,则丢弃。</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;state == BR_STATE_LEARNING)</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"><span class="comment">//将网桥所属的net_device放入skb的私有数据中（struct br_input_skb_cb）</span></span><br><span class="line">BR_INPUT_SKB_CB(skb)-&gt;brdev = br-&gt;dev;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (IS_ENABLED(CONFIG_INET) &amp;&amp;</span><br><span class="line">    (skb-&gt;protocol == htons(ETH_P_ARP) ||</span><br><span class="line">     skb-&gt;protocol == htons(ETH_P_RARP))) &#123;</span><br><span class="line">br_do_proxy_suppress_arp(skb, br, vid, p);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS_ENABLED(CONFIG_IPV6) &amp;&amp;</span><br><span class="line">   skb-&gt;protocol == htons(ETH_P_IPV6) &amp;&amp;</span><br><span class="line">   br-&gt;neigh_suppress_enabled &amp;&amp;</span><br><span class="line">   pskb_may_pull(skb, <span class="keyword">sizeof</span>(struct ipv6hdr) +</span><br><span class="line"> <span class="keyword">sizeof</span>(struct nd_msg)) &amp;&amp;</span><br><span class="line">   ipv6_hdr(skb)-&gt;nexthdr == IPPROTO_ICMPV6) &#123;</span><br><span class="line">struct nd_msg *msg, _msg;</span><br><span class="line"> </span><br><span class="line">msg = br_is_nd_neigh_msg(skb, &amp;_msg);</span><br><span class="line"><span class="keyword">if</span> (msg)</span><br><span class="line">br_do_suppress_nd(skb, br, vid, p, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">switch</span> (pkt_type) &#123;</span><br><span class="line"><span class="comment">//组播包</span></span><br><span class="line"><span class="keyword">case</span> BR_PKT_MULTICAST:</span><br><span class="line"><span class="comment">//获取组播转发项，设置local_rcv为true，组播包也要发往本地一份。</span></span><br><span class="line">mdst = br_mdb_get(br, skb, vid);</span><br><span class="line"><span class="keyword">if</span> ((mdst || BR_INPUT_SKB_CB_MROUTERS_ONLY(skb)) &amp;&amp;</span><br><span class="line">    br_multicast_querier_exists(br, eth_hdr(skb))) &#123;</span><br><span class="line"><span class="keyword">if</span> ((mdst &amp;&amp; mdst-&gt;host_joined) ||</span><br><span class="line">    br_multicast_is_router(br)) &#123;</span><br><span class="line">local_rcv = <span class="literal">true</span>;</span><br><span class="line">br-&gt;dev-&gt;stats.multicast++;</span><br><span class="line">&#125;</span><br><span class="line">mcast_hit = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">local_rcv = <span class="literal">true</span>;</span><br><span class="line">br-&gt;dev-&gt;stats.multicast++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//单播包</span></span><br><span class="line"><span class="keyword">case</span> BR_PKT_UNICAST:</span><br><span class="line"><span class="comment">//根据目的MAC地址查找fdb表，看是否有对应的表项</span></span><br><span class="line">dst = br_fdb_find_rcu(br, dest, vid);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果找到目的MAC对应的表项</span></span><br><span class="line"><span class="keyword">if</span> (dst) &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> now = jiffies;</span><br><span class="line"><span class="comment">//送入上层处理</span></span><br><span class="line"><span class="keyword">if</span> (dst-&gt;is_local)</span><br><span class="line"><span class="keyword">return</span> br_pass_frame_up(skb);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (now != dst-&gt;used)</span><br><span class="line">dst-&gt;used = now;</span><br><span class="line"><span class="comment">//根据fdb转发表项进行转发，若这里local_rcv 为1,（即端口处于混杂模式IFF_PROMISC），则会克隆一份再转发</span></span><br><span class="line"><span class="comment">//传入的第一个参数dst-&gt;dst 即为要转发的目的端口</span></span><br><span class="line">br_forward(dst-&gt;dst, skb, local_rcv, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//进行广播或者组播洪泛</span></span><br><span class="line"><span class="keyword">if</span> (!mcast_hit)</span><br><span class="line">br_flood(br, skb, pkt_type, local_rcv, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">br_multicast_flood(mdst, skb, local_rcv, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//local_rcv标记为1，送入上层处理。</span></span><br><span class="line"><span class="keyword">if</span> (local_rcv)</span><br><span class="line"><span class="keyword">return</span> br_pass_frame_up(skb);</span><br><span class="line"> </span><br><span class="line">out:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">drop:</span><br><span class="line">kfree_skb(skb);</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-br-pass-frame-up"><a class="header-anchor" href="#3-br-pass-frame-up">¶</a>3.br_pass_frame_up</h2><p>数据包的目的 MAC 是本地的单播报文，广播，组播和网桥处于混杂模式时，报文都会通过 br_pass_frame_up 函数交由上层处理。</p><p>作用：</p><p>调用 NF_BR_LOCAL_IN 处钩子函数，最后调用 br_netif_receive_skb 函数，绕一圈后，交友上层处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_input.c</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">br_pass_frame_up</span><span class="params">(struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_device</span> *<span class="title">indev</span>, *<span class="title">brdev</span> = <span class="title">BR_INPUT_SKB_CB</span>(<span class="title">skb</span>)-&gt;<span class="title">brdev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge</span> *<span class="title">br</span> = <span class="title">netdev_priv</span>(<span class="title">brdev</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_vlan_group</span> *<span class="title">vg</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcpu_sw_netstats</span> *<span class="title">brstats</span> = <span class="title">this_cpu_ptr</span>(<span class="title">br</span>-&gt;<span class="title">stats</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//统计网桥设备上的收包流量数据</span></span><br><span class="line">u64_stats_update_begin(&amp;brstats-&gt;syncp);</span><br><span class="line">brstats-&gt;rx_packets++;</span><br><span class="line">brstats-&gt;rx_bytes += skb-&gt;len;</span><br><span class="line">u64_stats_update_end(&amp;brstats-&gt;syncp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取网桥设备上的VLAN组</span></span><br><span class="line">vg = br_vlan_group_rcu(br);</span><br><span class="line"><span class="comment">/* Bridge is just like any other port.  Make sure the</span></span><br><span class="line"><span class="comment"> * packet is allowed except in promisc modue when someone</span></span><br><span class="line"><span class="comment"> * may be running packet capture.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!(brdev-&gt;flags &amp; IFF_PROMISC) &amp;&amp;</span><br><span class="line">    !br_allowed_egress(vg, skb)) &#123;</span><br><span class="line">kfree_skb(skb);</span><br><span class="line"><span class="keyword">return</span> NET_RX_DROP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录数据包的收包网络设备</span></span><br><span class="line">indev = skb-&gt;dev;</span><br><span class="line"><span class="comment">//将数据包的收包设备改为网桥设备</span></span><br><span class="line"><span class="comment">//当再次进入__netif_receive_skb_core时就不会再次进入桥处理了，因为网桥上没有注册rx_handler 函数</span></span><br><span class="line">skb-&gt;dev = brdev;</span><br><span class="line"><span class="comment">//配置数据包vlan相关信息</span></span><br><span class="line">skb = br_handle_vlan(br, <span class="literal">NULL</span>, vg, skb);</span><br><span class="line"><span class="keyword">if</span> (!skb)</span><br><span class="line"><span class="keyword">return</span> NET_RX_DROP;</span><br><span class="line"><span class="comment">/* update the multicast stats if the packet is IGMP/MLD */</span></span><br><span class="line"><span class="comment">//如果数据包是组播，更新组播数据包的统计信息</span></span><br><span class="line">br_multicast_count(br, <span class="literal">NULL</span>, skb, br_multicast_igmp_type(skb),</span><br><span class="line">   BR_MCAST_DIR_TX);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用NF_BR_LOCAL_IN处钩子函数，最后调用br_netif_receive_skb函数。</span></span><br><span class="line"><span class="keyword">return</span> NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN,</span><br><span class="line">       dev_net(indev), <span class="literal">NULL</span>, skb, indev, <span class="literal">NULL</span>,</span><br><span class="line">       br_netif_receive_skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次进入 netif_receive_skb，由于 skb-dev 被设置成了 bridge，而 bridge 设备的 rx_handler 函数是没有被设置的，所以就不会再次进入 bridge 逻辑，而直接进入了主机上层协议栈。</p><p>相关函数</p><h3 id="br-netif-receive-skb"><a class="header-anchor" href="#br-netif-receive-skb">¶</a><code>br_netif_receive_skb()</code></h3><p>可以看到在 br_netif_receive_skb() 函数中调用了 netif_receive_skb() 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">static int</span><br><span class="line">br_netif_receive_skb(struct net *net, struct sock *sk, struct sk_buff *skb)</span><br><span class="line">&#123;</span><br><span class="line">br_drop_fake_rtable(skb);</span><br><span class="line">return netif_receive_skb(skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-br-forward"><a class="header-anchor" href="#4-br-forward">¶</a>4. br_forward()</h2><p>不是发往本地的数据包，但在 fdb 表中能找到对应的表项，则进行转发 br_forward()，若在 fdb 表中找不到对应表项就进行洪泛 br_blood().</p><p>作用：</p><p>主要是调用__br_forward() 转发报文</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * br_forward - forward a packet to a specific port</span></span><br><span class="line"><span class="comment"> * @to: destination port</span></span><br><span class="line"><span class="comment"> * @skb: packet being forwarded</span></span><br><span class="line"><span class="comment"> * @local_rcv: packet will be received locally after forwarding</span></span><br><span class="line"><span class="comment"> * @local_orig: packet is locally originated</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Should be called with rcu_read_lock.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">br_forward</span><span class="params">(<span class="keyword">const</span> struct net_bridge_port *to,</span></span></span><br><span class="line"><span class="function"><span class="params">struct sk_buff *skb, <span class="keyword">bool</span> local_rcv, <span class="keyword">bool</span> local_orig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//should_deliver测试是否应该将该包转发出去</span></span><br><span class="line"><span class="keyword">if</span> (to &amp;&amp; should_deliver(to, skb)) &#123;</span><br><span class="line"><span class="comment">//如果local_rcv为1，表明端口为混杂模式，先clone一份数据包再进行转发</span></span><br><span class="line"><span class="keyword">if</span> (local_rcv)</span><br><span class="line">deliver_clone(to, skb, local_orig);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">__br_forward(to, skb, local_orig);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!local_rcv)</span><br><span class="line">kfree_skb(skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-br-forward"><a class="header-anchor" href="#5-br-forward">¶</a>5. __br_forward()</h2><p>作用:</p><p>__br_forward() 函数根据数据包的来源（local_orig）分别进入不同的钩子点，如果数据包是从本地发出的，则进入 NF_BR_LOCAL_OUT，如果不是本地发出的，则进入 NF_BR_FORWARD 钩子，最后都进入 br_forward_finish() 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __br_forward(<span class="keyword">const</span> struct net_bridge_port *to,</span><br><span class="line"> struct sk_buff *skb, <span class="keyword">bool</span> local_orig)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_vlan_group</span> *<span class="title">vg</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_device</span> *<span class="title">indev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net</span> *<span class="title">net</span>;</span></span><br><span class="line"><span class="keyword">int</span> br_hook;</span><br><span class="line"><span class="comment">//获取vlan组，这个组中有许多的vlanid，br_handle_vlan函数就是要在这个组中查找自己的vid</span></span><br><span class="line">vg = nbp_vlan_group_rcu(to);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加vlan的相关配置</span></span><br><span class="line">skb = br_handle_vlan(to-&gt;br, to, vg, skb);</span><br><span class="line"><span class="keyword">if</span> (!skb)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//记录数据包的原始收包网络设备</span></span><br><span class="line">indev = skb-&gt;dev;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将skb的dev修改为出口网络设备</span></span><br><span class="line">skb-&gt;dev = to-&gt;dev;</span><br><span class="line"><span class="comment">/*如果local_orig标志位(判断是否从本地发出的数据包)为false，就进入NF_BR_FORWARD钩子</span></span><br><span class="line"><span class="comment">若为true，就进入NF_BR_LOCAL_OUT钩子点*/</span></span><br><span class="line"><span class="keyword">if</span> (!local_orig) &#123;</span><br><span class="line"><span class="keyword">if</span> (skb_warn_if_lro(skb)) &#123;</span><br><span class="line">kfree_skb(skb);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不是本地发出的数据包，进入NF_BR_FORWARD</span></span><br><span class="line">br_hook = NF_BR_FORWARD;</span><br><span class="line">skb_forward_csum(skb);</span><br><span class="line">net = dev_net(indev);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (unlikely(netpoll_tx_running(to-&gt;br-&gt;dev))) &#123;</span><br><span class="line"><span class="keyword">if</span> (!is_skb_forwardable(skb-&gt;dev, skb)) &#123;</span><br><span class="line">kfree_skb(skb);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">skb_push(skb, ETH_HLEN);</span><br><span class="line">br_netpoll_send_skb(to, skb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若是本地发出的数据包，进入NF_BR_LOCAL_OUT处理</span></span><br><span class="line">br_hook = NF_BR_LOCAL_OUT;</span><br><span class="line">net = dev_net(skb-&gt;dev);</span><br><span class="line">indev = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入钩子点，最后执行br_forward_finish函数。</span></span><br><span class="line">NF_HOOK(NFPROTO_BRIDGE, br_hook,</span><br><span class="line">net, <span class="literal">NULL</span>, skb, indev, skb-&gt;dev,</span><br><span class="line">br_forward_finish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-br-forward-finish"><a class="header-anchor" href="#6-br-forward-finish">¶</a>6. br_forward_finish()</h2><p><code>br_forward_finish()</code> 函数比较简单，调用 <code>NF_BR_POST_ROUTING</code> 处的钩子函数，最后进入 <code>br_dev_queue_push_xmit</code> 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">br_forward_finish</span><span class="params">(struct net *net, struct sock *sk, struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> NF_HOOK(NFPROTO_BRIDGE, NF_BR_POST_ROUTING,</span><br><span class="line">       net, sk, skb, <span class="literal">NULL</span>, skb-&gt;dev,</span><br><span class="line">       br_dev_queue_push_xmit);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-br-dev-queue-push-xmit"><a class="header-anchor" href="#7-br-dev-queue-push-xmit">¶</a>7. br_dev_queue_push_xmit</h2><p>在 <code>br_dev_queue_push_xmit()</code> 中，会先 <code>skb_push(skb,ETH,HLEN);</code> 将 data 指向二层头部，然后调用 <code>dev_queue_xmit()</code> 发送报文。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">br_dev_queue_push_xmit</span><span class="params">(struct net *net, struct sock *sk, struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!is_skb_forwardable(skb-&gt;dev, skb))</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//注意这句操作</span></span><br><span class="line">skb_push(skb, ETH_HLEN);</span><br><span class="line">br_drop_fake_rtable(skb);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (skb-&gt;ip_summed == CHECKSUM_PARTIAL &amp;&amp;</span><br><span class="line">    (skb-&gt;protocol == htons(ETH_P_8021Q) ||</span><br><span class="line">     skb-&gt;protocol == htons(ETH_P_8021AD))) &#123;</span><br><span class="line"><span class="keyword">int</span> depth;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!__vlan_get_protocol(skb, skb-&gt;protocol, &amp;depth))</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"> </span><br><span class="line">skb_set_network_header(skb, depth);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">dev_queue_xmit(skb);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">drop:</span><br><span class="line">kfree_skb(skb);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-br-flood"><a class="header-anchor" href="#8-br-flood">¶</a>8. br_flood</h2><p><code>br_flood()</code> 也是调用 <code>__br_forward()</code> 函数转发报文。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="comment">/* called under rcu_read_lock */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">br_flood</span><span class="params">(struct net_bridge *br, struct sk_buff *skb,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">enum</span> br_pkt_type pkt_type, <span class="keyword">bool</span> local_rcv, <span class="keyword">bool</span> local_orig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 igmp_type = br_multicast_igmp_type(skb);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">prev</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">p</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*遍历网桥设备的port_list，取出所有的网桥端口*/</span></span><br><span class="line">list_for_each_entry_rcu(p, &amp;br-&gt;port_list, <span class="built_in">list</span>) </span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">/* Do not flood unicast traffic to ports that turn it off, nor</span></span><br><span class="line"><span class="comment"> * other traffic if flood off, except for traffic we originate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">switch</span> (pkt_type) </span><br><span class="line">                &#123;</span><br><span class="line"><span class="keyword">case</span> BR_PKT_UNICAST:</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; BR_FLOOD))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BR_PKT_MULTICAST:</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; BR_MCAST_FLOOD) &amp;&amp; skb-&gt;dev != br-&gt;dev)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BR_PKT_BROADCAST:</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; BR_BCAST_FLOOD) &amp;&amp; skb-&gt;dev != br-&gt;dev)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Do not flood to ports that enable proxy ARP */</span></span><br><span class="line">                <span class="comment">/*代理arp*/</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; BR_PROXYARP)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> ((p-&gt;flags &amp; (BR_PROXYARP_WIFI | BR_NEIGH_SUPPRESS)) &amp;&amp;</span><br><span class="line">    BR_INPUT_SKB_CB(skb)-&gt;proxyarp_replied)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">prev = maybe_deliver(prev, p, skb, local_orig);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(prev))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"><span class="keyword">if</span> (prev == p)</span><br><span class="line">br_multicast_count(p-&gt;br, p, skb, igmp_type,</span><br><span class="line">   BR_MCAST_DIR_TX);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!prev)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (local_rcv)</span><br><span class="line">deliver_clone(prev, skb, local_orig);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">__br_forward(prev, skb, local_orig);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">out:</span><br><span class="line"><span class="keyword">if</span> (!local_rcv)</span><br><span class="line">kfree_skb(skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-br-mulicast-flood"><a class="header-anchor" href="#9-br-mulicast-flood">¶</a>9. br_mulicast_flood()</h2><hr><p>以后再分析，肚子饿了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="comment">/* called with rcu_read_lock */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">br_multicast_flood</span><span class="params">(struct net_bridge_mdb_entry *mdst,</span></span></span><br><span class="line"><span class="function"><span class="params">struct sk_buff *skb,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">bool</span> local_rcv, <span class="keyword">bool</span> local_orig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_device</span> *<span class="title">dev</span> = <span class="title">BR_INPUT_SKB_CB</span>(<span class="title">skb</span>)-&gt;<span class="title">brdev</span>;</span></span><br><span class="line">u8 igmp_type = br_multicast_igmp_type(skb);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge</span> *<span class="title">br</span> = <span class="title">netdev_priv</span>(<span class="title">dev</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">prev</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port_group</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> *<span class="title">rp</span>;</span></span><br><span class="line"> </span><br><span class="line">rp = rcu_dereference(hlist_first_rcu(&amp;br-&gt;router_list));</span><br><span class="line">p = mdst ? rcu_dereference(mdst-&gt;ports) : <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (p || rp) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">port</span>, *<span class="title">lport</span>, *<span class="title">rport</span>;</span></span><br><span class="line"> </span><br><span class="line">lport = p ? p-&gt;port : <span class="literal">NULL</span>;</span><br><span class="line">rport = rp ? hlist_entry(rp, struct net_bridge_port, rlist) :</span><br><span class="line">     <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)lport &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>)rport) &#123;</span><br><span class="line">port = lport;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (port-&gt;flags &amp; BR_MULTICAST_TO_UNICAST) &#123;</span><br><span class="line">maybe_deliver_addr(lport, skb, p-&gt;eth_addr,</span><br><span class="line">   local_orig);</span><br><span class="line"><span class="keyword">goto</span> delivered;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">port = rport;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">prev = maybe_deliver(prev, port, skb, local_orig);</span><br><span class="line">delivered:</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(prev))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"><span class="keyword">if</span> (prev == port)</span><br><span class="line">br_multicast_count(port-&gt;br, port, skb, igmp_type,</span><br><span class="line">   BR_MCAST_DIR_TX);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)lport &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)port)</span><br><span class="line">p = rcu_dereference(p-&gt;next);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)rport &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)port)</span><br><span class="line">rp = rcu_dereference(hlist_next_rcu(rp));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!prev)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (local_rcv)</span><br><span class="line">deliver_clone(prev, skb, local_orig);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">__br_forward(prev, skb, local_orig);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">out:</span><br><span class="line"><span class="keyword">if</span> (!local_rcv)</span><br><span class="line">kfree_skb(skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a class="header-anchor" href="#参考">¶</a>参考</h2><p><a href="http://ebtables.netfilter.org/br_fw_ia/br_fw_ia.html" target="_blank" rel="noopener">ebtables/iptables interaction on a Linux-based bridge</a>@ebtables @2.4.x kernel</p><p><a href="https://blog.csdn.net/sxd2001/article/details/125031113" target="_blank" rel="noopener">Iptables DNAT实现broadcast与unicast之间相互映射</a>@sxd2001 分析ebtables 的redirect 和 iptables 的redirect</p><p><a href="https://blog.csdn.net/Sophisticated_/article/details/87923362" target="_blank" rel="noopener">Linux-4.20.8内核桥收包源码解析（七）--本地（br_pass_frame_up）or 转发（br_forward）</a>@lw_yang @Linux-4.20.8</p><p><a href="http://blog.chinaunix.net/uid-28541347-id-5750406.html" target="_blank" rel="noopener">Linux 3.10 kernel bridge转发逻辑</a>@lvyilong316 @Linux 3.10 kernel</p><p><a href="https://blog.csdn.net/linyt/article/details/5191512" target="_blank" rel="noopener">kernel 网桥代码分析</a>@海枫 @ 2.6.24.4</p><p><a href="https://blog.csdn.net/NW_NW_NW/article/details/76674232" target="_blank" rel="noopener">桥数据包处理函数——br_handle_frame_finish（七）</a>@不留你的名字</p><p><a href="https://www.cnblogs.com/super-king/p/bridge_implement.html" target="_blank" rel="noopener">Bridge实现</a>@SuperKing @linux 2.6.18</p><p><a href="https://www.cnblogs.com/ck1020/p/5894235.html" target="_blank" rel="noopener">LInux下桥接模式详解三</a>@jack.chen @linux 3.10.1</p><p><a href="https://blog.csdn.net/one_clouder/article/details/52877737" target="_blank" rel="noopener">协议栈报文接收之netif_receive_skb函数分析</a>@one_clouder @Linux4.1.12</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址 &lt;a href=&quot;https://blog.csdn.net/hhhhhyyyyy8/article/details/102133863&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blog.csdn.net&lt;/a&gt;
@hhhhhyyyyy8 @4.15.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;¶&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;linux 内核源代码变动怎么这么大，handle_bridge 函数居然没有了，本来接着准备以 3.9.1 分析的，但发现和后面的又变了，还是以 4.15.1 现在电脑上用的版本分析吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;linux kernel：4.15.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;best of best [&lt;a href=&quot;url&quot;&gt;link&lt;/a&gt;](&lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/3/37/Netfilter-packet-flow.svg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://upload.wikimedia.org/wikipedia/commons/3/37/Netfilter-packet-flow.svg&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2022/07/06/linux/linux_bridge_forward/Netfilter-packet-flow5.svg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;先看三张图片&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/NW_NW_NW/article/details/76153027&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IMG skb桥转发蓝图&lt;/a&gt;
&lt;img src=&quot;/public/2022/07/06/linux/linux_bridge_forward/20191005153149853.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u012247418/article/details/90137663&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IMG linux TCP/IP L2层数据包接收流程&lt;/a&gt;
&lt;img src=&quot;/public/2022/07/06/linux/linux_bridge_forward/t_70.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xuanxuanBOSS/p/11424290.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IMG 浅析ebtables的概念和一些基本应用&lt;/a&gt;
&lt;img src=&quot;/public/2022/07/06/linux/linux_bridge_forward/netfilter.png&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tips: linux 内核版本不一样，流程函数会发生细微改变。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://talengu.github.io/public/categories/Linux/"/>
    
    
      <category term="bridge" scheme="https://talengu.github.io/public/tags/bridge/"/>
    
      <category term="netfilter" scheme="https://talengu.github.io/public/tags/netfilter/"/>
    
  </entry>
  
  <entry>
    <title>「转」tcpdump是在哪儿抓到的包？</title>
    <link href="https://talengu.github.io/public/2022/07/01/linux/how_tcpdump/"/>
    <id>https://talengu.github.io/public/2022/07/01/linux/how_tcpdump/</id>
    <published>2022-07-01T16:00:04.000Z</published>
    <updated>2022-07-01T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址 <a href="https://cloud.tencent.com/developer/article/1879646" target="_blank" rel="noopener">cloud.tencent.com</a></p></blockquote><blockquote><p>最近使用 tcpdump 的时候突然想到这个问题。因为我之前只存在一些一知半解的认识：比如直接镜像了网卡的包、在数据包进入内核前就获取了。但这些认识真的正确么？针对...</p></blockquote><p>最近使用 tcpdump 的时候突然想到这个问题。因为我之前只存在一些一知半解的认识：比如直接镜像了网卡的包、在数据包进入内核前就获取了。但这些认识真的正确么？针对这个问题，我进行了一番学习探究。</p><p>先说结论：通过 PF_PACKET 这个特殊的套接字协议，直接接收来自链路层的帧。数据包<strong>并非没有</strong>进入内核，而是在进入内核后直接跳过了内核中三层 / 四层的协议栈，直达套接字接口，被应用层的 tcpdump 所使用。实际上，在网卡驱动程序通知内核接受到数据帧的时候，数据包就已经进入了内核处理流程。具体的区别，可以见下图。</p><p><img src="/public/2022/07/01/linux/how_tcpdump/1620.png" alt></p><p>内核网络协议栈示意图</p><a id="more"></a><p>先来看看，普通的套接字的收包路径在内核中是怎么样。</p><p>以最常见的以太网网卡，当网卡接口接收到了一个帧，那么接受者知道它一定包含了一个 Ethernet 报头。封包在协议栈向上传递过程中，一定会在报头中包含一个字段，指出下一阶段的处理应该使用哪一个协议。 以太网卡拥有特定的 MAC 地址，在监听数据帧的时候，当看到帧的目的 MAC 地址与自己的地址或者链路层广播地址（FF:FF:FF:FF:FF:FF）相匹配，就会通过 DMA 把该帧读取到内存中的 ring buffer。</p><p>当一个数据帧被写入到内存后，将产生一个硬件中断请求，以通知 CPU 收到了数据包。操作系统为了减少硬中断产生的次数，会采用一个软中断 (softirq) 唤醒 NAPI 子系统。这样会产生一个单独的线程，调用网卡驱动注册的 poll 方法收包，同时禁止网卡产生新的硬中断，这样的效果便是一次中断可以接收多个包。一旦软终端代码判断有 softirq 处于 pending 状态，便会调用软终端处理函数 net_rx_action。</p><p>中断处理函数会在处理循环中调用 NAPI poll 来接收数据包。poll 方法会分配一个 sk_buff 数据结构（include/linux/skbuff.h），表示该数据包的内核视图。然后将数据从缓冲区提取到新建的 sk_buff 中，并对其中的 protocol 字段做初始化，该字段用以识别特定的协议。之后这个字段会被 netif_receive_skb 内核函数查询，用来确定该执行哪个函数来处理三层的封包。字段涉及协议的值都列在了 include/uapi/linux/if_ether.h 中，名字形如 ETH_P_XXX，比如 ip 协议为 ETH_P_IP。而有一种特殊情况，单一封包可以传递给多个处理函数，这就是 tcpdump 等网络嗅探应用会用到的 ETH_P_ALL。</p><p>软终端处理循环的最后是通过 netif_receive_skb 函数将将数据交给 TCP/IP 协议栈的。它会从数据包包头中取出协议信息，然后遍历注册在这个协议上的回调函数列表。这里的列表值得一提，分别是 ptype_all 和 ptype_base。他们是 hash table 数据结构，分别对应通用数据包（ETH_P_ALL 类型）和特定协议的数据包（ETH_P_XXX 类型），其中存放着指向对应协议处理函数的指针，当收到该类型的数据包时便调用对应的处理函数。</p><p>因此，以 IP 数据包为例，当 ETH_P_IP 类型数据包出队后，软中断处理程序 net_rx_action 最终会在 ptype_base 列表中找到 IP 协议的处理函数 ip_rcv() 并调用它，完成数据包向上提交到协议栈。这里略过 IP 协议栈的处理过程，简而言之，在经过 IP 数据包完整性校验、Netfilter 子系统（iptables 的底层实现）、路由子系统等等一些列流程之后，开始准备送往高层协议。这里的处理和 net_rx_action 很相似，从 IP 数据包头部提取出协议类型后，通过名为 inet_protos 的哈希来寻找高层协议的处理函数，每个高层协议都对应一个处理函数，型如 tcp_v4_rcv(), udp_rcv() 等。</p><p>四层协议以较为简单的 UDP 为例，udp_rcv 会对 udp 包进行合法性校验，然后查找是否有愿意接收此数据包的套接字，如果找到，__udp_queue_rcv_skb 会将包放到 socket 的接收队列。最后，所有在这个 socket 上等待数据的进程都会收到通过 sk_data_ready 函数处理的通知。</p><p>以上是一个数据包穿越协议栈到达 socket 的简要过程，实际的内核处理过程会复杂的多，这里只是做简要的描述。以引入本文的主角：PF_PACKET 协议数据包在内核中的处理路径。</p><p>当创建 PF_PACKET 套接字时，与协议相关的数据包类型将被同时注册进 ptype_all 和 ptype_base，接受函数为 packet_rcb()。此时，net_rx_action 函数会拦截所有进入机器的包，并同样通过 netif_receive_skb 函数遍历 ptype_all 后，传递给 PF_PACKET 接受函数。值得一提的是，tcpdump 依赖的 libpcap 库并非使用原始套接字 + recvfrom 的方式收包，而是在内核空间分配一块内核缓冲区，然后用户空间调用 mmap 系统调用映射到用户空间。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><p><a href="https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/" target="_blank" rel="noopener">Monitoring and Tuning the Linux Networking Stack: Receiving Data</a></p><p><a href="https://www.linuxjournal.com/article/4852" target="_blank" rel="noopener">Inside the Linux Packet Filter</a></p><p><a href="https://km.woa.com/group/17746/articles/show/%E5%9B%BE%E8%A7%A3linux%20tcpdump" target="_blank" rel="noopener">图解 linux tcpdump</a></p><p>《深入理解 Linux 网络技术内幕》</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址 &lt;a href=&quot;https://cloud.tencent.com/developer/article/1879646&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cloud.tencent.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最近使用 tcpdump 的时候突然想到这个问题。因为我之前只存在一些一知半解的认识：比如直接镜像了网卡的包、在数据包进入内核前就获取了。但这些认识真的正确么？针对...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近使用 tcpdump 的时候突然想到这个问题。因为我之前只存在一些一知半解的认识：比如直接镜像了网卡的包、在数据包进入内核前就获取了。但这些认识真的正确么？针对这个问题，我进行了一番学习探究。&lt;/p&gt;
&lt;p&gt;先说结论：通过 PF_PACKET 这个特殊的套接字协议，直接接收来自链路层的帧。数据包&lt;strong&gt;并非没有&lt;/strong&gt;进入内核，而是在进入内核后直接跳过了内核中三层 / 四层的协议栈，直达套接字接口，被应用层的 tcpdump 所使用。实际上，在网卡驱动程序通知内核接受到数据帧的时候，数据包就已经进入了内核处理流程。具体的区别，可以见下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2022/07/01/linux/how_tcpdump/1620.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;内核网络协议栈示意图&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://talengu.github.io/public/categories/Linux/"/>
    
    
      <category term="tcpdump" scheme="https://talengu.github.io/public/tags/tcpdump/"/>
    
  </entry>
  
  <entry>
    <title>使用脚本将英文rss转成中文rss</title>
    <link href="https://talengu.github.io/public/2022/05/08/rss_google_translate/"/>
    <id>https://talengu.github.io/public/2022/05/08/rss_google_translate/</id>
    <published>2022-05-08T22:00:04.000Z</published>
    <updated>2022-05-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><p>本文中我们将英文rss 自动转成中文 rss供ttrss使用。（利用谷歌翻译）</p><p>方便在手机上进行阅读或者收听。</p><center><img src="/public/2022/05/08/rss_google_translate/20220508-22-28-27.png" width="30%"></center><a id="more"></a><h2 id="举例"><a class="header-anchor" href="#举例">¶</a>举例</h2><p>国外有很多不错的rss源，比如:</p><ul><li><a href="http://www.mckinsey.com/insights/rss" target="_blank" rel="noopener">McKinsey Insights &amp; Publications</a>  <center><img src="/public/2022/05/08/rss_google_translate/20220508-22-18-23.png" width="50%"></center></li></ul>    转成中文rss    <center><img src="/public/2022/05/08/rss_google_translate/20220508-22-20-48.png" width="50%"></center><ul><li><p><a href="http://rss.acast.com/nature" target="_blank" rel="noopener">Nature Podcast</a></p>  <center><img src="/public/2022/05/08/rss_google_translate/20220508-22-25-04.png" width="50%"></center></li></ul>   转成中文rss       <center><img src="/public/2022/05/08/rss_google_translate/20220508-22-26-36.png" width="50%"></center><h2 id="脚本"><a class="header-anchor" href="#脚本">¶</a>脚本</h2><p>使用 Translate 和 BeautifulSoup 项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8 </span></span><br><span class="line"><span class="keyword">from</span> pygtrans <span class="keyword">import</span> Translate</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># pip 安装</span></span><br><span class="line"><span class="comment"># pip install pygtrans BeautifulSoup -i https://pypi.org/simple</span></span><br><span class="line"><span class="comment"># ref:https://zhuanlan.zhihu.com/p/390801784</span></span><br><span class="line"><span class="comment"># ref:https://beautifulsoup.readthedocs.io/zh_CN/latest/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># client = Translate()</span></span><br><span class="line"><span class="comment"># text = client.translate('Google Translate')</span></span><br><span class="line"><span class="comment"># print(text.translatedText)  # 谷歌翻译</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> feedparser</span><br><span class="line"></span><br><span class="line">args = sys.argv</span><br><span class="line">URL=<span class="string">"http://www.mckinsey.com/insights/rss"</span></span><br><span class="line"></span><br><span class="line">BASE=<span class="string">"/home/xxx/www/"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tran</span><span class="params">(url=URL,out_dir=BASE+<span class="string">"mckinsey_rss.xml"</span>)</span>:</span></span><br><span class="line">    GT = Translate()</span><br><span class="line">    content= request.urlopen(url).read().decode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 变tag，以使用谷歌翻译</span></span><br><span class="line">    content=content.replace(<span class="string">'title&gt;'</span>, <span class="string">'stitle&gt;'</span>) <span class="comment">#谷歌翻译会将很多titile去掉，所以需要换一个tag</span></span><br><span class="line">    content=content.replace( <span class="string">'&lt;pubDate&gt;'</span>,<span class="string">'&lt;pubDate&gt;&lt;span translate="no"&gt;'</span>) </span><br><span class="line">    <span class="comment"># 谷歌翻译对&lt;span translate="no"&gt; &lt;/span&gt; 不翻译。</span></span><br><span class="line">    content=content.replace( <span class="string">'&lt;/pubDate&gt;'</span>,<span class="string">'&lt;/span&gt;&lt;/pubDate&gt;'</span>)</span><br><span class="line">    <span class="comment">#print(content)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    _text = GT.translate(content)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(out_dir,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        c=_text.translatedText</span><br><span class="line">        <span class="comment"># 还原tag</span></span><br><span class="line">        c=c.replace(<span class="string">'stitle&gt;'</span>, <span class="string">'title&gt;'</span>)</span><br><span class="line">        c=c.replace(<span class="string">'&lt;span translate="no"&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">        c=c.replace(<span class="string">'&lt;/span&gt;&lt;/pubDate&gt;'</span>, <span class="string">'&lt;/pubDate&gt;'</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        f.write(c)</span><br><span class="line">        <span class="comment">#f.write(content)</span></span><br><span class="line">    print(<span class="string">"GT: "</span>+ url +<span class="string">" &gt; "</span>+ out_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(args)==<span class="number">1</span>:</span><br><span class="line">    tran()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    tran(args[<span class="number">1</span>],args[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tran_nature</span><span class="params">(url=<span class="string">"http://rss.acast.com/nature"</span>,out_dir=BASE+<span class="string">"nature_rss.xml"</span>)</span>:</span></span><br><span class="line">    GT = Translate()</span><br><span class="line">    </span><br><span class="line">    html_doc=request.urlopen(url).read().decode(<span class="string">'utf8'</span>)</span><br><span class="line">    soup = BeautifulSoup(html_doc)</span><br><span class="line"></span><br><span class="line">    items=soup.find_all(<span class="string">'item'</span>)</span><br><span class="line">    <span class="comment"># nature post内容太多，谷歌api翻译不了，去掉一些</span></span><br><span class="line">    <span class="keyword">for</span> idx,e <span class="keyword">in</span> enumerate(items):</span><br><span class="line">        <span class="keyword">if</span> idx &gt;<span class="number">8</span>:</span><br><span class="line">                e.decompose()</span><br><span class="line">    </span><br><span class="line">    content= str(soup)</span><br><span class="line">    content=content.replace(<span class="string">'title&gt;'</span>, <span class="string">'stitle&gt;'</span>)</span><br><span class="line">    content=content.replace( <span class="string">'&lt;pubdate&gt;'</span>,<span class="string">'&lt;pubDate&gt;&lt;span translate="no"&gt;'</span>)</span><br><span class="line">    content=content.replace( <span class="string">'&lt;/pubdate&gt;'</span>,<span class="string">'&lt;/span&gt;&lt;/pubdate&gt;'</span>)</span><br><span class="line">    <span class="comment">#print(content)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    _text = GT.translate(content)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(out_dir,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        c=_text.translatedText</span><br><span class="line">        c=c.replace(<span class="string">'stitle&gt;'</span>, <span class="string">'title&gt;'</span>)</span><br><span class="line">        c=c.replace(<span class="string">'&lt;span translate="no"&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">        c=c.replace(<span class="string">'&lt;/span&gt;&lt;/pubdate&gt;'</span>, <span class="string">'&lt;/pubDate&gt;'</span>) <span class="comment"># 对于ttrss需要为pubDate才会识别正确</span></span><br><span class="line">        c=c.replace(<span class="string">'&amp;gt'</span>,<span class="string">'&gt;'</span>) <span class="comment"># &amp;gt 会影响识别</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        f.write(c)</span><br><span class="line">        <span class="comment">#f.write(content)</span></span><br><span class="line">    print(<span class="string">"GT: "</span>+ url +<span class="string">" &gt; "</span>+ out_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tran_nature()</span><br></pre></td></tr></table></figure><h3 id="定时任务"><a class="header-anchor" href="#定时任务">¶</a>定时任务</h3><blockquote><p>注意激活一下miniconda3 这个命令<code>source /home/xxx/miniconda3/bin/activate</code></p></blockquote><p>放到 <code>/etc/cron.daily/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> /home/xxx/miniconda3/bin/activate</span><br><span class="line">python /home/xxx/txxx.py</span><br></pre></td></tr></table></figure><h2 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h2><ul><li><a href="https://blog.csdn.net/wokuailewozihao/article/details/82021709" target="_blank" rel="noopener">利用Google翻译实现网站国际化——js插件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;¶&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;本文中我们将英文rss 自动转成中文 rss供ttrss使用。（利用谷歌翻译）&lt;/p&gt;
&lt;p&gt;方便在手机上进行阅读或者收听。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/public/2022/05/08/rss_google_translate/20220508-22-28-27.png&quot; width=&quot;30%&quot;&gt;
&lt;/center&gt;
    
    </summary>
    
      <category term="工具" scheme="https://talengu.github.io/public/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="rss" scheme="https://talengu.github.io/public/tags/rss/"/>
    
      <category term="python" scheme="https://talengu.github.io/public/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>rss统计 基于ttrss的PostgresQL数据库</title>
    <link href="https://talengu.github.io/public/2022/05/08/rss_ttrss_statics/"/>
    <id>https://talengu.github.io/public/2022/05/08/rss_ttrss_statics/</id>
    <published>2022-05-08T22:00:04.000Z</published>
    <updated>2022-05-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong>统计ttrss的使用数据。</p><ul><li>月度mark文件分析 OK</li></ul><p>TODO：</p><ul><li>全年阅读报告 doing</li></ul><a id="more"></a><h2 id="按月保存mark的内容"><a class="header-anchor" href="#按月保存mark的内容">¶</a>按月保存mark的内容</h2><p>账号 密码 和你docker文件里面的一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按月来保存</span></span><br><span class="line"><span class="keyword">import</span> html2text</span><br><span class="line"><span class="comment"># psycopg2 head</span></span><br><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"><span class="comment"># pip3 install psycopg2-binary</span></span><br><span class="line"><span class="comment"># ref:https://blog.csdn.net/Haiqiang1995/article/details/89069791</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_from_dataset</span><span class="params">(cmd_sql)</span>:</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># read database configuration</span></span><br><span class="line">        params = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">"?????"</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">"????"</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">"????"</span>,</span><br><span class="line">        <span class="string">'dbname'</span>: <span class="string">"ttrss"</span>,</span><br><span class="line">        'port': ??00</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># connect to the PostgresQL database</span></span><br><span class="line">        conn = psycopg2.connect(**params)</span><br><span class="line">        <span class="comment"># create a new cursor object</span></span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="comment"># execute the SELECT statement</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        print(cmd_sql)</span><br><span class="line">        cur.execute(cmd_sql)</span><br><span class="line"></span><br><span class="line">        blob = cur.fetchall()</span><br><span class="line">        <span class="comment"># blob = cur.fetchone()</span></span><br><span class="line">        <span class="comment">#open(path_to_dir + str(blob[0]) + '.jpg', 'wb').write(blob[1])</span></span><br><span class="line">        <span class="comment"># close the communication with the PostgresQL database</span></span><br><span class="line">        cur.close()</span><br><span class="line">    <span class="keyword">except</span> (Exception, psycopg2.DatabaseError) <span class="keyword">as</span> error:</span><br><span class="line">        print(error)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            conn.close()</span><br><span class="line">    print(<span class="string">"get_from_dataset success"</span>)</span><br><span class="line">    <span class="keyword">return</span> blob</span><br><span class="line"></span><br><span class="line">_s=<span class="string">"ref_id,feed_id,last_read,last_marked"</span></span><br><span class="line">cmd_sql=<span class="string">"SELECT %s  FROM public.ttrss_user_entries Where marked=TRUE AND last_marked BETWEEN '2022-04-01' And '2022-5-01'"</span> % _s</span><br><span class="line"><span class="comment"># 可以自己改日期</span></span><br><span class="line"></span><br><span class="line">g_content=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> _e <span class="keyword">in</span> sorted(get_from_dataset(cmd_sql),key=<span class="keyword">lambda</span> x:x[<span class="number">3</span>]):</span><br><span class="line">    [ref_id,feed_id,last_read,last_marked] = _e</span><br><span class="line">    _s=<span class="string">"id,title,link,updated,content"</span></span><br><span class="line">    cmd_sql=<span class="string">"SELECT %s FROM public.ttrss_entries WHERE id = %s"</span> % (_s,ref_id)</span><br><span class="line">    [id,title,link,updated,content] =get_from_dataset(cmd_sql)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    g_content += <span class="string">"# [%s](%s)\n"</span>%(title,link)</span><br><span class="line">    g_content +=<span class="string">"pubdata:%s\n"</span>%str(updated)</span><br><span class="line">    g_content +=<span class="string">"markdate:%s\n"</span>%str(last_marked)</span><br><span class="line">    g_content+=html2text.html2text(content)</span><br><span class="line">    </span><br><span class="line">    g_content+=<span class="string">"\n\n"</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">D=<span class="string">"C:\\Users\\talen\\Desktop\\"</span></span><br><span class="line"><span class="keyword">with</span> open(D+<span class="string">"cc.md"</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(g_content)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;
统计ttrss的使用数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;月度mark文件分析 OK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全年阅读报告 doing&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="https://talengu.github.io/public/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="rss" scheme="https://talengu.github.io/public/tags/rss/"/>
    
      <category term="python" scheme="https://talengu.github.io/public/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>「转」GRE隧道测试</title>
    <link href="https://talengu.github.io/public/2022/05/05/linux/gre_test/"/>
    <id>https://talengu.github.io/public/2022/05/05/linux/gre_test/</id>
    <published>2022-05-05T22:52:28.000Z</published>
    <updated>2022-10-05T22:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文由 <a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简悦 SimpRead</a> 转码， 原文地址 <a href="https://juejin.cn/post/6988645230987706398" target="_blank" rel="noopener">juejin.cn</a></p></blockquote><p><img src="/public/2022/05/05/linux/gre_test/e31bac5bcb1347a59142486adaf94e30.jpg" alt></p><h2 id="0-前言"><a class="header-anchor" href="#0-前言">¶</a>0. 前言</h2><p>在学习 ipsec 过程中，一般都会涉及到 ipsec 的局限性：ipsec 协议是一种点对点协议，不支持组播，也不能保护组播、广播报文。因此 ipsec 协议无法用于音视频会议等场合，此时通常的解决办法是采用 <strong>GRE Over IPSec</strong> .</p><p>给出的解释是：GRE 协议可以封装组播、广播报文，但是无法对业务内容进行加密；而 ipsec 可以对报文进行加密，但是无法封装组播和广播报文。因此将两种协议结合，因而 GRE over IPSec 协议应运而生。 但是我找了很多资料 (其实没有多少)，都没有找到为什么 GRE 协议支持封装组播和广播报文，而 ipsec 不行；他们作为点对点协议，为什么  GRE 可以而 IPsec  不行呢？因为没有找到答案，所以不能证实自己的想法正确与否，于是通过搭建 GRE 隧道环境，学习 Linux 内核中 GRE 隧道的操作配置原则，希望能从中得到些许启发。</p><p>搭建 GRE 隧道环境实际上是很简单的，因为 Linux 内核已经支持了 GRE 隧道，因此直接在虚拟机 (ubuntu 和 CentOS) 里进行简单的配置即可完成操作。</p><a id="more"></a><p><img src="/public/2022/05/05/linux/gre_test/db260d2dc98445f9988f1c768ca3e744.jpg" alt></p><h2 id="1-Linux-内核支持的隧道类型"><a class="header-anchor" href="#1-Linux-内核支持的隧道类型">¶</a>1. Linux 内核支持的隧道类型</h2><p>目前 Linux 内核已经支持多种隧道类型，包括：IPIP 隧道，GRE 隧道，... 。其余这几个我也没见过。当然除了这几种，还有 ipsec 协议，l2tp 协议，可以的是我目前都还没有用过，实在是暴殄天物，罪过罪过</p><p><img src="/public/2022/05/05/linux/gre_test/412f1154b6c64d74acd7b8cb31f713a5.jpg" alt></p><p><img src="/public/2022/05/05/linux/gre_test/e080bb892ca045a3b92f83ace7642a68.jpg" alt></p><p>下面通过搭建两组拓扑环境，来学习 GRE 隧道的基本规则，然后在此基础上分析下 GRE 和 IPSEC 在组播和广播报文封装的表现出不同行为的可能原因 (另写一遍文章喽)。</p><h2 id="2-GRE-隧道跨-公-网连接相同子网地址主机"><a class="header-anchor" href="#2-GRE-隧道跨-公-网连接相同子网地址主机">¶</a>2. GRE 隧道跨 (公) 网连接相同子网地址主机</h2><h3 id="2-1-拓扑环境"><a class="header-anchor" href="#2-1-拓扑环境">¶</a>2.1 拓扑环境</h3><p><img src="/public/2022/05/05/linux/gre_test/4759759198334a2ebc2c296e548026b0.jpg" alt></p><p>家里设备有限，只有一台电脑，还是通过无线网卡来上网的，因此拓扑环境比较寒酸，其实这些并不重要，只需明白我的两台虚拟机 Ubantu 和 CentOS 通过桥接的方式连在一起，网络上可以通讯即可。</p><p>现在，我准备将两个地址分别为 10.1.2.1/24、10.1.2.2/24 的两台主机 (假的，只是个 IP 地址而已) 通过 GRE 隧道连接起来进行通讯。原则上这两个地址属于不同的子网中(Ubantu 中的子网和 CentOS 中的子网，只是这两个子网的网段相同仅此而已)，无法直接通讯。</p><h3 id="2-1-ubuntu-配置"><a class="header-anchor" href="#2-1-ubuntu-配置">¶</a>2.1 ubuntu 配置</h3><p>首先，我确定了下该虚拟机中是否存在 gre 相关的接口，结果当然是没有了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/home/toney<span class="comment"># ifconfig -a</span></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.10  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet6 2409:8a00:18e9:810:141:383c:ac6f:8b11  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 2409:8a00:18e9:810:f8dd:500e:b1a:463b  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 fe80::8e84:574c:7a8b:440a  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:fb:db:ad  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 3581  bytes 1030105 (1.0 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1177  bytes 114532 (114.5 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 160  bytes 12920 (12.9 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 160  bytes 12920 (12.9 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="2-1-1-添加-GRE-隧道"><a class="header-anchor" href="#2-1-1-添加-GRE-隧道">¶</a>2.1.1 添加 GRE 隧道</h4><blockquote><p>ip tunnel add Tunnel-1 mode gre remote 192.168.1.13 local 192.168.1.10</p></blockquote><p>添加 GRE 隧道时, 需要指定隧道的名称，我这里叫做 Tunnel-1; 因为要搭建 GRE 类型隧道，因此 mode 为 gre。 而 GRE 隧道的地址为 192.168.1.13&lt;========&gt;192.168.1.10。</p><p>由于是第一次执行此命令，底层实际上安装上了 gre 隧道相关的驱动。用户只有在此基础上才能配置 GRE 隧道，不过，无需担心，内核自动完成。</p><p>如果在添加隧道时不指定 remote 和 local 地址，也是可以的，它实际上是只是安装 gre 隧道相关驱动。下面是添加隧道时没有指定 remote 和 local 地址时的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">root@ubantu:/home/toney<span class="comment"># ip tunnel add Tunnel-1</span></span><br><span class="line">cannot determine tunnel mode (ipip, gre, vti or sit)</span><br><span class="line">root@ubantu:/home/toney<span class="comment"># ifconfig -a</span></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.10  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet6 2409:8a00:18e9:810:141:383c:ac6f:8b11  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 2409:8a00:18e9:810:200d:99e2:4f3d:cb6f  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 fe80::8e84:574c:7a8b:440a  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:fb:db:ad  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 5038  bytes 5896155 (5.8 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2744  bytes 309264 (309.2 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 164  bytes 15044 (15.0 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 164  bytes 15044 (15.0 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">root@ubantu:/home/toney<span class="comment"># ip tunnel add Tunnel-1 mode gre</span></span><br><span class="line">add tunnel <span class="string">"gre0"</span> failed: File exists</span><br><span class="line">root@ubantu:/home/toney<span class="comment"># ifconfig -a</span></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.10  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet6 2409:8a00:18e9:810:141:383c:ac6f:8b11  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 2409:8a00:18e9:810:200d:99e2:4f3d:cb6f  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 fe80::8e84:574c:7a8b:440a  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:fb:db:ad  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 5097  bytes 5900501 (5.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2766  bytes 311496 (311.4 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">erspan0: flags=4098&lt;BROADCAST,MULTICAST&gt;  mtu 1450</span><br><span class="line">        ether 00:00:00:00:00:00  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">gre0: flags=128&lt;NOARP&gt;  mtu 1452</span><br><span class="line">        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 1000  (UNSPEC)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">gretap0: flags=4098&lt;BROADCAST,MULTICAST&gt;  mtu 1462</span><br><span class="line">        ether 00:00:00:00:00:00  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 164  bytes 15044 (15.0 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 164  bytes 15044 (15.0 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">root@ubantu:/home/toney<span class="comment">#</span></span><br><span class="line">root@ubantu:/home/toney<span class="comment"># lsmod | grep gre</span></span><br><span class="line">ip_gre                 28672  0</span><br><span class="line">ip_tunnel              24576  1 ip_gre</span><br><span class="line">gre                    16384  1 ip_gre</span><br><span class="line">root@ubantu:/home/toney<span class="comment">#</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>如果输入完整的命令，则会成功添加上 Tunnel-1 隧道：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">root@ubantu:/home/toney<span class="comment"># ifconfig -a</span></span><br><span class="line">Tunnel-1: flags=144&lt;POINTOPOINT,NOARP&gt;  mtu 1476</span><br><span class="line">        unspec C0-A8-01-0A-00-00-00-87-00-00-00-00-00-00-00-00  txqueuelen 1000  (UNSPEC)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.1.10  netmask 255.255.255.0  broadcast 192.168.1.255</span><br><span class="line">        inet6 2409:8a00:18e9:810:141:383c:ac6f:8b11  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 2409:8a00:18e9:810:200d:99e2:4f3d:cb6f  prefixlen 64  scopeid 0x0&lt;global&gt;</span><br><span class="line">        inet6 fe80::8e84:574c:7a8b:440a  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:fb:db:ad  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 5745  bytes 5947674 (5.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2965  bytes 329731 (329.7 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">erspan0: flags=4098&lt;BROADCAST,MULTICAST&gt;  mtu 1450</span><br><span class="line">        ether 00:00:00:00:00:00  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">gre0: flags=128&lt;NOARP&gt;  mtu 1452</span><br><span class="line">        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 1000  (UNSPEC)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">gretap0: flags=4098&lt;BROADCAST,MULTICAST&gt;  mtu 1462</span><br><span class="line">        ether 00:00:00:00:00:00  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 169  bytes 15509 (15.5 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 169  bytes 15509 (15.5 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="2-1-2-配置-GRE-隧道接口-IP"><a class="header-anchor" href="#2-1-2-配置-GRE-隧道接口-IP">¶</a>2.1.2 配置 GRE 隧道接口 IP</h4><blockquote><p>ip addr add 10.1.2.1/24 dev Tunnel-1</p></blockquote><p>或者</p><blockquote><p>ifconfig Tunnel-1 10.1.2.1/24</p></blockquote><p>从添加隧道结果来看，Tunnel-1 接口虽然已经成功添加，但是处于 down 状态，此外也没有 IP 地址。 不，等等，那我们在添加隧道时指定的 remote 和 local 是什么呢？</p><p><strong>它是经过 <strong><strong>GRE</strong></strong> 隧道封装后的报文 <strong><strong>IP</strong></strong> 地址，但是针对什么报文进行封装，目前我们尚未配置</strong>。</p><p>配置此接口 IP 的目的是：为了确定哪些报文需要进入 GRE 接口，然后进行隧道封装。为什么需要添加 IP 呢？ 因为我们是通过路由将报文引入到 Tunnel-1 接口的, 如果不填 IP，那么我路由的下一条该写成什么呢， 是吧。</p><p><img src="/public/2022/05/05/linux/gre_test/772109c097cd48cab17c50d4dad64b10.jpg" alt></p><h4 id="2-1-3-激活-GRE-隧道接口-IP"><a class="header-anchor" href="#2-1-3-激活-GRE-隧道接口-IP">¶</a>2.1.3 激活 GRE 隧道接口 IP</h4><blockquote><p>ifconfig Tunnel-1 up</p></blockquote><p>或者</p><blockquote><p>ip link set Tunnel-1 up</p></blockquote><p>至于配置接口 IP 和是否 up 接口，没有什么先后顺序，把他们当做不同的 eth 接口处理即可。</p><p><img src="/public/2022/05/05/linux/gre_test/2410e66154a84a70b95d16a5df32e360.jpg" alt></p><h3 id="2-2-CentOS-配置"><a class="header-anchor" href="#2-2-CentOS-配置">¶</a>2.2 CentOS 配置</h3><p>CentOS 虚拟机的配置和 Ubantu 的配置完全相同，安照此步骤操作即可。</p><blockquote><p>ip tunnel add Tunnel-1 mode gre local 192.168.1.13 remote 192.168.1.10<br>ip link set Tunnel-1 up<br>ip addr add 10.1.2.2/24 dev Tunnel-1</p></blockquote><p>查看配置结果 r 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@toney toney]#</span><br><span class="line">[root@toney toney]#</span><br><span class="line">[root@toney toney]# ifconfig</span><br><span class="line">Tunnel-1  Link encap:UNSPEC  HWaddr C0-A8-01-0D-FF-FF-90-6D-00-00-00-00-00-00-00-00</span><br><span class="line">          inet addr:10.1.2.2  P-t-P:10.1.2.2  Mask:255.255.255.0</span><br><span class="line">          UP POINTOPOINT RUNNING NOARP  MTU:1476  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)</span><br><span class="line"></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:0C:29:DA:34:3C</span><br><span class="line">          inet addr:192.168.1.13  Bcast:192.168.1.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: 2409:8a00:18e9:810:20c:29ff:feda:343c/64 Scope:Global</span><br><span class="line">          inet6 addr: fe80::20c:29ff:feda:343c/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:3571 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:781 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:236685 (231.1 KiB)  TX bytes:71021 (69.3 KiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:4 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:4 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:240 (240.0 b)  TX bytes:240 (240.0 b)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>路由表信息如下：</p><p><img src="/public/2022/05/05/linux/gre_test/f70bfbe84af74c21bab5b21a5bea3821.jpg" alt></p><h3 id="2-3-ping-包测试通讯链路"><a class="header-anchor" href="#2-3-ping-包测试通讯链路">¶</a>2.3 ping 包测试通讯链路</h3><p>这里有一点需要注意：Linux 系统可能开了 iptables 过滤功能，因此在 ping 时出现了类似 &quot;ICMP host 192.168.1.13 unreachable - admin prohibited, length 116&quot; 信息，详情如下：</p><p><img src="/public/2022/05/05/linux/gre_test/26f4422a5f9d4772ac9a354db2dd9847.jpg" alt></p><p>百度一下, 在两台虚拟机上都执行如下操作即可：</p><blockquote><p>iptables -F</p></blockquote><p>然后在 ping 包测试，数据可通：</p><p><img src="/public/2022/05/05/linux/gre_test/2df9a98e03d54319ad3b00704fc31a32.jpg" alt></p><p><img src="/public/2022/05/05/linux/gre_test/b01f9527ea6842b68acbf612ec34c084.jpg" alt></p><p>至此，基本 GRE 隧道环境搭建成功。</p><h2 id="3-GRE-隧道跨-公-网连接不同子网地址主机"><a class="header-anchor" href="#3-GRE-隧道跨-公-网连接不同子网地址主机">¶</a>3. GRE 隧道跨 (公) 网连接不同子网地址主机</h2><h3 id="3-1-拓扑环境"><a class="header-anchor" href="#3-1-拓扑环境">¶</a>3.1 拓扑环境</h3><p><img src="/public/2022/05/05/linux/gre_test/8752f3648dbc4dc4bd9036f00348ec9c.jpg" alt></p><p><strong>目的：</strong> 通过 GRE 隧道将 20.1.2.1/24、20.1.3.2/24 两个子网连接起来进行通讯。</p><h3 id="3-2-Ubantu-配置"><a class="header-anchor" href="#3-2-Ubantu-配置">¶</a>3.2 Ubantu 配置</h3><h4 id="3-2-1-配置-ens33-子接口-IP"><a class="header-anchor" href="#3-2-1-配置-ens33-子接口-IP">¶</a>3.2.1 配置 ens33 子接口 IP</h4><blockquote><p>ifconfig eth0:1 192.168.100.1/24</p></blockquote><p>查看接口配置如下：</p><p><img src="/public/2022/05/05/linux/gre_test/773d0b1700254e8ba9f847fdc2e79fd4.jpg" alt></p><h4 id="3-2-2-添加另一个-GRE-隧道接口并-up"><a class="header-anchor" href="#3-2-2-添加另一个-GRE-隧道接口并-up">¶</a>3.2.2 添加另一个 GRE 隧道接口并 up</h4><blockquote><p>ip tunnel add Tunnel-2 mode gre local 192.168.100.1 remote 192.168.100.2</p><p>ifconfig Tunnel-2 up</p></blockquote><h4 id="3-2-3-配置隧道接口-IP"><a class="header-anchor" href="#3-2-3-配置隧道接口-IP">¶</a>3.2.3 配置隧道接口 IP</h4><blockquote><p>ifconfig Tunnel-2 20.1.2.1/24</p></blockquote><p><img src="/public/2022/05/05/linux/gre_test/fbefdbdcba514312960176a103139de9.jpg" alt></p><h4 id="3-2-4-添加对端子网路由表"><a class="header-anchor" href="#3-2-4-添加对端子网路由表">¶</a>3.2.4 添加对端子网路由表</h4><p>由于本端没有对端子网 20.1.3.0/24 的路由，因此需要添加路由，将该网段报文引入到 Tunnel-2 接口，这样便可以通过 GRE 隧道进行封装。</p><blockquote><p>route add -net 20.1.3.0/24 gw 20.1.2.1</p></blockquote><p><img src="/public/2022/05/05/linux/gre_test/199432ae8e9e40e8b993ec0a0bca9016.jpg" alt></p><h3 id="3-3-CentOS-配置"><a class="header-anchor" href="#3-3-CentOS-配置">¶</a>3.3 CentOS 配置</h3><h4 id="3-3-1-配置-ens33-子接口-IP"><a class="header-anchor" href="#3-3-1-配置-ens33-子接口-IP">¶</a>3.3.1 配置 ens33 子接口 IP</h4><blockquote><p>ifconfig ens33:1 192.168.100.2/24</p></blockquote><p><img src="/public/2022/05/05/linux/gre_test/e9e2f1e4871f4c42ade68774b4bb4e75.jpg" alt></p><h4 id="3-3-2-添加另一个-GRE-隧道接口并-up"><a class="header-anchor" href="#3-3-2-添加另一个-GRE-隧道接口并-up">¶</a>3.3.2 添加另一个 GRE 隧道接口并 up</h4><blockquote><p>ip tunnel add Tunnel-2 mode gre remote 192.168.100.1 local 192.168.100.2</p><p>ifconfig Tunnel-2 up</p></blockquote><p>结果如下：</p><p><img src="/public/2022/05/05/linux/gre_test/8618b40c1afb497dbc85234fd0c58ad8.jpg" alt></p><h4 id="3-3-3-配置隧道接口-IP"><a class="header-anchor" href="#3-3-3-配置隧道接口-IP">¶</a>3.3.3 配置隧道接口 IP</h4><blockquote><p>ifconfig Tunnel-2 20.1.3.1/24</p></blockquote><h4 id="3-3-4-添加对端子网路由表"><a class="header-anchor" href="#3-3-4-添加对端子网路由表">¶</a>3.3.4 添加对端子网路由表</h4><p>由于本端没有对端子网 20.1.2.0/24 的路由，因此需要添加路由，将该网段报文引入到 Tunnel-2 接口，这样便可以通过 GRE 隧道进行封装。</p><blockquote><p>route add -net 20.1.2.0/24 gw 20.1.3.1</p></blockquote><p><img src="/public/2022/05/05/linux/gre_test/da52fb97c1044858bd28e645df512622.jpg" alt></p><h3 id="3-4-ping-测试链路连通性"><a class="header-anchor" href="#3-4-ping-测试链路连通性">¶</a>3.4 ping 测试链路连通性</h3><p><img src="/public/2022/05/05/linux/gre_test/1a28e720a97746f3a801a824a9ff95fd.jpg" alt></p><p><img src="/public/2022/05/05/linux/gre_test/5d3739151b0843c98c1c7352e91008c3.jpg" alt></p><p>​</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文由 &lt;a href=&quot;http://ksria.com/simpread/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简悦 SimpRead&lt;/a&gt; 转码， 原文地址 &lt;a href=&quot;https://juejin.cn/post/6988645230987706398&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;juejin.cn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/public/2022/05/05/linux/gre_test/e31bac5bcb1347a59142486adaf94e30.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;0-前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#0-前言&quot;&gt;¶&lt;/a&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;在学习 ipsec 过程中，一般都会涉及到 ipsec 的局限性：ipsec 协议是一种点对点协议，不支持组播，也不能保护组播、广播报文。因此 ipsec 协议无法用于音视频会议等场合，此时通常的解决办法是采用 &lt;strong&gt;GRE Over IPSec&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;给出的解释是：GRE 协议可以封装组播、广播报文，但是无法对业务内容进行加密；而 ipsec 可以对报文进行加密，但是无法封装组播和广播报文。因此将两种协议结合，因而 GRE over IPSec 协议应运而生。 但是我找了很多资料 (其实没有多少)，都没有找到为什么 GRE 协议支持封装组播和广播报文，而 ipsec 不行；他们作为点对点协议，为什么  GRE 可以而 IPsec  不行呢？因为没有找到答案，所以不能证实自己的想法正确与否，于是通过搭建 GRE 隧道环境，学习 Linux 内核中 GRE 隧道的操作配置原则，希望能从中得到些许启发。&lt;/p&gt;
&lt;p&gt;搭建 GRE 隧道环境实际上是很简单的，因为 Linux 内核已经支持了 GRE 隧道，因此直接在虚拟机 (ubuntu 和 CentOS) 里进行简单的配置即可完成操作。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="https://talengu.github.io/public/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="隧道技术" scheme="https://talengu.github.io/public/tags/%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
