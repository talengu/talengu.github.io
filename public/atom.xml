<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一塘</title>
  
  
  <link href="/public/atom.xml" rel="self"/>
  
  <link href="https://talengu.github.io/public/"/>
  <updated>2022-07-16T16:00:04.000Z</updated>
  <id>https://talengu.github.io/public/</id>
  
  <author>
    <name>一塘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「转」BGmi – 自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-01-063258020141/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-01-063258020141/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://www.appinn.com/bgmi/" target="_blank" rel="noopener">BGmi – 自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人</a></p><a id="more"></a><p><strong>BGmi</strong> 是一款开源的自动追番的工具，通过多个数据源订阅番剧更新，使用 aria2、transmission 等工具下载，Web管理界面，全平台适用。折腾一次，永久使用，适合所有正在追番的懒人。@<a href="https://www.appinn.com/bgmi/" target="_blank" rel="noopener">Appinn</a></p><p><img src="https://img3.appinn.net/images/202206/appinn-2022-06-29t202618-430.jpg!o" alt="BGmi -自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人"></p><p>原文来自 @<a href="https://www.appinn.com/author/390080445/" target="_blank" rel="noopener">root</a>。</p><p>大家好，由于你 B 4月新（鸽了太久已经不新了）番十分不给力，什么都看不了，加上本人人懒，不想搜索网盘并下载，就想找个能自动追番的工具。根据之前的经验，RSS是可以实现这个需求的，但是感觉 rss 配置起来很复杂，就想看看有没有什么简单的方式来实现，去 gayhub 上搜了一圈，发现了 bgmi 这个工具。</p><p><img src="https://img3.appinn.net/images/202206/bgmi_admin.jpg!o" alt="BGmi - 自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人12"></p><p>bgmi 可以同步最新番剧数据，帮助订阅番剧并实现自动追番，同时提供 WebUI 给出还不错的追番日历。</p><p>在日历中看到想追的番剧，只要点击订阅就可以了。bgmi 支持多个番剧数据源，支持多种下载软件，同时内置的 WebUI播放器据说支持弹幕（虽然我没成功），可以按需选择，自由定制。</p><p>![BGmi - 自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人13](<a href="https://img3.appinn.net/images/202206/screen-" target="_blank" rel="noopener">https://img3.appinn.net/images/202206/screen-</a>appinn2022-06-29-21-16-26.jpg!o)</p><p>bgmi 本身是命令行脚本，使用前需要配置下载器。作者提供了一个集成好各项配置的 docker镜像，推荐使用这个镜像获得更加懒人化的使用体验。本文截图全部来自 docker 版本搭建。</p><h2 id="获取"><a class="header-anchor" href="#获取">¶</a>获取</h2><ul><li><a href="https://kutt.appinn.net/iivedD" target="_blank" rel="noopener">GitHub</a></li></ul><hr><p>青小蛙尝试了一下，结果发现网络联通是最大的问题，如果能解决这个问题，用起来还是挺顺手的。</p><p>简易教程，基于 <a href="https://github.com/BGmi/bgmi-docker-all-in-one" target="_blank" rel="noopener">Docker</a>：</p><pre><code>docker run -d --name bgmi -v 本地路径:/bgmi -p 80:80 -p 9091:9091 -e BGMI_ADMIN_TOKEN=admin -e TZ=Asia/Hongkong codysk/bgmi-all-in-one</code></pre><p>然后要等一会，再进入容器安装前台界面，以及更新日历：</p><pre><code>docker exec -it bgmi /bin/bashbgmi installbgmi cal</code></pre><p>就可以了。可以进入容器后使用 <code>export https_proxy=http://127.0.0.1:8123</code> 设置代理，速度会好很多。</p><p>![BGmi - 自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人14](<a href="https://img3.appinn.net/images/202206/screen-" target="_blank" rel="noopener">https://img3.appinn.net/images/202206/screen-</a>appinn2022-06-29-21-24-10.jpg!o)</p><p>原文：<a href="https://www.appinn.com/bgmi/" target="_blank" rel="noopener">https://www.appinn.com/bgmi/</a></p><hr><p><a href="http://www.appinn.com/copyright/?utm_source=feeds&amp;utm_medium=copyright&amp;utm_campaign=feeds" title="版权声明" target="_blank" rel="noopener">(C)</a>2021 青小蛙 for<a href="http://www.appinn.com/?utm_source=feeds&amp;utm_medium=appinn&amp;utm_campaign=feeds" title="本文来自小众软件" target="_blank" rel="noopener">小众软件</a> | [加入我们](<a href="http://www.appinn.com/join-" target="_blank" rel="noopener">http://www.appinn.com/join-</a>us/?utm_source=feeds&amp;utm_medium=joinus&amp;utm_campaign=feeds &quot;加入小众软件&quot;) |<a href="https://meta.appinn.net/c/faxian/?utm_source=feeds&amp;utm_medium=contribute&amp;utm_campaign=feeds" title="给小众软件投稿" target="_blank" rel="noopener">投稿</a> | [订阅指南](<a href="http://www.appinn.com/feeds-" target="_blank" rel="noopener">http://www.appinn.com/feeds-</a>subscribe/?utm_source=feeds&amp;utm_medium=feedsubscribe&amp;utm_campaign=feeds&quot;可以分类订阅小众，Windows/MAC/游戏&quot;)<br>3659b075e72a5b7b1b87ea74aa7932ff<br><a href="https://www.appinn.com/bgmi/#comments" title="to the comments" target="_blank" rel="noopener">点击这里留言、和原作者一起评论</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://www.appinn.com/bgmi/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BGmi – 自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」老牌截图工具 PicPick 更新，新增录屏功能，支持 MP4/GIF 格式</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-02-041120453414/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-02-041120453414/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://www.appinn.com/picpick-6-2/" target="_blank" rel="noopener">老牌截图工具 PicPick 更新，新增录屏功能，支持 MP4/GIF 格式</a></p><a id="more"></a><p>老牌的多功能截图工具 <a href="https://www.appinn.com/tag/picpick/" target="_blank" rel="noopener">PicPick</a> 于6月27日发布了 v6.2.1版本，新增录屏功能，支持保存为 MP4 或 GIF动画格式，支持麦克风或系统声音，简单易用。@<a href="https://www.appinn.com/picpick-6-2/" target="_blank" rel="noopener">Appinn</a></p><p><img src="https://img3.appinn.net/images/202206/picpick-screen-capturing.jpg!o" alt="老牌截图工具 PicPick 更新，新增录屏功能，支持 MP4/GIF格式"></p><h2 id="PicPick-新增录屏功能"><a class="header-anchor" href="#PicPick-新增录屏功能">¶</a>PicPick 新增录屏功能</h2><p>PicPick 的录屏功能有一个简洁的工具栏，可选全屏或区域录制，可以快速选择录制格式、声音，以及是否包括鼠标光标：</p><p>![老牌截图工具 PicPick 更新，新增录屏功能，支持 MP4/GIF 格式32](<a href="https://img3.appinn.net/images/202206/screen-" target="_blank" rel="noopener">https://img3.appinn.net/images/202206/screen-</a>appinn2022-06-29-12-52-43.jpg!o)</p><p>设置已自带中文，可以修改录屏质量、FPS、音频参数等，这些功能大部分都可以在工具栏上设置：</p><p>![老牌截图工具 PicPick 更新，新增录屏功能，支持 MP4/GIF 格式33](<a href="https://img3.appinn.net/images/202206/screen-" target="_blank" rel="noopener">https://img3.appinn.net/images/202206/screen-</a>appinn2022-06-29-12-51-14.jpg!o)</p><p>最后，PicPick 针对个人及家庭用户免费，但不提供自动更新，需要用户手动更新。</p><h2 id="获取"><a class="header-anchor" href="#获取">¶</a>获取</h2><ul><li><a href="https://kutt.appinn.net/GzqoNN" target="_blank" rel="noopener">官网</a></li><li><a href="https://d.appinn.com/picpick-6-2/" target="_blank" rel="noopener">搬运</a></li></ul><h2 id="PicPick-主要功能"><a class="header-anchor" href="#PicPick-主要功能">¶</a>PicPick 主要功能</h2><h3 id="屏幕截图"><a class="header-anchor" href="#屏幕截图">¶</a>屏幕截图</h3><p>截获屏幕截图、活动窗口的截图、桌面滚动窗口的截图和任何特定区域的截图等等</p><ul><li>支持多个监控环境、捕捉光标、自动保存和文件命名等功能</li><li>支持浮动部件捕获栏，这样您就可以非常方便地截图了</li><li>定制自己的键盘快捷方式。</li><li>全屏</li><li>活动窗口</li><li>窗口控制</li><li>滚动窗口</li><li>区域</li><li>固定区域</li><li>自由截图</li><li>重复上一次的截图</li><li>截图小部件</li><li>使用光标截图</li><li>延迟捕获</li><li>自动保存</li></ul><h3 id="图片编辑器"><a class="header-anchor" href="#图片编辑器">¶</a>图片编辑器</h3><p>内置图片编辑器并且包括最新的 Ribbon 风格菜单，可注释和标记图片</p><ul><li>绘画</li><li>插入文本</li><li>箭头、线条</li><li>形状</li><li>气球</li><li>标记工具</li><li>裁剪</li><li>调整尺寸</li><li>旋转</li><li>反转</li><li>灰度</li><li>马赛克</li><li>框架</li><li>水印</li><li>模糊</li><li>锐化</li><li>亮度</li><li>色相/饱和度</li><li>色彩平衡</li></ul><h3 id="保存、分享或发送"><a class="header-anchor" href="#保存、分享或发送">¶</a>保存、分享或发送</h3><p>一旦完成了获取和编辑你的照片之后，你可以保存、分享图片或将图片发送给其他人</p><ul><li>剪贴板</li><li>图片文件</li><li>PDF</li><li>打印机</li><li>网址</li><li>Dropbox</li><li>Google Drive</li><li>OneDrive</li><li>Box</li><li>脸书</li><li>推特</li><li>Skype</li><li>FTP服务器</li><li>电子邮件</li><li>微软 Word</li><li>微软 PowerPoint</li><li>微软 Excel</li><li>外部程序</li></ul><h3 id="颜色选择器"><a class="header-anchor" href="#颜色选择器">¶</a>颜色选择器</h3><p>使用内置的放大镜窗口来帮助你找到屏幕上准确的像素颜色代码。</p><p>支持 RGB，HTML，C++ 和 Delphi。</p><h3 id="调色板"><a class="header-anchor" href="#调色板">¶</a>调色板</h3><p>使用支持 RGB 和 HSV 的 Photoshop 的颜色选择器来探索和优化像素颜色代码。</p><h3 id="像素标尺"><a class="header-anchor" href="#像素标尺">¶</a>像素标尺</h3><p>帮助你测量对象的大小并将对象精确地放置在屏幕上。</p><p>支持水平和垂直方向、单位（像素，英寸和厘米）、DPI 设置(72, 96, 120, 300)和皮肤。.</p><h3 id="放大镜"><a class="header-anchor" href="#放大镜">¶</a>放大镜</h3><p>您可以使用便捷的放大镜工具来查看桌面上任何区域。</p><h3 id="瞄准器"><a class="header-anchor" href="#瞄准器">¶</a>瞄准器</h3><p>这个功能能够确定图片的相对坐标位置。</p><p>这在某些场合是非常实用，例如：开发 HTML 图片映射。</p><h3 id="量角器"><a class="header-anchor" href="#量角器">¶</a>量角器</h3><p>它能够帮助您测量屏幕上的任意角度。选择一个中心和一个位置,然后测量这个位置距离中心的角度。</p><p>这个功能可以应用于各种摄影、数学和图形应用中。</p><h3 id="白板"><a class="header-anchor" href="#白板">¶</a>白板</h3><p>你可以在桌面上设置虚拟白板。你可以用它来展示事物或者在桌面上绘画。</p><p>原文：<a href="https://www.appinn.com/picpick-6-2/" target="_blank" rel="noopener">https://www.appinn.com/picpick-6-2/</a></p><hr><h2 id="相关阅读"><a class="header-anchor" href="#相关阅读">¶</a>相关阅读</h2><ul><li><a href="https://www.appinn.com/picpick-180/" title="Permanent Link: 经典截图软件 PicPick 更新至 1.8.0 版本" target="_blank" rel="noopener">经典截图软件 PicPick 更新至 1.8.0 版本</a></li><li><a href="https://www.appinn.com/picpick/" title="Permanent Link: PicPick – 不可多得的经典截图工具" target="_blank" rel="noopener">PicPick - 不可多得的经典截图工具</a></li><li><a href="https://www.appinn.com/picpick-6-0/" title="Permanent Link: Picpick 6.0 发布，就多了一个黑暗模式？" target="_blank" rel="noopener">Picpick 6.0 发布，就多了一个黑暗模式？</a></li><li><a href="https://www.appinn.com/picpick-v2-2/" title="Permanent Link: PicPick v2.2 添加分享社会化网络功能" target="_blank" rel="noopener">PicPick v2.2 添加分享社会化网络功能</a></li><li><a href="https://www.appinn.com/picpick-4/" title="Permanent Link: 经典截图工具 PicPick 新增了许多小图章[Win]" target="_blank" rel="noopener">经典截图工具 PicPick 新增了许多小图章[Win]</a></li></ul><hr><p><a href="http://www.appinn.com/copyright/?utm_source=feeds&amp;utm_medium=copyright&amp;utm_campaign=feeds" title="版权声明" target="_blank" rel="noopener">(C)</a>2021 青小蛙 for<a href="http://www.appinn.com/?utm_source=feeds&amp;utm_medium=appinn&amp;utm_campaign=feeds" title="本文来自小众软件" target="_blank" rel="noopener">小众软件</a> | [加入我们](<a href="http://www.appinn.com/join-" target="_blank" rel="noopener">http://www.appinn.com/join-</a>us/?utm_source=feeds&amp;utm_medium=joinus&amp;utm_campaign=feeds &quot;加入小众软件&quot;) |<a href="https://meta.appinn.net/c/faxian/?utm_source=feeds&amp;utm_medium=contribute&amp;utm_campaign=feeds" title="给小众软件投稿" target="_blank" rel="noopener">投稿</a> | [订阅指南](<a href="http://www.appinn.com/feeds-" target="_blank" rel="noopener">http://www.appinn.com/feeds-</a>subscribe/?utm_source=feeds&amp;utm_medium=feedsubscribe&amp;utm_campaign=feeds&quot;可以分类订阅小众，Windows/MAC/游戏&quot;)<br>3659b075e72a5b7b1b87ea74aa7932ff<br><a href="https://www.appinn.com/picpick-6-2/#comments" title="to thecomments" target="_blank" rel="noopener">点击这里留言、和原作者一起评论</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://www.appinn.com/picpick-6-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;老牌截图工具 PicPick 更新，新增录屏功能，支持 MP4/GIF 格式&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」Typing Learner – 硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」[Windows/macOS]</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-04-050658902152/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-04-050658902152/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://www.appinn.com/typing-learner/" target="_blank" rel="noopener">Typing Learner – 硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」[Windows/macOS]</a></p><a id="more"></a><p><strong>Typing Learner</strong> 是一款能够从字幕中生成的词库（单词本）的 Windows、macOS工具，它通过分析、过滤，洗掉熟悉的单词，只保留生词，然后进行键盘记忆背单词的过程，与众不同之处在于，背单词时会有原始字幕可以参考，并且还能实时预览电影片段。@[Appinn](<a href="https://www.appinn.com/typing-" target="_blank" rel="noopener">https://www.appinn.com/typing-</a>learner/)</p><p><img src="https://img3.appinn.net/images/202207/appinn-2022-07-03t115649-847.jpg!o" alt="Typing Learner - 硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」[Windows/macOS]24"></p><p>就先来看这个直喊好家伙的 @<a href="https://meta.appinn.net/t/topic/33783/6?u=qingwa" target="_blank" rel="noopener">nicetry</a> 同学吧：</p><p>好家伙！好家伙！！好家伙！！！</p><p>刚开始不是太明白怎么用，琢磨了一会儿，自己新建了一个简单词库.txt,用Typing Learner洗出来一个词库，再用这个简单的词库去把视频里的熟词洗掉。</p><p>这个软件毫无疑问就是我一直想要的。赶紧注册了<a href="https://meta.appinn.net/" target="_blank" rel="noopener">小众软件论坛</a>来感谢感谢<img src="https://meta.appinn.net/images/emoji/apple/pray/2.png?v=12" alt=":pray:t2:"></p><p>最后有一点不成熟的小建议：：背单词词模式下可不可以设置快捷键到Ctrl+1，2，3之类的，按照从上往下的位置按对应着按就行了，替代Ctrl+P Ctrl+LCtrl+K Ctrl+E，这样不用去记忆快捷键。下面的视频也可以给前面标上数字，按对应的数字就播放对应的视频。</p><p><img src="https://meta.appinn.net/uploads/default/original/3X/7/0/703d3c1ec43d12c19dcbe065187813900b6cac2f.jpeg" alt="Typing Learner - 硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」[Windows/macOS]25"></p><p>还有就是内存447MB感觉有点高了，仅次于Chrome。</p><p>太激动了，感觉有点语无伦次，再次感谢<img src="https://meta.appinn.net/images/emoji/apple/pray/2.png?v=12" alt=":pray:t2:">。</p><hr><p>来看看开发者的介绍吧，青小蛙准备先用两天再说：</p><h2 id="Typing-Learner应用简介"><a class="header-anchor" href="#Typing-Learner应用简介">¶</a><a href="https://meta.appinn.net/t/topic/33783#h-5" target="_blank" rel="noopener"></a>Typing Learner应用简介</h2><p>可以用 MKV 视频生成词库（单词本），让每个单词都有具体的语境。然后通过语境记忆单词，句子，字幕。</p><p><img src="https://meta.appinn.net/uploads/default/optimized/3X/9/3/9347232d422f4859d1da3a5de397f7043e9bff2c_2_690x370.png" alt="Demo-Word-Dark"></p><h3 id><a class="header-anchor" href="#">¶</a></h3><p><a href="https://meta.appinn.net/uploads/default/original/3X/7/1/717d9b88167e22eec29871791858fc5487bad6af.png" target="_blank" rel="noopener"></a><a href="https://meta.appinn.net/uploads/default/original/3X/7/1/717d9b88167e22eec29871791858fc5487bad6af.png" target="_blank" rel="noopener"></a>1.记忆单词</p><p>从 MKV 生成的词库（单词本）每个单词都有具体的语境，记忆单词时每个单词都可用重复输入多次，直到觉得记住为止，每个单元 20个词，记完一个单元还有默写测试，检查记忆效果。</p><p>默认使用 Enter 键切换下一个单词，如果要使用自动切换，可以使用 Ctrl + A 开启自动切换。推荐第一次记忆不认识的单词时，使用非自动切换，第二天复习的时候再打开自动切换。</p><h3 id="2-抄写字幕"><a class="header-anchor" href="#2-抄写字幕">¶</a>2. 抄写字幕</h3><p>可以抄写你感兴趣的电影、电视剧、纪录片、TED演讲、歌词。可以抄写多种语言的字幕。</p><h3 id="3-抄写文本"><a class="header-anchor" href="#3-抄写文本">¶</a>3. 抄写文本</h3><p>可以抄写 <a href="https://www.gutenberg.org/" target="_blank" rel="noopener">古腾堡计划</a> 所有 txt格式的电子书，非<a href="https://www.gutenberg.org/" target="_blank" rel="noopener">古腾堡计划</a> 的电子书，抄写前可能需要先格式化，把每行的字母数量限制在 75个以内。</p><p><img src="https://meta.appinn.net/uploads/default/original/3X/3/e/3ec4e34fcaf2f01c27d369b774683f0b0b363b04.png" alt="Typing Learner - 硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」[Windows/macOS]26"></p><h3 id="内置常用词库"><a class="header-anchor" href="#内置常用词库">¶</a>内置常用词库</h3><p>内置了常用词库(单词本)：四级、六级、专四、专八、考研、TOEFL、IELTS、GRE、GMAT、SAT、牛津核心词、北师大版高中英语、人教版英语、商务英语、外研版英语、新概念英语。这些词是没有链接字幕的，后续可用根据自己感兴趣，链接字幕词库。</p><h3 id="从视频中生成词库"><a class="header-anchor" href="#从视频中生成词库">¶</a>从视频中生成词库</h3><p>[可以用MKV 视频生成词库(单词本) ](<a href="https://github.com/tangshimin/typing-" target="_blank" rel="noopener">https://github.com/tangshimin/typing-</a>learner/wiki/%E4%BB%8E-MKV-%E8%A7%86%E9%A2%91%E7%94%9F%E6%88%90%E8%AF%8D%E5%BA%93)，让每个单词都有具体的语境。有了这个功能，今后就可以一边追美剧一边学英语了。</p><p><img src="https://meta.appinn.net/uploads/default/original/3X/2/7/279e34036387e4f855eb0f8a64f40e7c0b3f2f18.png" alt="Typing Learner - 硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」[Windows/macOS]27"></p><p>过滤词库，过滤熟悉的单词。</p><p>歌词转字幕</p><p>合并词库，可以把一整季的电视剧生成的多个字幕词库合并成一个词库。</p><p>学习完一章之后，可以选择进入默写模式，在默写模式整个章节的单词是重新随机排序的，默写完了会出现默写的正确率。</p><p>学习完整个词库之后，还有一个随机排序整个词库的功能。</p><h2 id="获取"><a class="header-anchor" href="#获取">¶</a><a href="https://meta.appinn.net/t/topic/33783#github-6" target="_blank" rel="noopener"></a>获取</h2><ul><li><a href="https://kutt.appinn.net/3wXLui" target="_blank" rel="noopener">GitHub</a></li></ul><p>更多细节参见发现频道：<a href="https://meta.appinn.net/t/topic/33783" target="_blank" rel="noopener">https://meta.appinn.net/t/topic/33783</a></p><p>青小蛙觉得，通过喜欢的剧集字幕来学习英文，一直都是一条捷径，通往内心的捷径，有好工具值得试试。</p><p>原文：<a href="https://www.appinn.com/typing-learner/" target="_blank" rel="noopener">https://www.appinn.com/typing-learner/</a></p><hr><h2 id="相关阅读"><a class="header-anchor" href="#相关阅读">¶</a>相关阅读</h2><ul><li><a href="https://www.appinn.com/typing-io/" title="Permanent Link: Typing.io – 编程语言打字练习 [Web]" target="_blank" rel="noopener">Typing.io - 编程语言打字练习 [Web]</a></li><li><a href="https://www.appinn.com/typing-stats/" title="Permanent Link: Typing Stats – 找出你最强壮的手指[Firefox]" target="_blank" rel="noopener">Typing Stats - 找出你最强壮的手指[Firefox]</a></li><li><a href="https://www.appinn.com/search-engine-switcher/" title="Permanent Link: 搜索引擎切换器 – 快速在 8 款搜索引擎间切换[油猴脚本]" target="_blank" rel="noopener">搜索引擎切换器 - 快速在 8 款搜索引擎间切换[油猴脚本]</a></li></ul><hr><p><a href="http://www.appinn.com/copyright/?utm_source=feeds&amp;utm_medium=copyright&amp;utm_campaign=feeds" title="版权声明" target="_blank" rel="noopener">(C)</a>2021 青小蛙 for<a href="http://www.appinn.com/?utm_source=feeds&amp;utm_medium=appinn&amp;utm_campaign=feeds" title="本文来自小众软件" target="_blank" rel="noopener">小众软件</a> | [加入我们](<a href="http://www.appinn.com/join-" target="_blank" rel="noopener">http://www.appinn.com/join-</a>us/?utm_source=feeds&amp;utm_medium=joinus&amp;utm_campaign=feeds &quot;加入小众软件&quot;) |<a href="https://meta.appinn.net/c/faxian/?utm_source=feeds&amp;utm_medium=contribute&amp;utm_campaign=feeds" title="给小众软件投稿" target="_blank" rel="noopener">投稿</a> | [订阅指南](<a href="http://www.appinn.com/feeds-" target="_blank" rel="noopener">http://www.appinn.com/feeds-</a>subscribe/?utm_source=feeds&amp;utm_medium=feedsubscribe&amp;utm_campaign=feeds&quot;可以分类订阅小众，Windows/MAC/游戏&quot;)<br>3659b075e72a5b7b1b87ea74aa7932ff<br><a href="https://www.appinn.com/typing-learner/#comments" title="to thecomments" target="_blank" rel="noopener">点击这里留言、和原作者一起评论</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://www.appinn.com/typing-learner/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Typing Learner – 硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」[Windows/macOS]&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」语雀，即将开源！</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-14-102828713392/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-14-102828713392/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://zhuanlan.zhihu.com/p/540713275" target="_blank" rel="noopener">语雀，即将开源！</a></p><a id="more"></a><p>选择一款合适、称手的云笔记应用，可谓是每个程序员必须面临的一大难题之一。</p><p>依我个人需求而言，云笔记应用最广泛的应用，就是撰写技术文档、编程笔记，以及梳理项目架构、团队工作流程。</p><p>从上述几点需求来看，这款笔记需要满足于集笔记撰写、文档管理、团队协作于一体，且对中文用户支持度友好。</p><p>我目前在用的，是一款叫「 <strong>语雀</strong> 」的文档与知识库工具，由支付宝研发出品。</p><p>2018 年的时候，我便早早接触到了这款工具，当时使用需求比较简单，就是在上面记录一些琐碎的编程笔记，如开发环境配置、Bug 问题总结、工具使用指南等等。</p><p>直到 2019 年，我在上面看到有人频频发布了不少优质编程资料（如《前端九部》），才意识到，这东西原来还能这么玩。</p><p>前阵子在水友群里看到有人在说，语雀接下来要开源了，才突然想起有这么一款优质工具还没跟大家分享过。</p><p>今天就来看看，这款号称最懂程序员的云笔记，到底有多好用。</p><p><img src="https://pic2.zhimg.com/v2-9d6fff6bdaf3e5e7cb22881349989149_b.jpg" alt></p><h3 id="功能特性"><a class="header-anchor" href="#功能特性">¶</a><strong>功能特性</strong></h3><h3 id="1-特色卡片"><a class="header-anchor" href="#1-特色卡片">¶</a><strong>1. 特色卡片</strong></h3><p>对于平时操作电脑习惯用快捷键的我来说，「特色卡片」可以说是我使用频率最高的产品功能之一。</p><p>当你打开编辑器，敲下斜杆 <code>/</code>时，它便会展示各种可供插入的编辑器特性。</p><p>就像这样：</p><p><img src="https://pic2.zhimg.com/v2-9568ee56f92fd76d18d463a026a3c3b9_b.gif" alt></p><p>斜杆 <code>/</code>快捷键支持快速插入视频、图片、附件、代码块、思维导图、Emoji 表情等诸多内容，还可以添加日历、投票、打卡等各种互动程序。</p><p><img src="https://pic2.zhimg.com/v2-016dae9ed93025690a81f7c6bfedcf69_b.jpg" alt></p><p><strong>2. 数据表</strong></p><p>在当今这个数据大爆发时代，我们对数据的处理与操作也更加频繁，Excel 那干巴巴的数据列表，已经很难满足我的日常使用需求。</p><p>而在语雀中，有一项不同于 Excel 的数据表功能，就是能直接将同一份数据，按照不同的视图进行切换展示。</p><p><img src="https://pic4.zhimg.com/v2-fe68f93a15b8229ca59eb61c188997b7_b.gif" alt></p><p>在将数据录入完成之后，即可一键切换至相册、表格、看板等视图，效果颇为惊艳。</p><p><strong>3. 在线绘图</strong></p><p>平时撰写各种技术文档或编程笔记时，流程图、思维导图、架构图，基本上是无往不利的几大神器。</p><p>正所谓「一图胜千言」，将不易于理解的流程与技术，通过直观的图片进行表达，才能减少他人的沟通与学习成本。</p><p>可能是知道这项需求对于程序员的重要性，因此语雀团队在提供基础的绘图功能外，还额外加入了一个模板生成功能。</p><p>你可以基于官方提供的或自行创建的模板，来快速生成指定图形。</p><p><img src="https://pic3.zhimg.com/v2-df9c620071f3d445d12bd823ddaef6da_b.gif" alt></p><p>这种方式省时又省力，也很符合程序员「Don't repeat yourself」的编程理念。</p><p>如果你用语法来完成图形绘制，那也没问题。</p><p>还记得咱们前面提到的快捷键<code>/</code>吗？敲下它，然后选择对应的模板，或手写语法内容，即可在线完成绘制。</p><p><img src="https://pic3.zhimg.com/v2-35d59a911ad706313499ce5ed1999b6e_b.gif" alt></p><p><strong>4. 个人知识库</strong></p><p>在技术圈内，偶尔会看到不少程序员使用 GitBook 来撰写技术教程，但是对国内用户来说，Gitbook 的访问速度，以及产品友好度都有很大提升空间。</p><p>语雀的文档管理功能，是我见过为数不多，能够超越 Gitbook 的国产笔记应用。</p><p>基于它所提供的功能，便可轻而易举的打造出一个属于自己的编程知识库。</p><p>当你在线浏览某个技术知识库时，那种感觉，宛如在看一本精心写就的编程书籍。</p><p><img src="https://pic1.zhimg.com/v2-94a7bf9f4a5076267097f370fa70b604_b.jpg" alt></p><p><strong>5. 数据安全</strong></p><p>最近几年，有不少互联网公司都被爆出存在数据泄露的问题，究其根本原因，还是平台的网络安全防控工作没做好。</p><p>因此，现在我在挑选一款合适的互联网产品时，除了将用户体验，交互设计考量在内之余，还会着重了解它的安全性。</p><p>在这一点上，语雀就做的蛮好，多地备份、双重加密、ISO 安全认证体系，该有的东西，基本上都有了。</p><p>毕竟在其背后提供安全技术支持的，可是支付宝的团队，这块要没整好，那不得啪啪打脸？</p><p><img src="https://pic3.zhimg.com/v2-f9a480b8ed2058ae319baf49e3c08556_b.jpg" alt></p><h3 id="总结"><a class="header-anchor" href="#总结">¶</a><strong>总结</strong></h3><p>除了上述功能之外，对于程序员来说，语雀还支持 LaTeX 数学公式、代码块高亮、Markdown 编辑、PDF 在线上传与预览等多种功能。</p><p>综合体验下来，基本上，这可以说是一款专为程序员而生的云笔记应用了。从各个方面看，也十分贴近我的使用需求。</p><p>再过一阵子，语雀项目的各个组件，以及相关代码，应该就会陆续在 GitHub开源，感兴趣的同学可以留意下。未来项目正式开源，我们也会在第一时间到公众号通知大家。</p><p>文中所提到的所有开源项目与工具，已收录至 GitHubDaily 的开源项目列表中。</p><p>该列表包含了 GitHub 上诸多高质量、有趣实用的开源技术教程、开发者工具、编程网站等内容。</p><p>从 2015 年至今，累积分享 3500+ 个开源项目，有需要的，可访问下方 GitHub 地址自取：</p><p>GitHub： <em><a href="https://link.zhihu.com/?target=https%3A//github.com/GitHubDaily/GitHubDaily" target="_blank" rel="noopener">https://github.com/GitHubDaily/GitHubDaily</a></em></p><p><img src="https://pic3.zhimg.com/v2-99a7200d98bb42b7bbc4d7990e1972f2_b.jpg" alt></p><p>好了，今天的分享到此结束，感谢大家抽空阅读，我们下期再见。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://zhuanlan.zhihu.com/p/540713275&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;语雀，即将开源！&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「月度汇报」ttrss</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/202207/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/202207/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>total: 13</p><a id="more"></a><h2 id="BGmi-–-自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人"><a class="header-anchor" href="#BGmi-–-自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人">¶</a><a href="https://www.appinn.com/bgmi/" target="_blank" rel="noopener">BGmi – 自动追番的工具：同步最新番剧数据、追番日历、自动下载，适合所有追番懒人</a></h2><p>pubdata:2022-06-30 02:48:00markdate:2022-07-01 06:32:58.020141</p><h2 id="老牌截图工具-PicPick-更新，新增录屏功能，支持-MP4-GIF-格式"><a class="header-anchor" href="#老牌截图工具-PicPick-更新，新增录屏功能，支持-MP4-GIF-格式">¶</a><a href="https://www.appinn.com/picpick-6-2/" target="_blank" rel="noopener">老牌截图工具 PicPick 更新，新增录屏功能，支持 MP4/GIF 格式</a></h2><p>pubdata:2022-06-29 07:19:19markdate:2022-07-02 04:11:20.453414</p><h2 id="白板与笔记融合：我的四个氢图使用场景"><a class="header-anchor" href="#白板与笔记融合：我的四个氢图使用场景">¶</a><a href="https://sspai.com/post/73246" target="_blank" rel="noopener">白板与笔记融合：我的四个氢图使用场景</a></h2><p>pubdata:2022-06-30 03:30:02markdate:2022-07-03 01:08:35.583781</p><h2 id="跨时空圆桌：伟大创作者们如何安排日常生活"><a class="header-anchor" href="#跨时空圆桌：伟大创作者们如何安排日常生活">¶</a><a href="https://sspai.com/post/73779" target="_blank" rel="noopener">跨时空圆桌：伟大创作者们如何安排日常生活</a></h2><p>pubdata:2022-06-15 09:30:00markdate:2022-07-03 01:50:35.971655</p><h2 id="Typing-Learner-–-硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」-Windows-macOS"><a class="header-anchor" href="#Typing-Learner-–-硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」-Windows-macOS">¶</a><a href="https://www.appinn.com/typing-learner/" target="_blank" rel="noopener">Typing Learner – 硬核单词记忆：从电影台词筛选生词，边追美剧边学英语，用户直喊「好家伙！」[Windows/macOS]</a></h2><p>pubdata:2022-07-03 04:07:39markdate:2022-07-04 05:06:58.902152</p><h2 id="创建自己的第一个-Power-Automate-工作流，从此繁琐操作是路人"><a class="header-anchor" href="#创建自己的第一个-Power-Automate-工作流，从此繁琐操作是路人">¶</a><a href="https://sspai.com/post/73710" target="_blank" rel="noopener">创建自己的第一个 Power Automate 工作流，从此繁琐操作是路人</a></h2><p>pubdata:2022-07-05 10:44:47markdate:2022-07-06 11:29:55.648077</p><h2 id="为-WSL-配置这些新功能，不用虚拟机也能体验完整-Linux"><a class="header-anchor" href="#为-WSL-配置这些新功能，不用虚拟机也能体验完整-Linux">¶</a><a href="https://sspai.com/post/74167" target="_blank" rel="noopener">为 WSL 配置这些新功能，不用虚拟机也能体验完整 Linux</a></h2><p>pubdata:2022-07-08 03:30:00markdate:2022-07-09 03:08:43.747852</p><h2 id="当飞盘成为人类的玩具，我们该如何参与这场游戏"><a class="header-anchor" href="#当飞盘成为人类的玩具，我们该如何参与这场游戏">¶</a><a href="https://sspai.com/post/73505" target="_blank" rel="noopener">当飞盘成为人类的玩具，我们该如何参与这场游戏</a></h2><p>pubdata:2022-06-06 08:00:00markdate:2022-07-10 01:36:40.114938</p><h2 id="走进小众但不冷门的房车世界"><a class="header-anchor" href="#走进小众但不冷门的房车世界">¶</a><a href="https://sspai.com/post/74043" target="_blank" rel="noopener">走进小众但不冷门的房车世界</a></h2><p>pubdata:2022-07-01 08:04:43markdate:2022-07-10 02:09:34.733003</p><h2 id="从盲目崇拜到理性使用，谈谈我眼中的「双向链接」"><a class="header-anchor" href="#从盲目崇拜到理性使用，谈谈我眼中的「双向链接」">¶</a><a href="https://sspai.com/post/73407" target="_blank" rel="noopener">从盲目崇拜到理性使用，谈谈我眼中的「双向链接」</a></h2><p>pubdata:2022-05-27 06:31:27markdate:2022-07-11 14:31:37.724795</p><h2 id="打开终端总有好心情：我的美化方案及配置分享"><a class="header-anchor" href="#打开终端总有好心情：我的美化方案及配置分享">¶</a><a href="https://sspai.com/post/74216" target="_blank" rel="noopener">打开终端总有好心情：我的美化方案及配置分享</a></h2><p>pubdata:2022-07-11 08:00:51markdate:2022-07-12 04:52:00.122103</p><h2 id="咖啡美酒冷泡茶，这些消暑饮品在家就能动手做"><a class="header-anchor" href="#咖啡美酒冷泡茶，这些消暑饮品在家就能动手做">¶</a><a href="https://sspai.com/post/74196" target="_blank" rel="noopener">咖啡美酒冷泡茶，这些消暑饮品在家就能动手做</a></h2><p>pubdata:2022-07-10 07:17:11markdate:2022-07-12 05:03:55.504330</p><h2 id="语雀，即将开源！"><a class="header-anchor" href="#语雀，即将开源！">¶</a><a href="https://zhuanlan.zhihu.com/p/540713275" target="_blank" rel="noopener">语雀，即将开源！</a></h2><p>pubdata:2022-07-12 08:19:47markdate:2022-07-14 10:28:28.713392</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;total: 13&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」咖啡美酒冷泡茶，这些消暑饮品在家就能动手做</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-12-050355504330/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-12-050355504330/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://sspai.com/post/74196" target="_blank" rel="noopener">咖啡美酒冷泡茶，这些消暑饮品在家就能动手做</a></p><a id="more"></a><p>转眼又是气温冲刺 40度的夏天，粘腻的日子里想要来点清爽，空调、西瓜、冷饮是少不了的。说起冷饮，除了自己头顶烈日出门去买或者让别人头顶烈日送过来，适当屯点原料、然后自己在家制作也是一件能够同时收获成就感与满足感的美事。</p><p>如果你想动手试试，本文整理了此前少数派网站上发布过的、适合夏日的自制饮品制作方法，希望能为你提供一些参考。</p><h2 id="夏天更应喝一杯"><a class="header-anchor" href="#夏天更应喝一杯">¶</a>夏天更应喝一杯</h2><p>夏天到了更应该喝一杯了----爱喝咖啡的同事如是说。</p><p>作为大家生活中最常见的饮品之一，咖啡既可以冰饮也可以热饮，玩法和口味多样，对于咖啡爱好者来说自然也是最适合消暑的饮品。除了使用滤杯、挂耳和法压壶制作经典的咖啡热饮，你也可以试试自己在家制作冷萃。</p><p>只需要购买散装的冷泡袋，将咖啡粉装入袋中，再把咖啡袋丢进杯子之类的容器里并加入冷水，放进冰箱 6 到 8小时便可饮用（亦可更久）。冷萃咖啡虽然没有热咖啡那样的扑鼻香气，但咖啡经过漫长的萃取过程缓缓释放，喝起来爽口又芬芳。</p><p>冰滴咖啡则是冰咖啡的另一种玩法，这种咖啡的滴滤和萃取借助冰水完成。由于萃取过程全程低温，所以冷萃和冰滴能去除咖啡中的酸、苦、涩等元素，呈现相对柔和、中性的口感。此外冰滴与冷萃在风味和口感上又有着微妙的区别，试过冷萃觉得不适合自己的不妨一试。</p><p>想要在家制作冰滴咖啡，你可以购买家用的冰滴器具，价格通常在 200~500元之间。如果你已经有了全套手冲器具，也可以完全按照手冲流程，只是将「注入热水」一步换为「将大量冰块放在咖啡粉上，等待其自然融化」，也能得到一杯好咖啡。</p><p>![boxcnXckTHZyqx6AN2JvkkkFDZe](<a href="https://cdn.sspai.com/editor/u_/cb57mt5b34tbthquqjag?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb57mt5b34tbthquqjag?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片出处：<a href="http://lawrencehou.blogspot.com/2016/05/iwaki.html" target="_blank" rel="noopener">http://lawrencehou.blogspot.com/2016/05/iwaki.html</a></p><p>和冷萃咖啡一样，制作冰滴咖啡的中间过程只需等待，无需人工干预。不过相较而言，制作冰滴多了个预备冰块的步骤，需要提前准备。</p><p>当然了，既然是自行发挥，你也可以将咖啡和其它产品混合起来，制作出一些风味独特的饮品。比如很多人都推荐过的「凤梨咖啡」就只需要挤出凤梨汁加入冲好的咖啡中便可饮用，凤梨独有的香甜混合咖啡的清香，过程简单但口感非常不错；冰咖柠檬汽水作为「果汁加咖啡」的变体则非常适合汽水党，只需要预先做好一份冷萃咖啡再准备一罐冰镇雪碧，在杯中填满大量冰块后将咖啡和雪碧倒入杯中混合即可饮用。</p><p>![boxcnhUHrxoDAzxkprY5PyCisXb](<a href="https://cdn.sspai.com/editor/u_/cb57mtdb34tbt4lb7hv0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb57mtdb34tbt4lb7hv0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>如果你想让饮品在视觉上层次分明，还可以依循「冰块----雪碧----咖啡」的顺序依次倒入杯内。冰咖柠檬汽水口感兼具咖啡的清醇和汽水的爽利，手边有器具和原料的朋友不妨动手试试。对了，去年备受好评的爆款「懒人冰格」咱还在卖，要不要再考虑一下？</p><p>![boxcn1KEcDcIWJXZF65HjRubeth](<a href="https://cdn.sspai.com/editor/u_/cb57mttb34tbthquqjb0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb57mttb34tbthquqjb0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)用过表示超好用的</p><p><strong>关 联阅读：</strong></p><ul><li><a href="https://sspai.com/post/55043" target="_blank" rel="noopener">炎炎夏日喝什么？夏日咖啡制作指南</a></li><li><a href="https://sspai.com/post/67455" target="_blank" rel="noopener">TA 有好物 | 夏天到来快乐吃冰，来试试一拉就出的「懒人冰格」</a></li></ul><h2 id="给自己来一杯-mojito"><a class="header-anchor" href="#给自己来一杯-mojito">¶</a>给自己来一杯 mojito</h2><p><em>* 未成年人请勿饮酒（成年人也请注意节制）。</em></p><p>一罐苏打水、一罐雪碧、一个青柠檬和少量可食用的新鲜薄荷叶，制作一杯无酒精莫吉托的原料就准备齐全了。</p><p>接下来我们将少量薄荷叶掰碎放入杯中，青柠檬切两半，一半挤青柠檬汁加入杯中并加入少量冰块，然后把苏打水和雪碧倒入杯中混合一下，并将另一半青柠檬切怀抱厚片、剩下的切成小块加入杯中……最后将厚片插在杯壁上，顶部撒两片薄荷叶即可饮用。</p><p>![boxcnv3CIjQCSbhwDpAWISEyYpf](<a href="https://cdn.sspai.com/editor/u_/cb57mulb34tbt4lb7hvg?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb57mulb34tbt4lb7hvg?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>作为一款非常经典的调制鸡尾酒，口感酸甜清爽的莫吉托是夏天酒吧里的热门选择。它的传统做法需要苏打水、朗姆酒、糖、青柠檬和薄荷叶，所以上面介绍这种无酒精莫吉托是推荐给不怎么爱喝酒的朋友的。</p><p>至于喜欢酒饮的朋友，如果你不喜欢啤酒的苦味，可以先试试「可尔必思啤酒」。顾名思义这种饮品制作需要两种原料：在日本家喻户晓的乳酸菌饮料可尔必思以及任意一种你喜欢的啤酒（当然一般不太建议选择修道院啤酒或者口味比较丰富的IPA）。</p><p>可尔必思啤酒的制作方式也很简单，把一部分可尔必思放在下面作为基底，然后倒入啤酒大概到 7成满，等待啤酒泡沫稍微消散一些，在上面再倒入适量的可尔必思就可以了。喝的时候则建议大口喝，同时喝到啤酒和可尔必思，这样既能感受到啤酒花的香味，同时可尔必思的酸甜又会盖住苦味，真是再完美不过了。</p><p>![boxcnqB9VYXXcaof5GY9u92O41t](<a href="https://cdn.sspai.com/editor/u_/cb57mv5b34tbthquqjbg?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb57mv5b34tbthquqjbg?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>与之类似的，你也可以试试早前风靡过日本的「漂浮梅酒」，它的原理和可尔必思啤酒类似，梅酒里含有多种的矿物质，很适合夏天流汗后饮用。同时梅酒酸甜的口味又有解腻的功效，正好可以用来中和香草冰激凌中的甜感。</p><p>![boxcnT28xYHKfCDAi9QXVAj3l3e](<a href="https://cdn.sspai.com/editor/u_/cb57mvlb34tbthquqjc0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb57mvlb34tbthquqjc0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>因此制作流程也同样简单，梅酒 +香草冰激凌，把冰激凌球放入杯中，加入适量梅酒即可。值得注意的是越简单的搭配可能性也越多，选择梅酒和冰激凌的时候可以多多尝试。</p><p>最后，在下面这篇文章末尾还有一份流程略为复杂但成品非常诱人的桑格利亚汽酒制作方法，这里就当作彩蛋留给大家自己去尝试啦。</p><p><strong>关 联阅读：</strong><a href="https://sspai.com/post/56224" target="_blank" rel="noopener">6 款在家就能做的好喝饮品，伴你度过这个「史上最热」夏天</a></p><h2 id="茶叶的另一种打开方式"><a class="header-anchor" href="#茶叶的另一种打开方式">¶</a>茶叶的另一种打开方式</h2><p>如果你觉得奶茶不够健康、咖啡和鸡尾酒做起来比较麻烦，冷泡茶同样也是一个值得在家尝试的好选择。对本就喜欢喝茶的朋友来说，冷泡茶还能让我们以一种同样清甜、凉爽的方式享用喜欢的茶叶。</p><p>相比其它饮品，冷泡茶制作起来也相对轻松，一般而言，只需要把 10~15 克茶叶用 1000 毫升常温水泡好，放入冰箱冷藏 3~4 个小时即可。</p><p><img src="https://cdn.sspai.com/2022/07/10/5e98cca38a614d1c87c1815de441bf7e.PNG" alt></p><p>因此对冷泡茶自制来说，茶叶的选择更能影响最终成品的实际口感。虽然冰红茶可能是大多数人听过最熟悉的冷泡茶，但其实像绿茶、乌龙茶、白茶这些发酵程度更低的茶可能口感更佳。比如带果味的绿茶就很适合做冷泡，这类茶叶在低温下浸出的茶多酚较少，成品涩味更少，口感上会比热水冲泡更柔和，但同时又能凸显出果物的香味和质地，让茶饮更有层次感。</p><p>![boxcnyTSKTqDpBLYrPfSIXRlXHf](<a href="https://cdn.sspai.com/editor/u_/cb57n25b34tbthquqjcg?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb57n25b34tbthquqjcg?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>少数派的作者们也推荐过不少适合用来做冷泡茶的茶叶和饮品，比如 LUPICIA 的极品白桃乌龙和果味茶、UMTEA优美茶的「控糖套装」、卡卡厨房的苦瓜乌龙茶和槐米铁观音甚至伊藤园的大麦茶……如果你选择的红茶，不妨考虑先热水洗一下再冷泡，否则冷泡后会有一点点淡淡的涩味。</p><p>![boxcnOncQQq8HiQVn52yVIElTWd](<a href="https://cdn.sspai.com/editor/u_/cb57n2db34tbthquqjd0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb57n2db34tbthquqjd0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>另外，上述冷泡茶其实也可以搭配梅子露、柠檬、薄荷、牛奶等不同配料制作出层次和口感都更加丰富的各类冷泡茶饮料，至于具体的操作方法和冷泡壶选择，大家可以参考下面这篇文章。</p><p><strong>关 联阅读：</strong><a href="https://sspai.com/post/62308" target="_blank" rel="noopener">比奶茶和快乐水更清凉低卡，用这杯冷泡茶留住你的夏天</a></p><p>阳光渐渐变得炽热，天空中的云彩也渐渐稀少，升高的气温是否又让你回想起了往年的晴空万里？除了空调和电扇，少不了的当然是夏季特饮啦！在你的记忆中（或者现在手中）会有哪些夏季特饮？</p><p>如果你还有其它分享，欢迎在评论区留言或前往<a href="https://sspai.com/bullet/1622443898" target="_blank" rel="noopener">一派</a>参与讨论。</p><blockquote><p>下载少数派 <a href="https://sspai.com/page/client" target="_blank" rel="noopener">客户端</a>、关注<a href="https://sspai.com/s/J71e" target="_blank" rel="noopener">少数派公众号</a>，感受精彩数字生活 🍃</p></blockquote><blockquote><p>想申请成为少数派作者？<a href="https://sspai.com/apply/writing" target="_blank" rel="noopener">冲</a>！ 🚀</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://sspai.com/post/74196&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;咖啡美酒冷泡茶，这些消暑饮品在家就能动手做&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」白板与笔记融合：我的四个氢图使用场景</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-03-010835583781/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-03-010835583781/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://sspai.com/post/73246" target="_blank" rel="noopener">白板与笔记融合：我的四个氢图使用场景</a></p><a id="more"></a><p><strong>Matrix 首页推荐</strong></p><p><a href="https://sspai.com/matrix" target="_blank" rel="noopener">Matrix</a>是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。<br>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2><p>在两个月前，我推送了《<a href="https://sspai.com/post/71842" target="_blank" rel="noopener">Heptabase：面向未来的知识操作系统</a>》一文，Heptabase以其强大的视觉交互效果吸引了很多用户的关注。然而，Heptabase 对于很多读者而言，价格太贵。</p><p>对此，还有没有类似的 <strong>白 板和笔记融合</strong>的产品？有的，同类产品国外还有[Muse](<a href="https://museapp.com/memos/2021-11-road-to-" target="_blank" rel="noopener">https://museapp.com/memos/2021-11-road-to-</a>muse-2/)、<a href="https://www.scrintal.com/" target="_blank" rel="noopener">Scrintal</a>.同样存在价格太贵以及付费比较麻烦等问题。今天推荐一款国产白板笔记软件----<a href="https://qingtu.co/" target="_blank" rel="noopener">氢图</a>.</p><h2 id="什么是氢图？"><a class="header-anchor" href="#什么是氢图？">¶</a>什么是氢图？</h2><p>什么是<a href="https://qingtu.co/" target="_blank" rel="noopener">氢图</a>？从产品形态上来说，这是一款以白板为基础，融合笔记功能的知识管理工具。通过强大的 <strong>可视化</strong>功能，你可以在其中完成从资料收集、构思、组织笔记、创意写作等工作流。</p><p>具体而言，氢图以白板作为底层，提供了一个全新的可视化操作空间。如图。</p><p><img src="https://cdn.sspai.com/2022/05/16/f87e9602464ca3528582fc4b647889e6.png" alt></p><ul><li><strong>画 板</strong>。氢图是由一个个画板组成。每个画板都是一个 <strong>无 限延伸</strong>的、独立的 <strong>工 作空间</strong>。画板由笔记、形状、文本、连线、文件等模块组成。</li><li><strong>笔 记</strong>。点击即可创建类似便签的 <strong>卡 片笔记</strong>，支持常见的笔记编辑功能。当然，卡片 <strong>颜 色</strong>、 <strong>尺 寸</strong>可以根据需要进行调整。</li><li><strong>形 状</strong>。本质上，这是一种带有特定形状的文本框。形状主要用于作为多个笔记的背景框，以表示这些笔记属于某个 <strong>主 题</strong>，或者 <strong>凸 显</strong>白板的 <strong>某 个区域</strong>。此外，这个形状也可用于 <strong>制 作流程图</strong>等场景。</li><li><strong>文 本</strong>。区别于 <strong>笔 记</strong>和 <strong>形 状</strong>， <strong>文 本</strong>模块允许用户创建一个不包含任何卡片背景的文本框。</li><li><strong>连 线</strong>。在氢图中的不同模块之间，添加各种带有特定方向的 <strong>有 向箭头</strong>。</li><li><strong>文 件</strong>。支持将 Word、PDF、图片等各种文件添加到当前画板之中。</li></ul><p>为了更好地展示氢图的功能，下面我将从 <strong>时 间管理和任务管理、思维辅助、笔记记录、创意写作</strong>等维度展示氢图的使用场景。</p><h2 id="时间管理和任务管理"><a class="header-anchor" href="#时间管理和任务管理">¶</a>时间管理和任务管理</h2><h3 id="GTD"><a class="header-anchor" href="#GTD">¶</a>GTD</h3><p><a href="https://gettingthingsdone.com/" target="_blank" rel="noopener">GTD</a> 即 Getting Things Done的英文缩写，中文相关著作翻译为《搞定》。GTD是一种时间管理方法，其核心理念是要求使用者将需要做的事情写下来，而不是花费精力记住这些任务，进而减轻了你的大脑压力，促使人们集中精力处理手头的任务。与此同时，GTD提出了从收集 Capture -&gt;理清 Clarify -&gt;组织 Organize -&gt;回顾 Reflect -&gt;执行 Engage 的任务处理流程。</p><p>![Getting Things Done: Your Step-By-StepGuide](<a href="https://cdn.sspai.com/2022/05/16/article/a72d9fa746f79b5590006550d20c878a?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/16/article/a72d9fa746f79b5590006550d20c878a?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>GTD 提供了清晰、可靠的任务组织系统。为了提高对于任务的组织能力，GTD 一般和看板工具进行结合。如图，我使用氢图模拟了基于看板视图的 GTD.当然，你也可以将番茄钟工作法、四象限矩阵等方法融合至 GTD 之中。</p><p><img src="https://cdn.sspai.com/2022/05/16/e9655b071500184b7ecfeee9e12a6bc5.png" alt></p><h3 id="艾森豪威尔矩阵"><a class="header-anchor" href="#艾森豪威尔矩阵">¶</a>艾森豪威尔矩阵</h3><p>艾森豪威尔矩阵，即常见的 <strong>四 象限法则</strong>。四象限法则使用 <strong>重 要</strong>和 <strong>紧急</strong>两个维度，将时间区分为四个象限。具体如图。四象限法的形式不重要，重要的是为任务分配优先级的的思维方式，尽量将精力集中于自己的主要目标以及紧急事项，避免自己时间和精力的无端消耗。</p><p><img src="https://cdn.sspai.com/2022/05/16/48f021cd4e83730b3b195ae46f2e1718.png" alt></p><h3 id="莫斯科（MoSCoW）方法"><a class="header-anchor" href="#莫斯科（MoSCoW）方法">¶</a>莫斯科（MoSCoW）方法</h3><p>关于莫斯科（MoSCoW）这种生产力方法的讨论比较少。同艾森豪威尔矩阵一样，这也是一种优先级排序的方法。MoSCoW 是 必须做/must-have,应该做/should-have, 可以做/could-have 以及不去做/ will not have 的英文缩写。具体如图：</p><p><img src="https://cdn.sspai.com/2022/05/16/44203a851158cbb6dab1b603adb9488f.png" alt></p><p>MoSCoW 常用于团队的需求管理等场景。</p><p>以上内容主要介绍了每日的时间管理和任务管理。当然，你也可以利用画板特性，将这些笔记卡片进行堆栈和拼接，形成周计划、月计划、年计划等模版。</p><p><img src="https://cdn.sspai.com/2022/05/16/6ada3110b46b0d61c4a1239e1708d76b.png" alt></p><h2 id="思维辅助"><a class="header-anchor" href="#思维辅助">¶</a>思维辅助</h2><p>氢图具有强大的可视化能力，赋予了其强大的思维辅助能力。你可以使用氢图进行头脑风暴等激发灵感和强化思维的各种思维辅助图。具体示范如图：</p><h3 id="思维导图"><a class="header-anchor" href="#思维导图">¶</a>思维导图</h3><p>关于莎士比亚创作内容的思维导图。</p><p><img src="https://cdn.sspai.com/2022/05/16/692b55d8726c9a035ccb03fbf697c43f.png" alt></p><h3 id="概念图"><a class="header-anchor" href="#概念图">¶</a>概念图</h3><p><img src="https://cdn.sspai.com/2022/05/16/8e582139ea7191697ef4e6578266a936.png" alt></p><h3 id="流程图"><a class="header-anchor" href="#流程图">¶</a>流程图</h3><p><img src="https://cdn.sspai.com/2022/05/16/3776a865acd2eff7f5bb7cd0bfb3b0c7.png" alt></p><h3 id="时间轴"><a class="header-anchor" href="#时间轴">¶</a>时间轴</h3><p>时间轴在梳理某个人的主要经历或者某个事件等场景较为常见。比如，小说中的大事年表。</p><p><img src="https://cdn.sspai.com/2022/05/16/0116569e2b1754430ebfa386908cb50a.png" alt></p><h3 id="矩阵分析"><a class="header-anchor" href="#矩阵分析">¶</a>矩阵分析</h3><p>使用氢图,你可以利用现有的一些分析方法作为指导，建立相应的分析工具。其中，矩阵便是一种十分有用的分析工具。事实上，前面时间管理中的四象限矩阵便是矩阵分析的典型代表。此外，还有不少基于矩阵的分析工具。比如，SWOT分析、价值 &amp; 投入分析。</p><p><img src="https://cdn.sspai.com/2022/05/16/6137bd326365b035ba4bf8045057d591.png" alt></p><h3 id="SWOT-分析图"><a class="header-anchor" href="#SWOT-分析图">¶</a>SWOT 分析图</h3><p>SWOT 分析，也被称为优劣分析法。SWOT 是英文 Strengths/优势、Weaknesses/劣势、Opportunities/机会、Threats/威胁四个单词的缩写。换而言之，SWOT分析是指从自身的优势、劣势，以及外部竞争的机会和威胁等四个维度，分析竞争态势的方法。SWOT 分析可以用于个人或者群体决策。</p><p>如图，我使用氢图建立了 SWOT 分析图。比如，你可以对某个产品进行分析。</p><p><img src="https://cdn.sspai.com/2022/05/16/e18b6a5bc8bfb7a8dd92e64e1b7f9210.png" alt></p><ul><li><strong>优 势</strong>：某个产品的竞争优势是什么？资源多、成本低……</li><li><strong>劣 势</strong>：某个产品的竞争劣势是什么？功能存在短板……</li><li><strong>威 胁</strong>：近一年来，增加了不少竞争对手。他们在某个领域比我们更为专注。此外，国家的政策监管日益严格。</li><li><strong>机 会</strong>：我们可以扩展核心业务，通过强大的产品生态体系吸引用户。</li></ul><h3 id="价值-投入分析图"><a class="header-anchor" href="#价值-投入分析图">¶</a>价值 &amp; 投入分析图</h3><p>如图，我使用氢图建立了按照价值和投入强度生成的矩阵。无论日常生活还是工作，理性的选择自然要避免高投入且低价值回报的事情，而将主要精力投入可以带来高价值回报的领域。</p><p><img src="https://cdn.sspai.com/2022/05/16/aab5aaef77e679053e917e852b04a15e.png" alt></p><h3 id="灵感收集：情绪板"><a class="header-anchor" href="#灵感收集：情绪板">¶</a>灵感收集：情绪板</h3><p>灵感收集方法很多，最简单也可能是比较有效的方法，便是拿一张便签本或者电子便签快速收集你的灵感。</p><p>以氢图为例，你可以将其在电脑桌面端常驻打开。如果有了新的灵感，便在白板上快速使用快捷键新建一个笔记卡片，快速记录所思所想。</p><p>除此之外，今天介绍一种另类的灵感收集方法----情绪板。</p><p>Mood Board,即情绪面板，或者情绪板。当你开始新的创意项目的时候，经常会发现唤醒特定的情绪比较有帮助。而使用文字表达情绪可能比较困难。此时，便需要借助情绪板。</p><p>情绪板，是指由于图像、文本、调色板等元素组成的视觉拼接展示。情绪板有一些特定的操作步骤，比如，确定目标、选择方向、关键字/衍生词提取、添加视觉元素/内容描述等。传统上，情绪板被设计师等群体使用。比如，适用于时尚、包装、海报、Logo、婚礼等设计场景。很多设计团队在准备设计产品时，便会从情绪板开始，团队之间基于情绪板分享想法，讨论和确定产品的视觉风格。</p><p>在线数字白板是适合创建情绪板的绝佳载体。</p><p>![Why You Need an Inspiration Board | Tips forBrides](<a href="https://cdn.sspai.com/2022/05/16/article/fcdebba65814410a23f734521db100a8?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/16/article/fcdebba65814410a23f734521db100a8?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>婚礼设计情绪板 Wedding MoodBoard</p><p>如今，情绪板已经成为收集灵感、激发创造性思维、勾勒想法的重要工具。情绪板的设计已经不再仅仅局限于设计师，一些内容创作者也会使用情绪板帮助他们唤起某些内容创作所需要的情绪。比如，小说家制作事件情绪板或者小说情绪板。</p><p>![](<a href="https://cdn.sspai.com/2022/05/16/article/bb03c1f47b8559d61ef586c800bea0a4?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/16/article/bb03c1f47b8559d61ef586c800bea0a4?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)创意作家的情绪板：关于白雪公主故事的情绪板</p><p>图源：&lt;<a href="https://thelitnerds.com/2019/10/06/how-to-spark-your-writing-with-mood-" target="_blank" rel="noopener">https://thelitnerds.com/2019/10/06/how-to-spark-your-writing-with-mood-</a>boards/&gt;</p><p>基于上述理念，我使用氢图制作了围绕动漫主题的情绪板。</p><p><img src="https://cdn.sspai.com/2022/05/16/d20ca89e6444d118c334ce10b17b5a0a.png" alt></p><h2 id="笔记记录"><a class="header-anchor" href="#笔记记录">¶</a>笔记记录</h2><h3 id="康奈尔笔记法"><a class="header-anchor" href="#康奈尔笔记法">¶</a>康奈尔笔记法</h3><p>康奈尔笔记法，要求使用者遵循记录（Record）、笔记（Reduce）、总结（Recite）、反思（Reflect）、复习（Review）等环节。因此，康奈尔笔记法也被称为5R法。如图，基于康奈尔笔记法的理念，使用氢图建立了对应的笔记模版。当然，这只是一种对于纸质笔记本的模拟。在具体做笔记的时候，不必要拘泥于具体的形式。你可以在你的当前笔记周围，快速添加主题为线索、总结、反思等卡片，并且根据需要调整对应的位置。</p><p><img src="https://cdn.sspai.com/2022/05/16/02b59a209482d405375b708f43251659.png" alt></p><h3 id="麦肯锡笔记法"><a class="header-anchor" href="#麦肯锡笔记法">¶</a>麦肯锡笔记法</h3><p>麦肯锡笔记法建立了【空 - 雨 - 伞】的结构框架。原意是需要根据天气情况，判断是否下雨。如果下雨，那么便需要准备雨伞等工具。具体而言，在 <strong>空 -雨 - 伞</strong>三个部分，分别写上 <strong>现 状描述 - 解释 -行动</strong>。如果说，康奈尔笔记法更适合学习场景对于知识记录和吸收，那么麦肯锡笔记法更适合工作场景项目笔记记录。</p><p><img src="https://cdn.sspai.com/2022/05/16/20db47df6116d38ce79d96c832041a40.png" alt></p><h3 id="Plus-Minus-Next-journaling"><a class="header-anchor" href="#Plus-Minus-Next-journaling">¶</a>Plus Minus Next journaling</h3><p>Plus Minus Next journaling 的字面意思即是加号、减号、下一步，其结构便如同命名一样，具体如图：在 &quot;+&quot;一列写上一些正面的任务、事件、想法，而在&quot;-&quot;一列的内容则正好相反，在 &quot;-&gt;&quot; 则写上你的下一步的计划和想法。</p><p>![Plus Minus Next journaling - filledexample](<a href="https://cdn.sspai.com/2022/05/16/article/3e9d93947f99311560e9f82499050ba5?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/16/article/3e9d93947f99311560e9f82499050ba5?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>这种笔记方法适合进行周回顾和总结，简单易行。当然，你用这个表格追踪你每日的想法、情绪也是可以的。</p><p><img src="https://cdn.sspai.com/2022/05/16/1d899e3211b50eb946adf02cccd2c624.png" alt></p><h3 id="卡片笔记法"><a class="header-anchor" href="#卡片笔记法">¶</a>卡片笔记法</h3><p>在《卡片笔记写作法》中，详细介绍了卡片笔记法的流程。具体而言，卡片笔记法将笔记区分为闪念笔记、文献笔记和永久笔记，要求人们将卡片盒作为自动对话的容器，持续地将闪念笔记、文献笔记转化为永久笔记，进而实现思考的过程。</p><p><img src="https://cdn.sspai.com/2022/05/16/a1ed855b18b9b796ec780928ba384614.png" alt></p><p>在卡片笔记法中，通过自己的话和逻辑对笔记进行整理、评述非常关键。在这个过程中，最好进行自我提问和自我回答。</p><p><img src="https://cdn.sspai.com/2022/05/16/3523f5f8837dd6294eca8faa4b8a3885.png" alt></p><p>当然，除此之外，还有不少笔记法。比如，INK 笔记法。希望你能找到适合自己的笔记法 <strong>。</strong></p><p><strong>INK 笔记法</strong>：具体参见 <a href="https://zhuanlan.zhihu.com/p/392225914" target="_blank" rel="noopener">INK 笔记法 ---- 建立属于你自己的Workspace</a></p><p><img src="https://cdn.sspai.com/2022/05/16/6d9fd791249c1c6e40c0d43951c6b06a.png" alt></p><h2 id="创意写作"><a class="header-anchor" href="#创意写作">¶</a>创意写作</h2><h3 id="日志写作"><a class="header-anchor" href="#日志写作">¶</a>日志写作</h3><p>对于多数想要写作的人而言，日志写作是最好的开始。提起日志，你可能会问，日志和日记有什么区别。严格来说，日记更具有私人性质，而日志的内容则更为广泛，同时适用私人和工作场合。比如，你写日记的时候，可能会找一个私人空间安静地进行写作。而日志写作，则随时随地可以进行。</p><p>在我看来，这两者的区分并不重要。因为无论是日记还是日志，其本质上都是鼓励人们养成每日写作的习惯。因此，你采用何种形式并不重要。重要的是， <strong>每天去写</strong>。 <strong>通 过写作进行思考</strong>。在日志写作中，让你的思绪、想法、灵感、情感、理性进行相互碰撞和升华。</p><p>卡片是很好的每日写作载体。你可以在氢图中，每日新建一张卡片，快速记录你的想法。</p><p>当然，为了推动日志写作的进行，你可以寻找并创建自己的写作仪式。国内外有不少作家推荐晨间日志/Morning Pages.当然，你要是不习惯，你创造晚间日志也可以。</p><p>此外，很多人即便是面对卡片，可能便不知道如何下手。 <strong>写 作是与自我进行对话</strong>。那么，你可以在写作的时候，进行 <strong>自问自答</strong>，如此便有了写作话题和思路。常见的各种写作模版，本质上便是提供了一套自问自答的写作流程。</p><p>对此，我个人比较推荐 <strong>九宫格写作法</strong>。简单而言，便是提供九个方格，每个方格中填写一个主题或者问题，然后进行回答，最后再将这些内容进行整合。具体而言，九宫格写作法有自己的写作流程，推荐查看官方书籍《<a href="https://book.douban.com/subject/35129121/" target="_blank" rel="noopener">九宫格写作法</a>》。</p><p><img src="https://cdn.sspai.com/2022/05/16/25ab9fcb7dfc367cb2d03b7ab1ad631a.png" alt></p><p>为了进行日志写作，我借鉴九宫格写作法的理念，制作了一个自问自答的日志写作模版。如图。</p><p><img src="https://cdn.sspai.com/2022/05/16/4eed83491e6b266d6a867630d77f4dc5.png" alt></p><p>九宫格写作法提供了文章的基本内容。然而，如何对文章进行组织呢？学术论文的写作思路可以作为借鉴。如图。</p><p><img src="https://cdn.sspai.com/2022/05/16/a51a9924b05cbece7c155df30da644f1.png" alt></p><p>我们可以从某个现象或者理论出发，引出我们的问题。随后，将这一问题进行拆分成多个子问题，并提出对应的假设。然后，文章的主体便是告诉读者，你的资料数据收集和处理的具体方法与技术。通过详细的论证，最终得出你的结论。</p><h3 id="小说写作：雪花写作法"><a class="header-anchor" href="#小说写作：雪花写作法">¶</a>小说写作：雪花写作法</h3><p>雪花写作法，英文为 the Snowflake Method.如果按照这种方法的操作原理，翻译为&quot;雪花分形写作法&quot;更为准确。这是一种被众多小说家实践、行之有效的小说写作方法。</p><p>雪花写作法是由兰迪・英格曼森提出，其基本理念是&quot;好的小说是设计出来的，而不是像魔法一样凭空浮现&quot;。因此，雪花写作法是一种主张规划和设计小说结构、自上而下的小说写作方法。</p><p>雪花写作法主张从最初的故事摘要、人物角色等内容的简要介绍，按照一定的操作方法，逐步扩展成一本完整的小说。这一过程和数学上的科赫雪花曲线的生成逻辑高度相似。具体见配图。因此，被形象地命名为雪花写作法。</p><p>以下是雪花写作法操作流程的简要介绍：</p><ul><li>步骤 1: 用一小时，用一句话写出你的故事摘要；</li><li>步骤 2: 用一个小时，将一句话摘要扩展为一段摘要；</li><li>步骤 3: 构思故事中的人物角色；</li><li>步骤 4: 扩展步骤 2 中完成的故事摘要；</li><li>步骤 5: 扩展步骤 3 中的人物角色；</li><li>步骤 6: 扩展步骤 4 中的故事摘要；</li><li>步骤 7: 进一步扩展人物角色介绍；</li><li>步骤 8: 扩展步骤 6 中的故事梗概为供小说使用的场景清单；</li><li>步骤 9：扩展步骤 8 中的场景；</li><li>步骤 10：动笔开始写小说。</li></ul><p><img src="https://cdn.sspai.com/2022/05/16/399199f1ecffce8b7ec14effa1339f21.png" alt></p><p>从操作流程而言，雪花写作法相当于升级版的大纲写作，具有可操作性强，能满足快速构思和创作等场景。此外，诚然，雪花写作法采用了自上而下的创作思路，但是也不必陷入按部就班的教条主义。雪花写作法并不排斥自由写作。如果你在扩展已有故事架构的写作过程中，发现了更好的创意。那么，是继续按照原有规划，还是采用新的创意。答案是加入你的新创意。对于作品而言，创意最重要。事先进行自上而下的结构设计重要，在具体写作中自下而上对故事脉络、线索、人物等详情进行调整也是必要的补充。</p><p>如果你对雪花写作法感兴趣，可以进一步阅读兰迪・英格曼森的相关作品：</p><p>作为小说创作者，你可以使用氢图呈现你的整部小说的脉络。比如，在刚开始，你只有一个一句话摘要的卡片内容。随后，你按照雪花写作法的方法进行扩充，逐步增加三个子卡片、六个子卡片……在这个过程中，你不断建立不同卡片之间的关系。随着这些卡片的不断增加，你的创作文本也会像雪花轮廓一样逐渐清晰起来。最终形成一篇可供发表的作品。</p><p>此外，你可以使用氢图建立可视化的小说角色设定面板或者人物关系图。具体范例，见下图：</p><p><strong>雪 花写作法*角色模版</strong></p><p><img src="https://cdn.sspai.com/2022/05/16/16bced8549e5b36ad2324c69a2b5535a.png" alt></p><p><strong>小 说人物关系图</strong>。如图，这是《甄嬛传》的人物关系图。</p><p><img src="https://cdn.sspai.com/2022/05/16/5e9bad0a272816fcff0544225db0de74.png" alt></p><p>此外，你可以使用氢图建立 <strong>故 事发展时间线</strong>。比如，哈利波特大事年表。</p><p><img src="https://cdn.sspai.com/2022/05/16/14df87307c759c7270dfc7d603160c6a.png" alt></p><h3 id="剧本写作：三幕剧"><a class="header-anchor" href="#剧本写作：三幕剧">¶</a>剧本写作：三幕剧</h3><h2 id="三幕剧是最为经典，也是最为常见的故事结构。简单而言，三幕剧便是开始、冲突、结局。我们耳熟能详的好莱坞大片，多数都是遵循了三幕剧结构。其中，第一幕交代出场人物、故事背景。在第一幕结束的时候，开始出现转折点"><a class="header-anchor" href="#三幕剧是最为经典，也是最为常见的故事结构。简单而言，三幕剧便是开始、冲突、结局。我们耳熟能详的好莱坞大片，多数都是遵循了三幕剧结构。其中，第一幕交代出场人物、故事背景。在第一幕结束的时候，开始出现转折点">¶</a>三幕剧是最为经典，也是最为常见的故事结构。简单而言，三幕剧便是开始、冲突、结局。我们耳熟能详的好莱坞大片，多数都是遵循了三幕剧结构。其中，第一幕交代出场人物、故事背景。在第一幕结束的时候，开始出现转折点</h2><p>某个干扰事件，锁定了基本冲突。第二幕是剧本故事的主体。其中，人物关系会进一步复杂化，事件也逐渐升级，最终达到极点，出现了全面对抗，进而达到了故事的高潮。第三幕主要是解决冲突，最终收尾结束。当然，在三幕剧之外，还有更为细化的衍生版本---- 五幕剧等。</p><p><img src="https://cdn.sspai.com/2022/05/16/e3fa3a1c63f9b07b0663563b67df9c58.png" alt></p><p>在氢图中，你可以在白板中，建立复杂的人物关系结构图、剧本结构图，建立剧本角色档案等等。或者，按照时间轴，为你创作的角色，建立角色年谱。</p><h2 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h2><p>以上便是氢图的一些使用场景，仅作为抛砖引玉。由于氢图的画板特性，你可以像是堆乐高积木那样，探索氢图使用的各种可能性。</p><p>氢图目前在 <strong>Beta 测试阶段</strong>，在测试结束后，会推出高级会员。所有参与 Beta 阶段的用户，将获赠参与 Beta阶段相应时长的高级会员特权。感兴趣的读者，可以参与 Beta 测试。</p><p>由于在 Beta 阶段，自然存在不少短板：现在还是网页端，无桌面端和移动端；无模版市场功能；导入导出功能需要强化、无协作功能等。不过好在官方 <strong>更新迭代速度很快</strong>，查看其官方更新日志，基本上两周更新一次。目前存在的多数短板，将会很快补上。具体可以查看<a href="https://qingtu.co/" target="_blank" rel="noopener">氢图</a>的近期开发计划，可以查看其<a href="https://qingtu.co/board/77b23e0330ee4f9bad4c1108e0dff092" target="_blank" rel="noopener">官方路线图RoadMap</a>.</p><p>氢图有一款相关产品<a href="https://qingk.com/" target="_blank" rel="noopener">氢刻</a>----一个全平台同步的 <strong>卡 片记忆工具</strong>。</p><p><img src="https://cdn.sspai.com/2022/05/16/798ebc7bcc4efa84898d002cd7277a6d.png" alt></p><p>此外，氢图的开发者的另外一款产品或许更为有名----国产大纲笔记软件的代表 <strong>幕 布</strong>。</p><p>从开发进展和开发背景来看，氢图值得关注和体验。感兴趣的话，请留言表达你对氢图这类工具的看法。</p><h2 id="注释"><a class="header-anchor" href="#注释">¶</a>注释</h2><ul><li><a href="https://qingtu.co/" target="_blank" rel="noopener">氢图</a></li><li><a href="https://qingk.com/" target="_blank" rel="noopener">氢刻</a></li><li><a href="https://zhuanlan.zhihu.com/p/497318606" target="_blank" rel="noopener">视觉化笔记与思考工具 -「氢图」，全局化、可视化记录卡片笔记</a></li><li><a href="https://sspai.com/post/72719" target="_blank" rel="noopener">「氢图」视觉化笔记整理与思考工具，就像在桌面上整理一样自由</a></li></ul><blockquote><p>下载 <a href="https://sspai.com/page/client" target="_blank" rel="noopener">少数派 2.0 客户端</a>、关注<a href="https://sspai.com/s/J71e" target="_blank" rel="noopener">少数派公众号</a>，解锁全新阅读体验 📰</p></blockquote><blockquote><p>实用、好用的 <a href="https://sspai.com/mall" target="_blank" rel="noopener">正版软件</a>，少数派为你呈现 🚀</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://sspai.com/post/73246&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;白板与笔记融合：我的四个氢图使用场景&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」当飞盘成为人类的玩具，我们该如何参与这场游戏</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-10-013640114938/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-10-013640114938/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://sspai.com/post/73505" target="_blank" rel="noopener">当飞盘成为人类的玩具，我们该如何参与这场游戏</a></p><a id="more"></a><p>飞盘作为近几年在国内火热的一项运动，或多或少的出现在大家朋友圈里，不了解的人一看可能会纳闷，飞盘？这不是和宠物狗一起玩的吗？怎么流行起来了，就飞过来飞过去能有什么意思。我刚开始也是这么想，但是当我偶然参加了一次学校的飞盘社团活动，才发现这项运动是这么有趣，也觉得这项运动适合所有人。所以今天带大家了解一下飞盘这项「熟悉又陌生」的运动，这样以后大家刘畊宏跳累了，或者本草纲目听的耳朵起茧了，就可以叫上三五好友，一起来试试飞盘。</p><h2 id="飞盘的起源"><a class="header-anchor" href="#飞盘的起源">¶</a>飞盘的起源</h2><p>1949 年一位名叫弗雷德*莫里森的发明家制造了第一块飞盘，他称自己的发明为「莫里森的飞碟」，最早的飞盘是用金属制成的，可想而知，其飞行效果并不好。后来Wham-O 公司收购了莫里森的发明，并将其更名为飞盘，飞盘的材质也慢慢由金属变为橡胶、塑料等。</p><p>经过几十年的发展，人们已经开发了一系列关于飞盘的运动和游戏，其中比较出名的项目有以下几个：</p><h4 id="飞盘高尔夫"><a class="header-anchor" href="#飞盘高尔夫">¶</a>飞盘高尔夫</h4><p>飞盘高尔夫是常规高尔夫的有趣替代品。在这个游戏中，玩家站在一个发球台，通过将飞盘扔进一个作为&quot;洞&quot;的立式篮子中得分。扔进18洞掷球次数最少的选手获得胜利。飞盘高尔夫有专门的锦标赛事。</p><h4 id="极限飞盘"><a class="header-anchor" href="#极限飞盘">¶</a>极限飞盘</h4><p>极限飞盘是最受欢迎的飞盘运动，也是今天的主角，它结合了结合了足球、橄榄球和篮球项目。目标是通过将飞盘扔给对方端区的一名队员来得分，后面会详细介绍，极限飞盘非常受欢迎，将有可能成为2024年奥运会项目。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/cdca2b90007d3529cdc5ba276adb0785?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/cdca2b90007d3529cdc5ba276adb0785?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自网络</p><h4 id="双飞盘赛"><a class="header-anchor" href="#双飞盘赛">¶</a>双飞盘赛</h4><p>在两支队伍的两名球员之间进行，比赛中需要两个飞盘。开始比赛时两队各持一片飞盘，双方持盘者必须将飞盘掷入对方的场地正方形中，同时也必须接住对方投掷过来的飞盘。如果没有掷入对方的防守区，则对手得分，如果在防守区中漏接对方投掷来的飞盘，对手得分。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/1c6b7a053cd24d6f6fea899006b8a43f?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/1c6b7a053cd24d6f6fea899006b8a43f?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自网络</p><h4 id="躲闪蜂"><a class="header-anchor" href="#躲闪蜂">¶</a>躲闪蜂</h4><p>用飞盘进行躲闪蜜蜂的游戏，和躲避球的游戏规则相似，但每队有 13人，只有一个飞盘，通过扔飞盘击中对方进行淘汰，坚持到最后的队伍获胜，这个项目中的圆盘由厚织物制成，所以击中身体时不会很疼。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/e69377a5b60255a959b52edec411032f?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/e69377a5b60255a959b52edec411032f?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自网络</p><h2 id="飞盘是如何优雅地在空中飞翔的？"><a class="header-anchor" href="#飞盘是如何优雅地在空中飞翔的？">¶</a>飞盘是如何优雅地在空中飞翔的？</h2><p>飞盘为何能飞行如此远的距离？秘密在于其特殊的构造和自身的旋转。</p><p>当飞盘以一定的正迎角（下图中角AOA，指飞盘与前进方向的夹角）掷出飞行时，会把一定质量的空气向下推，而飞盘自身就会受到空气反方向向上的力，即升力，升力对抗了飞盘自身的重力，飞盘得以在空中漂浮。</p><p>飞盘的升力与单位时间内下推空气的质量有关。简单来说就是升力与飞盘「飞行速度」有关，飞行速度越快，升力越大，飞行速度越慢，升力越小。正因如此飞盘最后总要落地，因为飞盘飞行中受到空气阻力影响，速度越来会越慢，升力也越来越小，最后在重力的作用下落地。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/14f851770d48921df7706baa28404c20?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/14f851770d48921df7706baa28404c20?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自参考资料 1</p><p>飞盘飞行时的正迎角（角AOA）也与升力有关。较大的正迎角下升力较大，但是此时空气阻力也大（因为接触面积大），所以速度下降的更快，飞盘也会更早的落地。在较小的正迎角，虽然升力较小，但是空气阻力也较小，飞盘能飞行更远的距离。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/7dc14454e0320b67947489d11b0d2231?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/7dc14454e0320b67947489d11b0d2231?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自参考资料 1</p><p>飞盘自身的旋转对飞盘的飞行质量很重要。飞盘的旋转是它不会摇晃的原因，旋转的飞盘就像一个旋转的陀螺一样，在角动量的作用下使飞盘在飞行中具有稳定性。所以一个自转速度很高的飞盘前进路径十分稳定，不会发生偏移。反之，当飞盘自转速度很低时，稳定性较差，容易偏离轨迹，径直坠地。</p><p><img src="https://cdn.sspai.com/2022/05/29/2a5f6e3c1d1fadcfd5fa0772031ac24b.png" alt><img src="https://cdn.sspai.com/2022/05/29/7239bece868c1d0929e3af36154ee576.png" alt></p><p>此外，湍流和马格努斯效应等原理可以解释很多技巧性的飞盘投掷，如投掷处弧线运动轨迹的飞盘，这里就不过多探讨。我们只要理解了上面已经提到的原理，就足够帮助我们提高投掷飞盘的技巧。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/fa2a4cbfc61166ded9dbfd99f2ed8276?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/fa2a4cbfc61166ded9dbfd99f2ed8276?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自参考资料 1</p><h2 id="如何正确的扔盘和接盘？"><a class="header-anchor" href="#如何正确的扔盘和接盘？">¶</a>如何正确的扔盘和接盘？</h2><p>扔盘和接盘是飞盘最基本的玩法，掌握好这两种技巧，我们就可以用飞盘来进行各种各样的项目和游戏。</p><h3 id="扔盘"><a class="header-anchor" href="#扔盘">¶</a>扔盘</h3><p>常用的扔盘方法有正手扔和反手扔两种，反手扔是最基础的扔盘方法，最适合新手学习，正手扔难度更高，可以作为进阶动作掌握。</p><h4 id="反手扔盘"><a class="header-anchor" href="#反手扔盘">¶</a>反手扔盘</h4><p>用整个手握住飞盘，拇指在飞盘的顶部，食指应该靠在飞盘外缘，剩下的手指按在飞盘底部。</p><p><img src="https://cdn.sspai.com/2022/06/01/5192769fa52076dcebd5b7c879399ca1.GIF" alt>图片来自参考资料2</p><p>如果是右手持盘，右脚放在前侧正对扔盘方向，左脚在后侧与扔盘方向垂直。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/ebcc96baf0668f8977abd667dc89009a?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/ebcc96baf0668f8977abd667dc89009a?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自参考资料 2</p><p>握住飞盘时，将手腕稍微向后弯曲。肘部弯曲，整个小臂手腕平行与地面。</p><p><img src="https://cdn.sspai.com/2022/06/01/15a49698dcc04fd5cc5caab4b5265568.GIF" alt>图片来自参考资料2</p><p>将飞盘对准目标，目标通常为队友，有时也会把飞盘对准队友前进方向，以便队友在移动中接到飞盘。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/68ba0ecfd741a42ddb00256cf874635e?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/68ba0ecfd741a42ddb00256cf874635e?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自参考资料 2</p><p>伸展手臂，在手臂快要伸直时，快速伸展手腕，将飞盘朝向目标释放。出手时飞盘与上腹同高。</p><p><img src="https://cdn.sspai.com/2022/06/01/305d9a5ef55dfe7db531141bec1d1658.GIF" alt>图片来自参考资料2</p><p>除了基本「手法」，还有一些小技巧值得你注意：</p><ul><li>保持飞盘与地面平行，这会让飞盘的正迎角更小，减小空气阻力，飞行更远的距离。</li><li>手臂的伸展速度决定了飞盘出手时的飞行速度，飞行速度越快，到达目标时间越短，升力也越大。</li><li>飞盘自身的旋转是快速伸展手腕的结果，转速越快，飞盘飞行时越稳定，不会发生偏转。</li></ul><h4 id="正手扔盘"><a class="header-anchor" href="#正手扔盘">¶</a>正手扔盘</h4><p>利用拇指、食指和中指进行握盘，大拇指折叠放置在飞盘上端，食指和中指伸直在飞盘下端，将无名指和小指折叠在手中（类似于握拳）。中指抵住飞盘内侧，食指应该保持笔直，指向手指的飞盘中心。也可以将食指和中指都抵制飞盘内侧，从而提供更大力量，但是控制力会下降。</p><p><img src="https://cdn.sspai.com/2022/06/01/c3742f606cf11f3cbfe7b13b947ef294.GIF" alt>图片来自参考资料3</p><p>摆正姿势。一旦握住了飞盘，必须进行迈步以便扔出飞盘，双脚分开略大于肩宽，面向接盘人。膝盖应略微弯曲，以保持平衡进行发力。</p><p><img src="https://cdn.sspai.com/2022/06/01/2a6674eeb268679603499ac4dda5ae17.GIF" alt>图片来自参考资料3</p><p>将飞盘往回移动，直到其位于肘部后侧，此时尽可能弯曲手腕，以便之后的发力。</p><p><img src="https://cdn.sspai.com/2022/06/01/f19552f45cca61670a9c73ea86f5d6ae.GIF" alt>图片来自参考资料3</p><p>向前移动飞盘时，保持飞盘后侧略微向下，在水平方向上向下倾斜约 10 度。投掷时手和手臂应该与地面平行。</p><p><img src="https://cdn.sspai.com/2022/06/01/d3728edc073af6abf9759fed568a94b7.GIF" alt>图片来自参考资料3</p><p>现在可以扔出飞盘，将手臂从从身体外侧移动到身体内侧，然后快速屈曲手腕。投掷时，身体也要旋转，力量由肩膀传递手臂再到飞盘。保持手掌朝上，从而使飞盘平稳出手。</p><p>仍然是一些 Tips：</p><ul><li>飞盘出手时，略微向下，在水平方向上向下倾斜约 10 度。</li><li>飞盘自身的旋转是快速屈曲手腕的结果，转速越快，飞盘飞行时越稳定，不会发生偏转。</li><li>可以在任意高度出手，以躲开防守。</li><li>出手时，手指的指向就是飞盘飞行的路径方向。</li></ul><p><img src="https://cdn.sspai.com/2022/06/01/aff5bd390b1b41fbddfa9bf895da302e.GIF" alt>图片来自参考资料3</p><h3 id="接盘"><a class="header-anchor" href="#接盘">¶</a>接盘</h3><p>接盘技巧也非常重要，成功接到飞盘是游戏继续和得分的关键。常用的接盘方法有煎饼式、鳄鱼嘴式、双手式，以及单手式。</p><h4 id="煎饼式、鳄鱼嘴式"><a class="header-anchor" href="#煎饼式、鳄鱼嘴式">¶</a>煎饼式、鳄鱼嘴式</h4><p>采用这种方法接盘时，一只手在上，一只手在下，两只手相向运动夹住飞来的飞盘。这是最基础的接盘技巧，也是最安全的接盘技巧。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/2618816b2e12e14852790c5600669a40?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/2618816b2e12e14852790c5600669a40?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自网络：煎饼式接盘</p><h4 id="双手式"><a class="header-anchor" href="#双手式">¶</a>双手式</h4><p>采用这种方法接盘时，需要两只手同时抓住飞盘的边缘，如果飞盘在肩膀以上时，拇指在四指下方。</p><p>如果飞盘在肩膀以下时，拇指在四指上方。</p><p><img src="https://cdn.sspai.com/2022/05/29/7ffdeabbe23adfde440309046f78564d.png" alt><img src="https://cdn.sspai.com/2022/05/29/3e4053c699b5963bad0cf183f88eb58a.png" alt></p><h4 id="单手式"><a class="header-anchor" href="#单手式">¶</a>单手式</h4><p>和双手式动作类似，也是用手抓住飞盘的边缘，如果飞盘在肩膀以上时，拇指在四指下方如果飞盘在肩膀以下时，拇指在四指上方。这种方法成功率较低。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/28ae7a31fe7600318d638dd3e85cee2f?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/28ae7a31fe7600318d638dd3e85cee2f?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自网络：单手式接盘</p><h2 id="极限飞盘是什么？怎么玩？"><a class="header-anchor" href="#极限飞盘是什么？怎么玩？">¶</a>极限飞盘是什么？怎么玩？</h2><p>大家最近在朋友圈和网络上刷到的飞盘游戏是一种叫做「极限飞盘」的项目。</p><p>极限飞盘始于 1968 的美国，在哥伦比亚高中一名叫乔<em>希尔沃的同学向校学生会建议了他以飞盘进行橄榄球的想法，并起名为 「FrisbeeUltimate」。这项结合了橄榄球的飞盘新玩法，受到学生们的热爱，次年该校便组织了两支学生队伍进行了第一次的比赛。之后乔</em>希尔沃联合其他同学一起制定了更加正式的规则，而后极限飞盘才正式在美国校队之间进行比赛。现在极限飞盘结合了橄榄球、足球、篮球等项目的特点，已发展成为一项全球性的运动。</p><p>正规的极限飞盘比赛一般采用 7V7的人数配置，练习和娱乐时可以采用其他的人数配置。基本的玩法是，进攻方通过的传递飞盘前进，最后在防守方的端区成功接住飞盘得分，防守队则试图拦截飞盘，成功拦截后，球权交换，防守方成为进攻方。</p><p>正规的极限飞盘场地和足球场类似，当然也可以在空间足够大的空地上进行，场地两端有标记的端区（得分区），进攻方在得分区接到飞盘方可得分。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/7dca8c02e804f7a4de9a71345eab7598?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/7dca8c02e804f7a4de9a71345eab7598?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自网络：极限飞盘场地示意图</p><p><strong>极 限飞盘比赛的基本规则：</strong></p><p>对于进攻方</p><ul><li>接盘时如果不能立即停止，接到飞盘后要有明显的减速动作。</li><li>身体稳定持盘时不能发生双脚的移动（可以单脚固定进行转体）。</li><li>飞盘不能通过手对手传递，要有腾空阶段。</li></ul><p>对于防守方</p><ul><li>防守时不能有任何身体接触，防守距离不小于一个飞盘。</li><li>防守队员防守进攻方持盘者时，可进行 10S 的读秒（需要喊出声），进攻方在 10s 内未扔出则交换球权。</li><li>持盘者 3m 之内只能有一名防守者。</li><li>不能通过出声或其他方式干扰进攻者进行要盘。</li></ul><p>对于比赛</p><ul><li>飞盘落地、出界，无论最后谁碰到飞盘，球权都发生交换。</li><li>在极限飞盘项目中是没有裁判的，所有的犯规行为需要运动员自己裁决。</li><li>出现无法达成共识的争议时，可以采取回盘措施，即持盘者回到争议产生前的位置。</li></ul><p><strong>极 限飞盘比赛的基本流程</strong></p><p>通过猜投掷飞盘或硬币的正反来获得开场的球权。</p><p>开盘时，双方位于各自端区线上，双方举手示意可以开始比赛，防守方将飞盘扔向进攻方一侧，根据飞盘落点不同有以下情况：</p><ul><li>飞盘如果没有出届，则落点就是进攻方开始进攻的地方</li><li>飞盘出届进攻方在最近的边线开始进攻</li><li>进攻方可以尝试接住来自防守方的飞盘，但是要确保「准确接住」，如果接触了飞盘但是未接住导致飞盘落地了，则球权发生交换。</li></ul><p>进攻方通过一系列传递，成功将飞盘传至防守方端区接住，则成功得分，双方交换端区和球权，再次进行开盘。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/3fd7804b7c1d4286c8652b8cfd52a50e?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/3fd7804b7c1d4286c8652b8cfd52a50e?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自网络：端区接盘得分</p><p>进攻方失误（飞盘落地、出届、被抢断等），球权发生交换，防守方成为进攻方，在飞盘落地处或者抢断处开始进攻。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/6e0577925c18dc391d0d56b9b808440f?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/6e0577925c18dc391d0d56b9b808440f?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自网络：成功拦截并开始反击</p><p>以 15 分为一局，先获得 15 分的一方赢下这一局比赛。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/583a93c1243d3194375515829fa2efba?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/583a93c1243d3194375515829fa2efba?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)极限飞盘比赛基本流程</p><h2 id="为什么玩极限飞盘的人越来越多？"><a class="header-anchor" href="#为什么玩极限飞盘的人越来越多？">¶</a>为什么玩极限飞盘的人越来越多？</h2><p>**极限飞盘技术门槛低，规则简单。**新手学习半个小时的扔盘接盘后，都就能掌握基本的扔盘（反手扔）接盘（双手接盘）技术。然后简单了解比赛的规则后，就可以进行一场娱乐赛。参加过两三次比赛后就能掌握所有的规则。所以相比于其他运动项目（篮球、网球等），极限飞盘是最容易入门的运动项目。</p><p>**极限飞盘没有身体对抗，性别不是限制。**极限飞盘禁止了身体对抗，虽然对速度和爆发力依然有要求，但是一个女生完全可以去防守一个男生。所以在极限飞盘的比赛中，你可以看到女生成功防守男生，或者男女一起配合得分的画面。</p><p>![](<a href="https://cdn.sspai.com/2022/05/29/article/1fdf316518aa35708896a802ad5db74c?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/05/29/article/1fdf316518aa35708896a802ad5db74c?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)图片来自网络</p><p>**极限飞盘作为一种团体项目，拥有良好的氛围。**在极限飞盘比赛里，最常听到的词一定是「好」，扔出一个飞行平稳距离很远的飞盘，即使队友没有接到，你能听到一句「好盘」。在几个防守队员间成功接住队友的传盘，你能收获一句「好接」。对手打出一波漂亮的配合，你也会忍不住说出一句「漂亮」。在极限飞盘的赛场上永远不缺鼓励和赞美，这种精神，从老手传递给新手，又从新手传递给后来的初学者。</p><p><img src="https://cdn.sspai.com/2022/05/29/d8ae59dad880f8b93f344b3866d0b911.png" alt>图片来自网络</p><p>**极限飞盘是一种新的社交方式，在锻炼的同时收获朋友。**作者身边的一个朋友喜欢玩飞盘的理由是「社恐，要去玩飞盘练练人际交往」。在极限飞盘里，你们前一秒还是陌生人，但是只要分在了一个队伍，你们关系就不自觉地近了一步，这一步恰好打破了那层阻碍交流的「壁垒」。作为队友你们可以顺畅的交流，讨论技巧，制定战术，得分时赞美，失误时鼓励。所以几场飞盘下来，你会发现不仅身体得到了锻炼，朋友也多了不少。</p><p><img src="https://cdn.sspai.com/2022/05/29/ffb5bbb77f48fc65165b5a3ad008034b.png" alt>图片来自网络</p><p>**在极限飞盘中，可以跑的更快，可以扔的更远。**极限飞盘虽然门槛低，但是要玩的好也很难。首先是扔盘，随着距离增加，要想扔出精准飞盘就越来越难，特别是要做到从一方端区扔到另一方的端区，就需要大量的练习，不断提高技术动作。其次，在极限飞盘里跑的越快成功得分以及成功抢断的几率越大。此外，极限飞盘也对参与者的有氧耐力、爆发力、敏捷性等素质有一定要求。所以随着你技术和身体素质的提高，你在极限飞盘中的体验也会提高，这种提升没有限制，可以一直持续下去。</p><p><img src="https://cdn.sspai.com/2022/05/29/052285cde7089e2f7531c6a448d4bbac.png" alt>图片来自网络</p><p>**运动虽好，谨防受伤。**虽然极限飞盘禁止身体对抗，但是难免有意外发生，特别是两个快速奔跑的人一旦发生碰撞就可能会造成损伤，此外也会发生奔跑中摔倒受伤的情况（一双防滑的鞋子非常重要）。所以大家在玩飞盘时，一定要注意安全，健康的身体是我们继续战斗的基础。</p><h2 id="我该如何开始这项运动？"><a class="header-anchor" href="#我该如何开始这项运动？">¶</a>我该如何开始这项运动？</h2><p>选择「合适的装备」是我们开始极限飞盘的第一步。首先是鞋子，极限飞盘一般在草地上进行，所以鞋子的防滑非常重要，这时可以选择一双足球鞋（碎钉足球鞋足够），或者越野鞋。其次，因为要经过大量的奔跑，服装需要紧身且透气，穿着长裤以及运动紧身衣裤可以防止摔倒时擦伤。此外，一双专门的飞盘手套和橄榄球手套可以防止接盘时手滑和手部受伤。</p><p><img src="https://cdn.sspai.com/2022/06/01/5d1a51817102eb376f9fcb06c91d3839.jpg" alt><img src="https://cdn.sspai.com/2022/06/01/6338282d9616baf4cc3568317d4a7a64.jpg" alt></p><p>第二步我们需要找到一起玩耍的伙伴。如果你在大城市或者高校，加入一个「飞盘俱乐部」是不错的选择。加入俱乐有很多好处，比如俱乐部有更专业更基础的教学，俱乐部会负责寻找场地、组织比赛等。同时还能在俱乐部遇到很多新面孔，交到新朋友。目前北京、上海、深圳飞盘俱乐部较多，大家可以在各种平台上搜索（其他城市也可以试试）。</p><p>如果所在的城市没有极限飞盘俱乐部，不要灰心，叫上三五好友同样可以开始这项运动。在淘宝上购买一个飞盘和四个角锥（标定场地用），飞盘推荐橡胶制的标准比赛用盘，不容易损坏。然后叫上几个好友去附近的空地，经过简单的练习后就可以开始尝试极限飞盘的比赛。慢慢的可能就有新的伙伴加入你们，因为这项运动入门简单，所以对新人的接纳程度也很高。人多起来后你也可以选择组建一个俱乐部，以便更好的开展这项运动。</p><p><img src="https://cdn.sspai.com/2022/06/01/bb245ef35a83a0506110366c71a2028a.jpg" alt>图片来自网络</p><p>最后，精湛的技术需要场下的多次练习。接盘和扔盘虽然看起来简单，但是随着距离的增加，扔盘的准确度就会下降，接盘也往往需要准确的判断以及快速的移动。所以刚开始接触飞盘的新手可以在从简单开始然后循序渐进增加难度，一开始只进行距离较近、双方站立不动的扔接盘练习，慢慢的增加距离。之后可以进行一些跑动中的传接盘练习，也可以增加一个防守者来模拟赛场的情景。相信经过大量的练习后你可以在赛场中表现的更好。</p><h2 id="写在最后"><a class="header-anchor" href="#写在最后">¶</a>写在最后</h2><p>飞盘独特的构造让其可以在空中优雅的飞行，于是人们拿它来进行各种形式的扔盘和接盘游戏。后来有人将橄榄球的玩法应用到了飞盘中，立马得到了大众的喜爱，经过不断的发展成为一项完善的运动项目，并命名为极限飞盘（FrisbeeUltimate）。</p><p>最近几年国内也刮起了「飞盘热」，吸引更多人参加的同时也带来了一些争议。「滥占场地只为了拍几张照片发朋友圈」，「飞盘就是为了撩骚、秀身材和运动毫无关系」等等，产生争议的原因更多是参与者和批评者对飞盘项目的不了解。</p><p>当我们真正了解极限飞盘这个项目后，会发现它有很多优点：技术门槛低，规则简单，没有身体对抗，男女可以同场竞技，氛围良好，锻炼的同时收获朋友等等，所以我们更要正确的对待这个项目，吸引更多的人来亲身参与，让他们从中得到身体的锻炼，收获精神的快乐。而不是仅把它作为一种「社交平台的炫耀资本」，让这项运动变味。</p><p>希望大家通过这篇文章了解飞盘，学习飞盘，之后生活中也能尝试一下飞盘，更加希望快乐和健康能通过飞盘传递到大家的手中。最后附上一段极限飞盘比赛集锦，一起来感受一下极限飞盘这「溢出屏幕」的魅力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://sspai.com/post/73505&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;当飞盘成为人类的玩具，我们该如何参与这场游戏&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」打开终端总有好心情：我的美化方案及配置分享</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-12-045200122103/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-12-045200122103/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://sspai.com/post/74216" target="_blank" rel="noopener">打开终端总有好心情：我的美化方案及配置分享</a></p><a id="more"></a><p>作为一个开发者，不论是本地代码运行调试还是在远程服务器上进行项目的部署运维，都离不开下图所示的终端，也就是科技电影中常出现的黑窗口。</p><p>![boxcnOw5iVEp66NkxfZrxAXyCxc](<a href="https://cdn.sspai.com/editor/u_/cb5pnltb34tbt4lb7kf0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnltb34tbt4lb7kf0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>各个操作系统一般都有自己默认的 Shell，如 Windows 操作系统下的「Powershell」、macOS 与 Linux 系统的 bash、zsh等；带图形版界面的系统也都会预置终端仿真器（Terminal Emulator），如 macOS 平台下的「终端.app」以及 Linux各发行版自带的终端程序等。</p><p>作为一个生产力工具爱好者与颜控，我对终端配置美化的折腾从未停止过，也几经迭代。可能与大多数开发者不同的是，我并不是某种特定方案的拥趸，而是会去尝试各种工具，依照自己的习惯进行配置降低各个方案之间的操作差异，在日常开发过程中根据用途无缝切换使用，有时甚至是随机选一个使用以切换心情。</p><p>本文主要讲述了我的终端方案选择及配置细节。</p><h2 id="终端配置方案需求"><a class="header-anchor" href="#终端配置方案需求">¶</a>终端配置方案需求</h2><p>终端配置分为几个方面：</p><ol><li><strong>工 具配置</strong>。在使用 macOS 或 Window 系统进行开发时，我们往往需要一个终端仿真器（Terminal Emulator）连接到本机开发环境或远程服务器。这通常是我们开发过程中的常驻应用，其颜值、响应速度与快捷键等也会很大程度影响我们的开发体验，因此是我们配置与美化的重点。</li><li><strong>功 能配置</strong>。我们在使用命令行对系统服务/文件进行一些操作时，需要使用 Shell，如 bash、zsh 等，对其进行一些命令提示、自动补全等配置能有效提升我们的使用体验。</li><li><strong>集 成配置</strong>。除了运行 git 等常用命令行工具外，终端往往还需要满足文本编辑、多任务管理等进阶需求。因此，通过终端配置实现 vim、tmux 等工具的深度集成也是我们开发体验优化的重要一环。</li></ol><p>我梳理了自己的终端使用需求，列出了以下几个核心要点：</p><ol><li><strong>风 格简约</strong>。作为一个每天都需要长时间面对的软件，再 fancy 的主题也会看腻，甚至影响自己的注意力。因此，我对终端工具外观与操作逻辑配置的基本思路为 Minimal Distraction，简约而不单调。</li><li><strong>响 应速度快</strong>。最开始我对终端的配置侧重在美观与功能，安装了很多插件配置，但也出现了每次软件开启会有几秒延迟的不良体验。因此，使用过程的响应速度也是我方案选择与优化的重点。</li><li><strong>可 定制性</strong>。因为我的代码编辑器与窗口管理使用的都是 Vim「HJKL」特殊键位，因此我也希望能够进行比较灵活的快捷键配置，降低自己在各个软件直接切换的成本。</li><li><strong>可 移植性</strong>。我时常需要在不同的设备上进行操作，偶尔也会有设备的迭代，会希望自己的配置能比较方便地移植到新设备/服务器等，最好是可以复用同一个配置文件。</li><li><strong>可 拓展性</strong>。我希望能够根据自己的需求拓展一些功能与插件，如使用 fzf 对文件或命令历史记录进行检索，通过命令跳转至指定目录，使用 waka-time 记录自己的编程时间等。</li></ol><h2 id="我的终端配置说明"><a class="header-anchor" href="#我的终端配置说明">¶</a>我的终端配置说明</h2><p>即使需求已经比较明确，找到合适的工具与配置方案依旧是一件困难但充满乐趣的事。接下来我将逐个对我仍在使用并且比较满意的方案进行描述，并提供我的配置文件供大家参考。</p><p>此外，因为我大多数时间都在 macOS 系统上进行开发，所以我的终端工具配置主要是基于 macOS 平台的，但有些工具或插件（如Alacritty、ohmyzsh、Neovim 等）是跨平台的，配置方式大同小异，可以根据实际情况进行参照与配置。</p><h3 id="Warp"><a class="header-anchor" href="#Warp">¶</a>Warp</h3><p>![boxcnO4CwGASjlKWIOENxCPonHg](<a href="https://cdn.sspai.com/editor/u_/cb5pnmdb34tbthquqlog?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnmdb34tbthquqlog?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>我本身是一个折腾流，会希望能自己能够对各类配置有足够的定制化空间。然而，如果要我只推荐一款工具给刚使用终端不久的新手，我会毫不犹豫地选择「<a href="https://www.warp.dev/" target="_blank" rel="noopener">Warp</a>」。</p><p>Warp 是一个基于 Rust 开发的速度极快、功能强大且开箱即用的现代化终端工具。不需要额外配置就支持智能提示、AI 命令智能搜索、命令历史查询、自定义workflow 等功能。</p><p>我是很早参与 Warp 内测的那一批用户，即使是在功能还很不完善的早期，我也被它精致的外观和顺滑的使用体验所惊艳到了。因为基于 Rust 语言开发，Warp的命令执行与响应速度很快，并且它还内置了很多常用功能，我们无需在 Shell 层配置使用历史记录搜索、命令提示等各类插件就能获得强大的功能支持。</p><p>![boxcnWELdus1QwIiaqTeW2MzK3b](<a href="https://cdn.sspai.com/editor/u_/cb5pnmlb34tbt4lb7kfg?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnmlb34tbt4lb7kfg?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>它还有很多传统终端不具备的特色功能，如「block」的概念，每一条命令的执行都以一种「命令块」的形式呈现，可以通过上下左右键在各个 block之间移动，避免了有些命令输出结果太长导致需要一直拉动滚动条阅览；并且我们可以通过右上角对特定 block 进行书签收藏、命令复制、内容检索甚至在线分享等。</p><p>![boxcnJ8b81UFpjnWyl30p1BfoSe](<a href="https://cdn.sspai.com/editor/u_/cb5pnmlb34tbuhnt4id0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnmlb34tbuhnt4id0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>与常规终端工具体验不同的是，Warp 的命令输入窗口长期固定在底部（更接近于IDE），将我们命令输入与结果反馈进行了视觉上的分离；并且它的输入模式接近于文本编辑器，我们可以通过鼠标或是键盘任意移动光标编辑、修改命令或是输入多行命令依序执行，这也是我所认为的Warp 的 killer feature。</p><p>![boxcnnD3b9yHwi3ihKuaQX0UpRe](<a href="https://cdn.sspai.com/editor/u_/cb5pnmtb34tbuhnt4idg?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnmtb34tbuhnt4idg?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>我们仅需在输入框使用对应的快捷键即可唤出历史记录检索、自定义 workflow等功能，并且可以使用鼠标滚轮或是方向键进行选择，十分灵活。更强大的是，当我们使用 Warp 通过 SSH连接到远程终端时，这些快捷键依然有效，如历史记录搜索等，而无需在目标服务器进行配置。</p><p>另外值得一提的是我们可以通过内置快捷键 <code>Command+D</code> 与 <code>Command+Shift+D</code>来水平或垂直拆分终端，无需集成其他工具或进行额外配置。</p><p>随着技术的发展，文本编辑器不断迭代更新，增加了丰富的功能并提供了更好的使用体验，然而与我们开发人员朝夕相处的终端却一直发展迟缓，Warp正是在这个阶段应运而生，也正如它官网所描述的那样：</p><blockquote><p>The terminal for the 21st century.</p></blockquote><h3 id="iTerm2"><a class="header-anchor" href="#iTerm2">¶</a>iTerm2</h3><p>在使用 Warp 之前，我的主力终端工具为 <a href="https://iterm2.com/" target="_blank" rel="noopener">iTerm2</a>，相信这也是很多开发者刚入手 Mac时的必装软件（毕竟默认终端的颜值和可玩性都不太行）。iTerm2 是一个集美观与功能性为一体的老牌终端工具，即使是默认配置也已经很好的满足了我们的需求。</p><h4 id="外观与配色"><a class="header-anchor" href="#外观与配色">¶</a>外观与配色</h4><p>![boxcnnVLQYWAvMqZpNbT9HoHAsf](<a href="https://cdn.sspai.com/editor/u_/cb5pnn5b34tbt4lb7kg0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnn5b34tbt4lb7kg0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>我对一位 YouTuber <a href="https://www.craftz.dog/" target="_blank" rel="noopener">Takuya Matsuyama</a>的配置加以改造，定制了一个性冷淡风外观方案。</p><p>首先在 <strong>偏 好设置</strong> - <strong>Appearance</strong> 部分对主题、Tab 栏与状态栏进行如下配置，保持较为简洁的布局。</p><p>![boxcnw30IomhsadmnVCN07zlryc](<a href="https://cdn.sspai.com/editor/u_/cb5pnndb34tbuhnt4ie0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnndb34tbuhnt4ie0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>完成主题配置后，右键底部状态栏可进行详细配置。我选取了部分状态栏组件实时显示设备状态，这部分可根据自己的偏好进行选择。</p><p>![boxcniBo6fQPqCPbh8G4195HJsc](<a href="https://cdn.sspai.com/editor/u_/cb5pnnlb34tbt90og080?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnnlb34tbt90og080?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>在 <strong>Profile</strong> - <strong>Colors</strong>面板选取自己的主题配色或导入其他配色方案。可以点击<a href="https://github.com/pseudoyu/dotfiles/tree/master/iterm2" target="_blank" rel="noopener">这里</a>下载我的配置文件，导入并根据自己的需求进行调整。</p><p>![boxcnFI6QY4PkXzKLAm7rBC2nRh](<a href="https://cdn.sspai.com/editor/u_/cb5pnnlb34tbt90og08g?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnnlb34tbt90og08g?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>完成配色方案选择后，我通过调整 Transparency 和 Blur 来实现背景透明与毛玻璃效果（即窗口模糊），此处可以根据具体设备的视觉效果进行调整。</p><p>完成了终端工具的配置后，我们还需要对 Shell 进行配置，以集成一些定制主题、智能提示、搜索历史记录等拓展模块，我使用的是 zsh + ohmyzsh +starship 方案，因这些配置各个方案通用，详见下述 Alacritty 配置说明部分。</p><h4 id="多服务器管理"><a class="header-anchor" href="#多服务器管理">¶</a>多服务器管理</h4><p>![boxcnkN1HAlzd80bNZTAbBaqgvc](<a href="https://cdn.sspai.com/editor/u_/cb5pnntb34tbt90og090?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnntb34tbt90og090?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>目前我主要使用 iTerm2 来连接我的各个远程主机/服务器，它提供了方便的多配置管理功能，可以通过设置不同的 Profiles实现不同服务器或配置环境的快速切换，并且可以用醒目的 Badge 来作为标识。</p><p>![boxcnEchitPMDN96afe12tAFoNh](<a href="https://cdn.sspai.com/editor/u_/cb5pno5b34tbthquqlp0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pno5b34tbthquqlp0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>当我们在工作或个人使用中需要连接到多台开发机时，可以通过 <code>Command+O</code> 或通过右键 Dock 栏 iTerm2 图标选择对应 Profile打开服务器，同时也可以通过内置快捷键 <code>Command+D</code> 与 <code>Command+Shift+D</code>来水平或垂直拆分终端，便于多服务器同时操作，无需不断切换窗口。</p><h3 id="Alacritty"><a class="header-anchor" href="#Alacritty">¶</a>Alacritty</h3><p>iTerm2 已经是 macOS平台上颜值与功能都非常平衡的终端工具了，但综合使用下来它的响应速度与配置的自由度还是不那么完美，因此我现在主要将其用于连接远程服务器，本地常用终端后续更换为了<a href="https://alacritty.org/" target="_blank" rel="noopener">Alacritty</a>。</p><p>Alacritty 也是一款使用 Rust 编写的跨平台终端工具，提供了一些基础默认配置，并通过<code>~/.config/alacritty/alacritty.yml</code>文件进行各项自定义配置，可以点击<a href="https://github.com/pseudoyu/dotfiles/tree/master/alacritty" target="_blank" rel="noopener">这里</a>访问我的完整配置。</p><h4 id="外观配置"><a class="header-anchor" href="#外观配置">¶</a>外观配置</h4><p>![boxcnPYopkomew4SJHyTeaHQy8P](<a href="https://cdn.sspai.com/editor/u_/cb5pnodb34tbuhnt4ieg?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnodb34tbuhnt4ieg?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>外观部分我主要通过如下配置进行窗口与字体配置，实现了一种半透明的极简配置，甚至都没有任何边框与按钮，其他配置可自行查看，如选中即复制等在 iTerm2上惯用的功能均可通过几个简单的配置项实现。</p><pre><code>window:  opacity: 0.85  padding:    x: 18    y: 16  dynamic_padding: false  decorations: buttonlessfont:  normal:    family: &quot;MesloLGSDZ Nerd Font Mono&quot;    style: Regular  size: 13.0  use_thin_strokes: true</code></pre><h4 id="OHMYZSH-STARSHIP"><a class="header-anchor" href="#OHMYZSH-STARSHIP">¶</a>OHMYZSH + STARSHIP</h4><p>![boxcnfW5hCrRzPcO2b4t7IeKlVc](<a href="https://cdn.sspai.com/editor/u_/cb5pnodb34tbthquqlpg?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnodb34tbthquqlpg?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>我使用 zsh 作为默认终端，通过 ohmyzsh 来拓展插件功能。zsh + ohmyzsh 是目前非常流行的 Shell配置方案，其具备了丰富的插件系统，可以通过几行配置轻松实现各项拓展功能。首先，我们按照其<a href="https://ohmyz.sh/#install" target="_blank" rel="noopener">官方说明</a>进行安装。</p><pre><code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></pre><p>安装完成后，通过在 <code>~/.zshrc</code> 中添加如下配置来启用 ohmyzsh：</p><pre><code>export ZSH=&quot;$HOME/.oh-my-zsh&quot;source $ZSH/oh-my-zsh.sh</code></pre><p>我配置了 starship 来美化 Shell提示。同样，我们根据<a href="https://starship.rs/guide/#%F0%9F%9A%80-installation" target="_blank" rel="noopener">官方说明</a>进行安装配置：</p><pre><code>curl -sS https://starship.rs/install.sh | sh</code></pre><p>完成后在 <code>~/.zshrc</code> 中添加如下配置即可：</p><pre><code>eval &quot;$(starship init zsh)&quot;</code></pre><p>此外，我们还可以通过在 <code>~/.zshrc</code> 的 plugin 部分添加插件配置，例如我配置了如下插件支持，实现了智能提示、语法高亮、<code>Ctrl + R</code>搜索命令历史记录以及 <code>j + </code>实现快捷跳转等。</p><pre><code>plugins=(  git  zsh-autosuggestions  zsh-syntax-highlighting  zsh-history-substring-search  autojump  zsh-wakatime  fzf-zsh-plugin)</code></pre><p>我的完整配置可点击<a href="https://github.com/pseudoyu/dotfiles/tree/master/zsh" target="_blank" rel="noopener">这里</a>进行查看，各插件安装说明详见官方文档。</p><h4 id="TMUX"><a class="header-anchor" href="#TMUX">¶</a>TMUX</h4><p>![boxcn3GIjDa2RXoJr0mOhv2rsvc](<a href="https://cdn.sspai.com/editor/u_/cb5pnotb34tbthquqlq0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnotb34tbthquqlq0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>因为 Alacritty 本身不提供窗口拆分、Session 管理等功能，所以我们需要集成<a href="https://github.com/tmux/tmux/wiki" target="_blank" rel="noopener">tmux</a> 这一强大的跨平台窗口管理工具。</p><p>macOS 平台用户用过 <code>brew install tmux</code>安装即可，其他平台可根据<a href="https://github.com/tmux/tmux/wiki/Installing" target="_blank" rel="noopener">官方说明</a>进行安装。</p><p>其通过 <code>~/.tmux.conf</code>进行配置，点击<a href="https://github.com/pseudoyu/dotfiles/tree/master/tmux" target="_blank" rel="noopener">这里</a>查看我的配置，因其配置使用需要一定学习与记忆成本，本文不做详述，建议通过官方文档或其他完整教程进行学习。</p><h4 id="NEOVIM"><a class="header-anchor" href="#NEOVIM">¶</a>NEOVIM</h4><p>我们的日常开发的代码编写一般在 VS Code 或 Jetbrains 家的 IDE中进行，而调试则需要使用终端，如果不想频繁切换于各个软件之间，我们可以选择 vim 这一可用于命令行的编辑工具。</p><p>然而，原生 vim 就是一个简单的窗口，与我们的配置好的终端显得格格不入，因此，我们也将对 vim 进行美化配置。限于篇幅，本文不会涵盖 vim的具体配置使用相关内容，仅对我的配置方案进行描述。</p><p>![boxcnNOHrdX73xzz92LmM7XNRFh](<a href="https://cdn.sspai.com/editor/u_/cb5pnp5b34tbt90og09g?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnp5b34tbt90og09g?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>我使用的是 neovim 这一 vim 的衍生版本，其高版本采用 lua 进行配置与插件管理。我使用的我的一个朋友<a href="https://github.com/Cluas" target="_blank" rel="noopener">Cluas</a>定制的方案，并在其基础上进行了一些修改调整，可点击<a href="https://github.com/pseudoyu/nvim/tree/pseudoyu" target="_blank" rel="noopener">这里</a>查看，仅需将<code>nvim/</code> 目录 clone 或下载后复制到 <code>~/.config</code> 即可。</p><p>其显示效果如下：</p><p>![boxcnSGCyFsMJ3SbOn27lDdnDvd](<a href="https://cdn.sspai.com/editor/u_/cb5pnp5b34tbuhnt4if0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnp5b34tbuhnt4if0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)![boxcnMoeNKDMi5qC8otToXBKMSh](<a href="https://cdn.sspai.com/editor/u_/cb5pnpdb34tbuhnt4ifg?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/editor/u_/cb5pnpdb34tbuhnt4ifg?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><h4 id="快捷键配置"><a class="header-anchor" href="#快捷键配置">¶</a>快捷键配置</h4><p>tmux 是一个强大的窗口管理工具，然而每次都需要使用 <code>&lt;Ctrl+b&gt;+ %</code> 或 <code>&lt;Ctrl+b&gt;+ :</code> 来进行水平或垂直分屏，或是使用<code>&lt;Ctrl+b&gt;+ c</code> 来新建窗口等操作十分繁琐。</p><p>那么，有没有能够通过 macOS 自带的例如其他终端编辑器使用的 <code>Command+D</code>、<code>Command+Shift+D</code> 或 <code>Command+T</code>来实现分屏或新建窗口等配置呢？</p><p>经过了一番调研与折腾，我参照着 <a href="https://www.joshmedeski.com/" target="_blank" rel="noopener">Josh Medeski</a> 的这篇「[macOSKeyboard Shortcuts for tmux](<a href="https://www.joshmedeski.com/posts/macos-keyboard-" target="_blank" rel="noopener">https://www.joshmedeski.com/posts/macos-keyboard-</a>shortcuts-for-tmux)」完美实现了这一需求。</p><p>其基本实现方式为，在终端输入 <code>xxd -psd</code> 命令后，键入所需要映射的 tmux 快捷键，如 <code>&lt;Ctrl+b&gt;+ c</code>，其会显示该输入的 hexcodes 为：</p><pre><code>^Bc02630a</code></pre><p>其中，<code>02</code> 代表 <code>&lt;Ctrl+b&gt;</code>，<code>63</code> 代表 <code>c</code>，而 <code>0a</code> 代表回车键，因此，在 tmux 中新建窗口的快捷键对应 hex code为 <code>\x02\x63</code>。我们在 <code>~/.config/alacritty/alacritty.yml</code> 中的 key_bindings部分配置如下选项即可：</p><pre><code>key_bindings:  - { key: T, mods: Command, chars: &quot;\x02\x63&quot; }</code></pre><p>其他快捷键配置实现原理一致，可点击<a href="https://github.com/pseudoyu/dotfiles/tree/master/alacritty" target="_blank" rel="noopener">这里</a>查看我的所有快捷键配置并自行修改调整。</p><h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2><p>至此，我对我目前所使用的三种终端工具进行了介绍与配置说明，开箱即用的 Warp 有其强大之处，iTerm2 在易用性与定制化上实现了不错的平衡，而Alacritty 也自有折腾的乐趣。</p><p>如我前文所述，有时候换一个终端就是一种全新的心情，闲暇时不断优化折腾也不失为一种放松。当然，每个人的终端配置都各有自己的偏好与特点，本文只是对我的方案进行了介绍，更多满足了自己的审美追求与功能需求，希望能够为你的终端配置提供一个参考，如你在配置中遇到问题或有了更好的优化建议，也欢迎交流。</p><h4 id="关联阅读"><a class="header-anchor" href="#关联阅读">¶</a>关联阅读</h4><blockquote><p>下载 <a href="https://sspai.com/page/client" target="_blank" rel="noopener">少数派 2.0 客户端</a>、关注<a href="https://sspai.com/s/J71e" target="_blank" rel="noopener">少数派公众号</a>，解锁全新阅读体验 📰</p></blockquote><blockquote><p>实用、好用的 <a href="https://sspai.com/mall" target="_blank" rel="noopener">正版软件</a>，少数派为你呈现 🚀</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://sspai.com/post/74216&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;打开终端总有好心情：我的美化方案及配置分享&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」为 WSL 配置这些新功能，不用虚拟机也能体验完整 Linux</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-09-030843747852/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-09-030843747852/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://sspai.com/post/74167" target="_blank" rel="noopener">为 WSL 配置这些新功能，不用虚拟机也能体验完整 Linux</a></p><a id="more"></a><p>Windows Subsystem for Linux（WSL）是微软在 Windows 平台下支持 Linux环境的子系统，一经推出便受到各大开发者的青睐。少数派平台上也有很多篇 WSL 相关的文章：</p><p>如果你也是一名深度学习科研人员，科研圈里的新文章大部分都是基于 Linux 环境的科研实验，而我们日常使用的电脑却是 Windows 平台。而普通的Linux 虚拟机又无法访问显卡以获得深度学习加速。另一方面，有部分的科研实验开源了他们的 toolkit，但是却是使用 Linux 桌面环境开发的，在Linux 服务器上也无法使用。</p><p>现在，随着时间的推移，WSL 不断迎来了它的功能增强，分别是 WSL2，NVIDIA CUDA on WSL，和 WSLg。它们各自解决了 WSL在上述场景下不同的开发难题。</p><blockquote><p>「Microsoft loves Linux」</p></blockquote><p>本篇文章就是一个教程指导安装和配置 WSL 使其能够使用上上述的新功能。</p><h2 id="第二代-WSL-完整的-Linux-体验"><a class="header-anchor" href="#第二代-WSL-完整的-Linux-体验">¶</a>第二代 WSL 完整的 Linux 体验</h2><h3 id="主要区别"><a class="header-anchor" href="#主要区别">¶</a>主要区别</h3><p>WSL 目前有两个主要版本，分别称为 WSL1 和 WSL2。它们最大的不同是，WSL1 是基于动态翻译的方式将 Linux 的系统调用翻译为Windows NT（Windows 操作系统的内核）的系统调用，而 WSL2 是基于虚拟机的，在 Windows 主系统之上创建完整的 Linux 内核。</p><p>开发者在 WSL1 中遇到的问题就是，部分 linux 的命令无法成功运行。当你遇到这个问题，将会一件非常恼火的事情。比如，WSL1 中无法成功运行docker，因为需要 linux 关于名称空间的系统调用，而 WSL1 并不支持。最终，微软还是决定使用虚拟化技术来克服这一问题。</p><p>WSL1 和 WSL2 之间其它的主要功能比较，可以参照这这个[微软文档](<a href="https://docs.microsoft.com/zh-" target="_blank" rel="noopener">https://docs.microsoft.com/zh-</a>cn/windows/wsl/compare-versions)中的表格：</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/912b8d507ae889a00bc0a402cf53d203?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/912b8d507ae889a00bc0a402cf53d203?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>从表格中可以看出，WSL2 在功能支持的数量上明显优于 WSL1，但跨 OS 文件系统的性能这一项除外。后面我们会根据实际路径说明，如何避免跨 OS文件访问以避免性能问题。</p><h3 id="启用-WSL2"><a class="header-anchor" href="#启用-WSL2">¶</a>启用 WSL2</h3><p>首先，WSL2 能在 Windows 11 or Windows 10, Version 1903, <strong>Build 18362</strong> 或更高的版本号中启用。</p><p>**方 式一：命令行方式。**最快捷的方式莫过于命令行，一行命令即可完成启用和安装，<code>wsl --install</code>。该命令会帮助用户启用必要的系统组件，下载最新的 Linux 内核，设置 WSL2 为默认版本，下载并安装 Ubuntu 作为初始版本。</p><p>如果想要更细致的控制安装选项，可以使用下面的方式二手动启用。</p><p>**方 式二：图形选项卡。**由于 WSL2 的实现方式是基于虚拟机的形式，因此在 Windows功能 的菜单里需要打开两个关键的组件「VirtualMachine Platform」和「Windows Subsystem for Linux」。否则是没有办法创建磁盘，启动并进入 WSL2 的，而WSL1 仅需打开「Windows Subsystem for Linux」。</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/afe8c101898830b30e575bf3b0be8636?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/afe8c101898830b30e575bf3b0be8636?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>经过重启电脑后，勾选的新功能将会被启动。打开终端，输入 <code>wsl --set-default-version 2</code> 命令即可将 WSL 的版本设置为使用WSL2.</p><pre><code>PS C:\Users\someone&gt; wsl --set-default-version 2For information on key differences with WSL 2 please visit https://aka.ms/wsl2The operation completed successfully.</code></pre><p>安装 Linux 发行版应该不必多说，通过 Windows 应用商店点击一下即可安装。</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/7cd4993f3f41d623e94a5a092350d13b?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/7cd4993f3f41d623e94a5a092350d13b?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>默认情况下，这两种安装方式都会将 WSL 安装到系统盘。如果想要将 WSL 安装到非系统盘，可以参考下面这篇文章。</p><h3 id="WSL2-跨系统访问文件"><a class="header-anchor" href="#WSL2-跨系统访问文件">¶</a>WSL2 跨系统访问文件</h3><p>由于 WSL2 变成了一个虚拟机的形式，那么以前便捷的资源管理器访问 Linux 目录树的功能便不容易找到对应的位置了。</p><p>但是，在资源管理器中输入 <code>\\wsl$\Ubuntu-20.04\home\user</code> 可以通过 smb 协议访问 Linux目录树，也可以将其绑定在网络位置中快速进入。</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/eefd118642d88091f63a82daca7e24a4?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/eefd118642d88091f63a82daca7e24a4?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)dotfiles 很乱</p><p>能够使用系统的资源管理器访问虚拟机的文件真的很方便。在我的使用场景中，我会用来查看实验运行结果产生的图片，以初步判断目标检测的效果。而这之前，我都需要起一个HTTP 服务来浏览或者通过 scp 拷贝一份到本机才能浏览。</p><h2 id="WSL-的图形小尾巴：-WSLg"><a class="header-anchor" href="#WSL-的图形小尾巴：-WSLg">¶</a>WSL 的图形小尾巴： WSLg</h2><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/00fec78faec955ce829176b113c51ffa?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/00fec78faec955ce829176b113c51ffa?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)<a href="https://github.com/microsoft/wslg" target="_blank" rel="noopener">图源</a></p><p>WSLg 是微软开发的一套技术栈，致力于将 Linux 的 GUI 应用无感地带到 Windows 操作系统中。简单点来说，就可以通过开始菜单运行一个Linux 的图形化应用，而用户却感知不到它其实运行在 WSL2 中。</p><p>在之前，如果想要运行 Linux 图形化应用，我们需要使用实体机/虚拟机安装完整的 Linux 桌面系统才行。更高级一点，需要在 Windows 端安装XServer，然后通过 X11 forward 转发来渲染图形化。</p><p>WSLg 实现了相同的功能，且功能更丰富。首先，不需要完整的桌面系统环境的情况下，WSLg 更轻量化，只包含了显示服务器（X WindowManager）。其次，XServer 仅支持 X11 App 这类应用，而 WSLg 进一步支持 Wayland App。最后，WSLg 方案引入了RDP 的本地远程桌面方案显示 GUI 应用，能够最大限度地支持复制粘贴切换应用等一些列 Windows 的使用习惯。</p><p>如果你想体验一下现在 Linux 下的软件生态的话，WSLg 是一个支持最丰富的方案了，尝鲜完后也可以完全卸载 WSL2，干干净净，清清爽爽。</p><h3 id="安装-WSLg"><a class="header-anchor" href="#安装-WSLg">¶</a>安装 WSLg</h3><p>WSLg 要在 Windows 11 或更高的版本号中启用，注意 Windows 10 用户便无法使用该功能了。</p><p>WSLg 的安装更为简单，其实已经包含在上述的步骤中了。当执行 <code>wsl --install</code> 的时候，WSLg也会被一并安装。如下图，我重新执行了一遍全新安装，WSL 所要求的相关组件也会自动安装，然后只需要重启一遍系统便能启动该功能。对于已安装 WSL2的用户，可以执行 <code>wsl --update</code>。</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/c3b70b5630dba4148ea079d238a1191a?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/c3b70b5630dba4148ea079d238a1191a?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)注意需要使用管理员权限运行</p><p>你可以通过 apt 安装 <code>x11-apps</code> 然后运行 <code>xeyes</code> 来确认安装成功。</p><p>但是，WSLg 也不是所有的图形应用都能完美运行，网上有不少的帖子表示很多用户遇到的困难，大部分都指向了 systemd和图形驱动相关的问题。这也可以作为你的初步判断看看 WSLg 是否能满足自己的需求。</p><h3 id="实际应用"><a class="header-anchor" href="#实际应用">¶</a>实际应用</h3><p>在我的日常工作中，还需要对实验数据进行数据分析。我常常使用 python 调用 matplotlib 库绘制论文插图，通过 WSLg可以方便地直接渲染并显示绘制的插图，这样我就能快速地迭代调整插图的细节。</p><p>在这之前，我都是通过 Google Colab 来完成绘图工作的。但是在实验的 artifacts 比较多和比较大的时候，我需要花费大量精力想办法把artifacts 同步到 Colab 的运行时中；或者通过端口转发让 Colab 使用本地运行时来访问 artifacts。但无论哪种方法，都比不上WSLg 来得直接和方便。</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/8ef7fe939102c6a29f48299d1ade8953?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/8ef7fe939102c6a29f48299d1ade8953?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>Caption: 用我最喜欢的正弦函数来做演示</p><p>对于很多以 Linux 作为第一优先级支持的 GUI 应用，我认为也是很值得使用 WSLg 的，比如，著名仿真软件<a href="https://gazebosim.org/home" target="_blank" rel="noopener">GAZEBO</a>、机器人软件包 <a href="https://www.ros.org/" target="_blank" rel="noopener">ROS</a>、生物信息工具<a href="https://blast.ncbi.nlm.nih.gov/Blast.cgi" target="_blank" rel="noopener">Blast</a> 等。</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/d083cc0e6ff8315d59ff5e4f707dd177?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/d083cc0e6ff8315d59ff5e4f707dd177?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>如果你有正好在练习和熟悉 Linux 的操作，那么我推荐你安装使用<a href="https://github.com/teejee2008/timeshift" target="_blank" rel="noopener">Timeshift</a>这款应用。它可以给你指定的路径创建备份作为还原点，然后就可以放心地折腾 WSL2 以学习 Linux 的使用，遇到问题后快速恢复。</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/987980e2fc442fafd6e1aff6e125984e?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/987980e2fc442fafd6e1aff6e125984e?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>如果你有在电脑端阅读电子书的习惯，而且听说过江湖传说「Windows 的字体渲染是很糟糕的」，那么不妨试试字体渲染更好一些的 Linux 阅读器<a href="https://johnfactotum.github.io/foliate/" target="_blank" rel="noopener">Foliate</a>。虽然有点曲线救国的意思，但也不失为一种不错的解决方案。</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/9392f8e25f20df8dcf26e8071f7179b0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/9392f8e25f20df8dcf26e8071f7179b0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><h2 id="进击的-WSL-with-CUDA"><a class="header-anchor" href="#进击的-WSL-with-CUDA">¶</a>进击的 WSL with CUDA</h2><p>CUDA，全称「Compute Unified Device Architecture」，是 Nvidia 公司发行的针对自家公司 GPU显卡的并行计算开发套件。使用 CUDA 这个开发套件可以直接访问 GPU 中的流处理器，更高效地完成大量且重复的简单计算。</p><p>由于 GPU 的并行计算能力比 CPU 强大，因此更加适合矩阵计算，图形渲染等任务。而目前很热门的深度学习技术正是因为大量使用的矩阵计算，所以对 CUDA有很大的依赖。</p><p>在我的日常工作中需要对深度学习技术进行研究，现在 WSL 也能支持 CUDA，对我来说就能降低对于服务器的需求，在本地机器上完成基础的代码编写和运行测试，然后再同步到服务器进行大规模的实验了。</p><h3 id="安装-CUDA"><a class="header-anchor" href="#安装-CUDA">¶</a>安装 CUDA</h3><p>CUDA on WSL 可以在 Windows 11 或 Windows 10, Version 21H2 及更高的版本号中启用。</p><p>很多同学看了微软和英伟达关于 CUDA on WSL 相关的文档，还是一头雾水。除了因为大量的英文描述以外，还因为他们都没有言简意赅地告诉你， <strong>整个安装过程对于用户其实是非常简单的</strong>。</p><p>整个安装过程可以分为三步走：</p><ol><li>在 Windows 侧升级 Linux 内核；</li><li>安装 Nvidia 的显卡驱动；</li><li>在 WSL 内安装 Nvidia CUDA 的开发套件；</li></ol><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/1819e41e89cf24e6ca0ca9f460d9325e?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/1819e41e89cf24e6ca0ca9f460d9325e?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)架构简易图示</p><p>第一步，升级 Linux 内核，这里需要分三种情况讨论：</p><ul><li>如果你是通过上述步骤全新安装的 WSL，那么你可以跳过这一步，因为初次安装就是最新的内核版本了。</li><li>如果你日常使用 Windows 打开了自动更新功能 <s>（ 最多关21天）</s>，那么你也不用升级，因为日常它就会帮你自动升级。</li><li>如果真的需要手动安装，<code>wsl --install</code>命令一键安装完成。</li></ul><p>最后你可以通过 <code>wsl cat /proc/version</code> 命令确认内核版本大于 5.10.43.3.</p><pre><code>PS C:\Users\someone&gt; wsl cat /proc/versionLinux version 5.10.102.1-microsoft-standard-WSL2 (oe-user@oe-host) (x86_64-msft-linux-gcc (GCC) 9.3.0, GNU ld (GNU Binutils) 2.34.0.20200220) #1 SMP Wed Mar 2 00:30:59 UTC 2022</code></pre><p>第二步，安装 Nvidia 显卡驱动。这个其实大部分配置了英伟达显卡的个人电脑都已经安装了，否则根本无法正常使用显卡的功能。如果你能在系统托盘看到Nvidia GeForceExperience，那么说明你已经安装好了。如果没装，进入<a href="https://www.nvidia.com/download/index.aspx" target="_blank" rel="noopener">英伟达驱动官网</a>，选择自己的显卡型号下载安装包一路点下一步就好。</p><p>虽然 Nvidia 没说具体的版本号要求，只提了最新的驱动能支持。但个人来说我也推荐偶尔手动更新到最新版本，以获取更稳定高效的驱动表现 <s>和更高的游戏性能</s>。</p><p>第三步，安装 Nvidia CUDA 的开发套件。Nvidia 的 [CUDA 官网](<a href="https://developer.nvidia.com/cuda-" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-</a>downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=WSL-Ubuntu&amp;target_version=2.0&amp;target_type=deb_local)中已经贴心地将 WSL 视作一个独立的 Linux发行版，只要选择如下图的选项，根据网站下面显示的指令敲一遍就能顺利安装 CUDA 开发套件。整个过程和其它的发行版安装无异，完全不用额外的学习成本。</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/8436c552831201c82d90b905125606cc?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/8436c552831201c82d90b905125606cc?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>从深度学习用户的角度来说，我并不推荐无脑安装最新的 CUDA 版本，除非自己清楚影响范围是什么。一般来说，使用深度学习环境如<a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">pytorch</a> 和<a href="https://www.tensorflow.org/install/gpu" target="_blank" rel="noopener">tensorflow</a> 官网中推荐安装的版本能获得最少 bug的体验。因此，在 [CUDA 官网](<a href="https://developer.nvidia.com/cuda-" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-</a>downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=WSL-Ubuntu&amp;target_version=2.0&amp;target_type=deb_local) 下面选择 Archive of Previous CUDAReleases 可以获取历史版本的安装指令。</p><p>在 WSL 下运行 <code>nvidia-smi</code> 等命令可以确认是否正确安装 CUDA 套件。</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/2181f08f192d11fe84ec30fe73f58d45?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/2181f08f192d11fe84ec30fe73f58d45?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>至此，你已经安装完成了 WSL 下 CUDA 的全部依赖了，可以和普通的 Linux 环境一样正常安装使用深度学习的环境了。</p><h3 id="实际应用-2"><a class="header-anchor" href="#实际应用-2">¶</a>实际应用</h3><p>和大多数的深度学习科研工作者一样，我一般使用 CUDA 来运行深度学习应用。在 WSL 的环境下，编码体验和服务器端完全一样，但由于不用考虑和同学们分时复用GPU，编码和测试就能够更频繁地交替。在同样的 RTX2080Ti 的显卡下，也没有明显感知到运行速度的差异。</p><p>![](<a href="https://cdn.sspai.com/2022/07/08/article/46e1f6213a9f6bddcf0ced9d16dc2cf2?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/08/article/46e1f6213a9f6bddcf0ced9d16dc2cf2?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)</p><p>类似地，Intel 和 AMD 也有等同于 CUDA 的开发套件，分别是<a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/overview.html#gs.53ka13" target="_blank" rel="noopener">oneAPI</a>和 <a href="https://rocmdocs.amd.com/en/latest/" target="_blank" rel="noopener">ROCm</a>。[微软](<a href="https://devblogs.microsoft.com/commandline/oneapi-l0-openvino-and-" target="_blank" rel="noopener">https://devblogs.microsoft.com/commandline/oneapi-l0-openvino-and-</a>opencl-coming-to-the-windows-subsystem-for-linux-for-intel-gpus/)和[英特尔](<a href="https://www.intel.com/content/www/us/en/artificial-" target="_blank" rel="noopener">https://www.intel.com/content/www/us/en/artificial-</a>intelligence/harness-the-power-of-intel-igpu-on-your-machine.html)在博客中各自宣布了在WSL2 中支持 oneAPI，但关于 ROCm 的消息还没有看到。对于另外两家的硬件有需求的读者可以去探索一下。</p><h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2><p>软件的功能层出不穷，但永恒不变的还是那句话，适合自己的才是好的。如果你也有类似的需求，想要兼顾 Windows 系统上大量的常用软件，那么 WSL2从这个角度看是很理想的选择，不妨试试。关于 WSL2 的使用有什么痛点以及更合适的使用场景和软件推荐，也欢迎在评论区留下你的评论。</p><p><strong>关 联阅读</strong>：</p><ul><li><a href="https://docs.microsoft.com/en-us/windows/ai/directml/gpu-cuda-in-wsl" target="_blank" rel="noopener">Enable NVIDIA CUDA on WSL</a></li><li><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html" target="_blank" rel="noopener">CUDA on WSL User Guide</a></li></ul><blockquote><p>下载 <a href="https://sspai.com/page/client" target="_blank" rel="noopener">少数派 2.0 客户端</a>、关注<a href="https://sspai.com/s/J71e" target="_blank" rel="noopener">少数派公众号</a>，解锁全新阅读体验 📰</p></blockquote><blockquote><p>实用、好用的 <a href="https://sspai.com/mall" target="_blank" rel="noopener">正版软件</a>，少数派为你呈现 🚀</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://sspai.com/post/74167&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;为 WSL 配置这些新功能，不用虚拟机也能体验完整 Linux&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」走进小众但不冷门的房车世界</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-10-020934733003/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-10-020934733003/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://sspai.com/post/74043" target="_blank" rel="noopener">走进小众但不冷门的房车世界</a></p><a id="more"></a><p><strong>Matrix 首页推荐</strong></p><p><a href="https://sspai.com/matrix" target="_blank" rel="noopener">Matrix</a>是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p><p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><h2 id="前言：小众但不冷门的新市场"><a class="header-anchor" href="#前言：小众但不冷门的新市场">¶</a>前言：小众但不冷门的新市场</h2><p>对于今天的中国市场来说，房车依然是一个小众领域，但你不能再说它「冷门」了。</p><p>自 2010 年以来，我国的房车市场一直在高速发展，这源自于国家政策的支持与国内房车文化的兴起。</p><p>在十三五期间，全国各省市在中央政策的指引下规划了各自的房车营地建设规划，2014年《关于加快发展体育产业促进体育消费的若干意见》，提出要引导发展户外营地、汽车露营营地等设施；2016年《关于加快发展健身休闲产业的指导意见》提出重点建设一批山地户外营地、自驾车房车营地等；2018年《关于完善促进消费体制机制进一步激发居民消费潜力的若干意见》提出支持自驾车、旅居车等消费大众化发展，加强相关公共配套基础设施建设；2019年《关于进一步激发文化和旅游消费潜力的意见》指出要着力开发自驾车旅居车旅游产品；2022 年 1 月 20日新华社播发的《十四五旅游业发展规划》中又明确提到要重点推进旅居车及营地、可移动旅居设备等自主创新及高端制造……</p><p>乘联会数据显示，中国房车市场近年来也在快速增长，年销量从 2017 年的不足 5000 辆增至 2021 年的 12582 辆。今年第一季度，我国房车销量为2425 辆，同比增长17%。​这些都表明国家相关部门一直都很重视国内房车市场，同时，随着国内房车市场的高速发展，国家也在不断根据实际情况制定新法规、新政策。</p><p>比如今年 4 月 1 日，「C1 驾照只能开 6 米以内车型，却能开前后车相加超过 10 米的拖挂房车」这个 BUG 终于被修复，有关部分专门为此新增了C6 驾照；此外法规上对于自行式房车的上装标准也于今年 1 月 1 日起开始实施，规定了房车车内净高度不低于1750mm、需有独立卫生间、装置需固定（限制外置厨房），并明确房车的正式名称为「小型旅居车」。作为对比，新规之前房车行驶证上写的是「小型专用客车」。</p><p>事实上，早在 2015 年公安部就下发过关于指导基层交管部门对于拖挂房车的执法意见，因为那时候包括拖挂房车在内的所有房车在国内都还是一个新事物。​</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/1330b2001f3f063f3250dbb4c6f8c99d?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/1330b2001f3f063f3250dbb4c6f8c99d?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)我国房车相关法规一直在与时俱进</p><p>所以如果你已经通过其它渠道接触过房车，想要进一步了解房车入门的一些相关知识甚至考虑入手房车，这篇文章将通过几个常见问题为你提供一些必要的指引。</p><h2 id="Q1：聊「房车」时我们在聊什么车"><a class="header-anchor" href="#Q1：聊「房车」时我们在聊什么车">¶</a>Q1：聊「房车」时我们在聊什么车</h2><p>宏观上来说，我们所讨论房车一般分为 <strong>自 行式房车</strong>和 <strong>拖 挂房车</strong>。</p><p>自行式房车简单说就是自己有发动机和轮子，自己会跑，房和车是一体的。自行式房车往下又细分为 A 型、B 型和 C 型房车。</p><p><strong>A 型房车</strong>指的是那些长度超过 6米、以大巴、卡车为底盘、内部空间巨大、配置奢侈的豪华房车，也因此这种房车的售价高高在上，不管是字面意义上还是延伸意义上，都不是普通人能「驾驭」得了的，这里就不细说了。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/89ab820b05c6d5f8e5830f343f411f2c?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/89ab820b05c6d5f8e5830f343f411f2c?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)可以放跑车的奢华A型房车</p><p><strong>B型房车</strong>一般由厢式货车整车改装而来，不改变车身的整体结构，虽然有的厂家会更换部分车顶或拓宽窗户以获得更大空间（如奇瑞瑞弗），但不会改变车子原厂的碰撞安全性和耐久性，外观低调，开起来的感觉和开一个普通的厢式货车是一样的。</p><p>为了有更大的空间，国内 B 型车一般使用大通 V90、依维柯欧胜这类长轴高顶的底盘，成品房车售价一般在 30万以上。也有的厂家使用小尺寸的面包车或轻客，售价较低，但一般没有卫生间且空间较小，人也站不直，这类房车更偏向于床车而不是真正意义的房车，需要注意。</p><p>![](<a href="https://cdn.sspai.com/2022/06/30/article/166c627f6b457a6fffae6257ae65e834?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/30/article/166c627f6b457a6fffae6257ae65e834?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)小型B型房车更偏向于床车</p><p>B 型房车相较于 C 型房车外观低调不会引起围观，较低的车高能通过更多的限高，开起来更灵活可以兼顾日常通勤，车型选择也很多，如果想当家用车使用，就选择长度5.5 米甚至 5 米的高顶房车，空间也不会差，如果已经有通勤车，可以顶着蓝牌的上限选择长度 5 米 99 的底盘获得更大的空间。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/22514ca82e5243322d3fd1d6b5edab46?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/22514ca82e5243322d3fd1d6b5edab46?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)中短轴B型房车能兼顾日常</p><p><strong>C 型房车</strong>最明显的一个特点就是有个大额头，相比于 B 型房车其纵向空间利用率更高，它的大额头能直接比 B 型房车多一个全尺寸大床出来。</p><p>![](<a href="https://cdn.sspai.com/2022/06/30/article/6aa5626f6786a9b1e3800d7093bab9fa?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/30/article/6aa5626f6786a9b1e3800d7093bab9fa?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)上汽大通原厂出品的 C 型房车</p><p>C型的底盘大部分是皮卡和轻卡去掉驾驶室后面的载货斗安装上房车专用箱体而来，设计不受原车的尺寸限制，空间充裕。车身材质以玻璃钢中间填充保温材质、木骨架的「三明治」车身为主流，高档的会用铝合金和钢作为骨架，但不论用什么材质，车身耐久性和强度必然不能和通过碰撞测试的B型房车相提并论。</p><p>C 型的另一个优点是保温隔热性能比 B 型更好。​</p><p>C型房车的种类百花齐放，售价从十几万到几十上百万都有，其底盘以轻客和皮卡为主，也有采用卡车作为底盘的，空间更大但驾驶感较差。小货车底盘的房车售价较低，但通常动力很差，也鲜有自动挡的选项，而且小货车载重能力有限，无法携带很多水、安装容量更大的生活电池，空间也很难做大，只适合一到两人使用，而且开车要佛系。</p><p>例如新飞集团的祥菱房车，不带卫生间的版本仅售 9.98 万（带独立卫生间 10.58 万），应该是国内最便宜的 C型房车了，当然配置肯定很低没法用，我个人预估整备到能正常用的程度后大概总成本在 15 万左右，轻松圆房车梦。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/cac9845354bec18b1d1acb596abf94aa?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/cac9845354bec18b1d1acb596abf94aa?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)新飞祥菱房车</p><p>另外很多高端 C型房车会有拓展设计，在驻车时拓展机构可以展开带来更大的额外空间，不过其复杂的拓展结构可能会增加故障率，接缝部分年久老化后会带来漏水问题，一些小厂的拓展房车甚至连淋雨测试都做不好。</p><p>![](<a href="https://cdn.sspai.com/2022/07/01/article/f97d1420a61db386213ef518790dfa55?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/07/01/article/f97d1420a61db386213ef518790dfa55?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)奇瑞瑞弗的双拓展房车</p><p>拖挂房车是很多老炮的钟爱，也是欧美房车市场的主流选择，在美国市场甚至 90%以上都是拖挂房车，因为拖挂房车没有驾驶室、底盘没有传动系统，因此空间利用率更高居住更舒适，布局也更加灵活。在我国，虽然人口密集、多山路的东部和南部地区并不适合拖挂行驶，但地广人稀、风景壮阔的大东北、大西北和川藏地区和美国的道路情况比较类似，而且这些地方相对来说基础公用设施较差，很适合空间大、装载能力更强的拖挂房车行驶。国内常见的拖挂玩法是开一个SUV 再牵引一个拖挂，到一个地方把拖挂停在方便停车的郊区，然后脱掉房车开着 SUV 进城玩耍。</p><p><img src="https://cdn.sspai.com/2022/06/30/fc1c87f1d6df0ff2d226d96a82ebdb8e.jpeg" alt>各式各样的拖挂房车</p><h2 id="Q2：房车的驾照、保险与上牌"><a class="header-anchor" href="#Q2：房车的驾照、保险与上牌">¶</a>Q2：房车的驾照、保险与上牌</h2><p>对于自行式房车，只要是长度在 6 米以内、上蓝牌的车辆都是 C1 照即可驾驶（自动挡 C2 可驾驶），保险和上牌与家用轿车的费用和流程是差不多的。</p><p>对于拖挂房车，则需要另外考取 C6 驾照才能驾驶（或持有 A2）。根据《道路交通安全法实施条例》第 56 条，「小型载客汽车只允许牵引旅居挂车或者总质量700 千克以下的挂车。」有的小伙伴可能会对这条产生误解，以为只能拉 700 公斤以下的房车，其实这里提到了两个不同的概念：旅居挂车和 700公斤以下的挂车，他们同属于挂车。​旅居挂车就是我们说的拖挂房车，而根据 C6 驾照的准驾要求，可以驾驶的是轻型牵引挂车且两车相加小于4500KG，轻型的定义是 750KG-4500KG。至于 700KG 以下的挂车则属于微型挂车了。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/7a8a8d9256fd219b42c6bafed1cd981e?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/7a8a8d9256fd219b42c6bafed1cd981e?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)不同类型挂车的定义</p><p>根据 2020年实施的公安部公共安全行业标准，挂车也属于机动车，因此拖挂房车也是需要上牌的，而且上牌流程和家用车基本一致，需要注意的就是拖挂房车上牌不需要拖挂的交强险，这点在下面细说；然后有的小检测站可能没有检测过拖挂房车所以会不给你检、有的车管所会要求先交购置税再检测等。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/c56167ce5f147e0a3f185a7fd01ec086?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/c56167ce5f147e0a3f185a7fd01ec086?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)拖挂也属于机动车</p><p>需要明确的是，根据《道路交通安全法》，拖挂房车是不需要投保交强险的，交强险和牵引的前车共享，如果交强险的额度不够赔偿，再由拖挂的商业险进行承担。所以我们只要购买拖挂房车的商业险就好了。不过由于拖挂还不流行，所以很多小城市的保险公司业务员根本不知道怎么给拖挂房车上保险，他们很可能会给你上特种车辆的保险，这种保险是很贵的，一定要沟通好。一辆十几万的拖挂房车，三者险加车损险一般1500 元以内就可以搞定。​</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/7f3cf484904844e92eeb1de2cb824d4f?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/7f3cf484904844e92eeb1de2cb824d4f?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)拖挂无交强险</p><p>在给拖挂房车上牌时也不需要提供拖挂的交强险，但要提交前车的交强险，这里要注意的是，拖挂房车可以由任意车辆牵引，上牌时上交当时牵引车的交强险即可，不一定非得是你自己车辆的交强险。</p><h2 id="Q3：房车能代替租房吗？"><a class="header-anchor" href="#Q3：房车能代替租房吗？">¶</a>Q3：房车能代替租房吗？</h2><p>​​除了游玩以外，近年来开始有越来越多的人产生了用房车代替租房甚至买房的想法，因为在大城市租一个居住环境和地理位置比较好的房子房租不菲，而买一辆三十来万的房车，或者同级别二十来万的二手房车，不仅有了一个自己的居所，还有了自己的一辆车，可谓一举两得。</p><p>然而这个问题其实没有标准答案，因为房车生活的一些缺点对一部分人来说可以接受，一些优点对一部分人来说反而是缺点， <strong>这是由不同的工作性质、生活品质要求等条件决定的</strong>。​</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/10fd9bfa65ed09a3ece3729a6ac38ab0?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/10fd9bfa65ed09a3ece3729a6ac38ab0?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)你能接受长期住房车吗？</p><p><strong>​ 先说房车的成本</strong>。</p><p>​想用房车代替租房，有这个想法的朋友，应该是想省钱同时又拥有一定现金的，可以认为平时生活条件过得去，薪资水平不错，对生活品质有一定要求。这样的话，廉价房车和豪华房车就不考虑了。因为廉价房车故障率、空间、使用便利性等方面不足，会影响居住体验；而豪华房车则脱离了省钱的初衷。</p><p>综合这两方面的考虑，一辆水电配置过关、动力不拖后腿的大品牌准新二手房车是一个很好的选择，目前在国内 20万左右可以买到，使用年限在两年以内，但以手动挡居多。</p><p>这个价位的二手房车成色非常新，很多在 10000公里以内，「房」的部分也基本没有使用痕迹，简单翻新消毒就可以使用，而且还在保质期内，到手可以去厂家检测一遍，有什么问题立马走保修解决。而且购置二手车可以挤掉房车售价中的水分，也没有购置税，以后想售出时，贬值幅度也大大小于购买新车。</p><p>这个价格已经预估了升级配置的预算，配置方面基本足够日常使用，包含了微波炉、冰箱等基本电器和七八度左右的电源，如果是配置很低的素车，入手成本还会更低。</p><p><strong>然 后是用车成本。</strong></p><p>房车的保险大约 5000 元一年，油费可以自己按需求计算，保养大概平均一年 1000元。其它的使用成本，例如房车马桶要用降解剂这类，我认为租房也会有类似的固定成本，就不另外计算。</p><p>还有最关键的停车成本，这个可能是决定你能不能用房车代替租房的关键因素。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/c00e10aac4143feaaaa9abdb5165267c?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/c00e10aac4143feaaaa9abdb5165267c?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)你能在公司附近找到合适的停车位吗？</p><p>我有一位关注者就是实践用房车代替租房的车友。他在某一线城市的高新区上班，公司里车位充足，有免费 Wi-Fi覆盖，离公厕很近，接水或排放废水也方便。他车上的电可以使用一个多星期，快没电了就开到旁边的充电桩充满电再开回自己车位。最关键的是他们公司的车位是免费的。其实以他公司停车位对房车的友好程度，即使车位要收取一定费用都是令人满意的。</p><p>对他来说这种生活方式唯一的缺点就是加班变多，并且变得理所当然。</p><p><strong>然 而这样的停车条件对于很多上班族们来说应该是不太现实的----离公厕近、离充电桩近、车位不紧张、停车免费或费用低</strong>。对于在市中心上班的人来说，可能有个车位都太难，遑论上述这几个条件了。</p><p>还有一个很容易被忽视的成本是房车的贬值，虽然购买二手房车可以很大程度上减缓这方面的损失，但也并不是小数目。这个成本并不是很好估算，据我对二手房车市场的观察，一辆二十万左右的二手房车，购买后每年的贬值金额大约在1 万左右。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/b035b4459274a58f017ced22dceab647?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/b035b4459274a58f017ced22dceab647?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)房车办公</p><p><strong>再 说长期居住在房车的舒适性。</strong></p><p>6 米长、2 米宽，这大约是 C1 驾照可驾驶房车的最大尺寸，如果是有额头床的 C 型房车，那么可使用面积就是 12 平米；如果是没有升降床设计的 B型房车，扣掉车头部分之后，使用面积大概在 10 平米。</p><p>虽然面积小，但房车的好处是五脏俱全，有洗手间、床、厨房、办公区。</p><p>我曾在某一线城市市中心租过合租房的单间，800 元的月租只有一个8平米左右的隔间，卫生间和厨房是公共区域。和这比起来，房车的居住舒适性是远远超过的，而且隐私和安全方面也更安心。</p><p><strong>当 然，从另一方面也可以说房车小小的空间里什么都有，什么都并不完整</strong>。</p><p>生活便利性是居住舒适性的另一决定性因素，这一方面，租房基本是可以打败房车的。房车的水、电、燃料全部都要自己补充，而且补起来并不方便。生活用水只能去公厕接来后输进房车水箱里；用电方面冬天还好，耗电不大，需要用空调的夏天，每天都需要充电，要么着几小时车把电充满，要么找充电桩；燃料方面也还好，对大多数喜欢叫外卖、偶尔做饭的上班族来说网购几箱丁烷气罐足够用很长时间，微波炉也能解决很多速冻食物，但如果你喜欢每顿都自己炒菜的话，房车就与你无缘了，因为目前国内这个价位还没有能解决车内炒菜的油烟问题；如果在车外炒菜，第二天应该就会被停车场赶走了。</p><p>在这些问题上，房车不仅要付出更多的精力去解决，耗费的成本也是要大于租房的。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/466433bf8d21dd045a3908446cd965cd?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/466433bf8d21dd045a3908446cd965cd?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)房车生活需要更强的动手能力</p><p>此外，如果长期住在房车里，必定会面临很多问题，可能某天冰箱突然不工作了，或者窗户漏水了等等。租房当然也会遇到这些问题，但房车上出现的概率会高很多，毕竟每天风吹日晒的。如果你没有一定的动手能力，那么这些小问题也会很影响心情。</p><p>长期居住在房车的另一大缺点，是天气对房车舒适性的影响要远大于房屋。因为房车无法提供和砖瓦混凝土相提并论的物理保护能力。当遇到强风、冰雹、大雨、冰雪和台风等恶劣天气时在房车里的体验会非常差，甚至危险。不说恶劣天气，仅仅下雨天时，雨滴落在车顶的噼啪声可能也会让部分人崩溃。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/aadb5244caa82fc66f8cf4404f39aac7?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/aadb5244caa82fc66f8cf4404f39aac7?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)恶劣天气对房车的影响更大</p><p>房车生活自由的理念吸引了不少年轻人：全部家当都在四个轮子上，这让他们可以不用忌惮跳槽搬家带来的繁琐和损失；他们可以省下大量的通勤时间，在周末时可以开着房车去郊区甚至周边城市度假。</p><p><strong>但另一方面，长期居住在房车的生活方式并不适合所有人</strong>。咱们中国人注重安土重迁、落叶归根，有一个自己的房子是大多数人的愿望，房车这种像浮萍一样的生活会让这类人感到不舒服或者焦虑。</p><p>无论如何，房车代替房子并不是件可以轻易下决定的事情，务必要结合自己的实际情况再做定夺，最好先租一辆房车体验一段时间。</p><h2 id="Q4：电动房车是房车的未来吗"><a class="header-anchor" href="#Q4：电动房车是房车的未来吗">¶</a>Q4：电动房车是房车的未来吗</h2><p>国内房车起步较晚，正好也赶上了近几年新能源汽车爆发的时间。自然而然地，电动房车也进入了我们的视野。</p><p>那你应该考虑一辆电动房车吗？</p><p><strong>如 果让我来说房车最大的缺点是什么，那就是电太不够用了----尤其是夏季</strong>。无论是房车市场成熟的欧美国家还是在国内，长期驻车的情况下水电难以自给自足都是个大问题，这其中又以夏季的用电最难解决。</p><p>因为在冬季取暖可以使用化石燃料，储存方便效率也高，而在夏季降温就只能用电了，而且由于房车的保温隔热性能远不如房屋，所以空调只能长时间在最大功率运行，耗电量奇高，主流价位房车携带的电池绝大部分都在20 度以内，这点电最多只能坚持两天，而且大部分平价房车携带的电池只有 10 度左右。</p><p>国外的解决方式是遍布全国的营地，短期内我国不可能实现。目前我国房车充电的方式，正在从小功率行车充电配合太阳能及交流慢充向大功率行车充电配合充电桩快充的方向发展，但成本低且无需改装的前者依然占据主流，这意味着大部分房车的充电效率很低，无法在夏季支撑每天开着空调驻扎，即使有交流充电桩，长期占用既不现实也不道德，且充电桩所在的位置一般也不适合房车驻扎。</p><p>所以我国房车的玩法长期以来都是「候鸟式」的，即炎热的夏季就去往气候凉爽的地区。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/5e3aa0ff2cb73bdadbfe220b2de929a3?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/5e3aa0ff2cb73bdadbfe220b2de929a3?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)电车配拖挂可能是现阶段比较好的方案</p><p>那电动房车是房车的未来吗？</p><p>电动房车必定自带几十度甚至 100度以上的电池（房车可利用空间大）和快充系统。这些电足够房车空调无忧使用一周以上，并能留下足够的电量从驻扎地去往充电站快速补满电。而且电车扭矩大的特点刚好可以弥补大自重的房车起步不灵活的缺点。</p><p>其实我认为在现阶段，增程式混合动力的车型最适合做成房车。房车自重很大，起步时油耗极高、灵活性极差，电机刚好可以弥补这两个缺点；增程系统相当于自带了小几十度电加一个发电机，随时可以补电，真正做到了电能上长期自给自足；房车以长途旅行为主，而且体型太大，与地下停车场充电桩和大部分小型充电站绝缘，没有充电焦虑的增程式就很完美了。</p><p>当然，由于房车重量大的关系，续航里程必然不佳，但现在电池封装技术也在飞速发展，而且房车的空间也能装下更多电池，所以我对这个问题的解决很有信心。</p><p>电动房车另一个好处是能节约可观的旅行成本，因为房车大多是长途行驶的，而且油耗基本是家用车的两倍，换成电动后能省不少油钱。</p><p>![Vision Vehicle Fuel-Cell Electric RV Is A 300-Mile Wheeled SmartHome](<a href="https://cdn.sspai.com/2022/06/30/article/099b9fd7091cc3fd2d163af0c26639b4?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/30/article/099b9fd7091cc3fd2d163af0c26639b4?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)电动房车在市场成熟的欧美也处于起步阶段</p><p>不过在现阶段，无论是国内外都极少有电动房车，因为虽然现在纯电轿车、纯电 SUV 已经普及，纯电 MPV 也开始发力，但适合用作房车底盘的纯电车型还没上市。</p><p>有的朋友会说现在没有电动房车是因为房车销量太小，没有厂家会针对这个小市场做电动房车，但我不认同这个观点，因为房车并不是像传统车辆那样从底盘、车身开始，从零立项研发的，而是直接在现有车型的基础上通过改装的方式安上「上装」部分（即房车中房的部分）完成一辆房车开发的。</p><p>例如其实早在 2019 年就有房车厂以吉利增程式卡车底盘为基础改装房车了，但由于该底盘本身技术并不成熟因此反响不大。</p><p>国内房车底盘以皮卡、小型货车、厢式货车、轻型卡车等车型为主，而这些车辆类型成熟的纯电版本目前市面上很少（直接安个电池就叫电动货车的那种不算），适合改装成房车的就更少了，所以现在电动房车极其稀有，消费者基本没有选择，等到各大厂商的电动皮卡（对应C 型房车）、厢货（对应 B 型房车）开发成熟，房车厂家自然会采购电动车型作为房车底盘进行改装，到时市面上就会有很多电动房车开始涌现了。</p><h2 id="附：主流价位房车推荐"><a class="header-anchor" href="#附：主流价位房车推荐">¶</a>附：主流价位房车推荐</h2><h3 id="德发圆梦-365L（4-98万）"><a class="header-anchor" href="#德发圆梦-365L（4-98万）">¶</a>德发圆梦 365L（4.98万）</h3><blockquote><p>仅 5 万的入门拖挂房车。</p></blockquote><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/9e6f0acae915b40e7cbe0e5c229e8a68?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/9e6f0acae915b40e7cbe0e5c229e8a68?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)德发365</p><p>这款拖挂式房车采用中置单轴设计，牵引车动力排量 1.8 升以上的车辆均可进行牵引，车内空间最多能够满足 3 人居住需求，不过推荐一到二人使用。厢体尺寸为3650<em>2100</em>1800(mm)，轮胎参数为 185/R14。</p><p>这辆车特点是采用德发自主研发生产的房车专用底盘，没用进口底盘，所以成本控制比较好。底盘进行了喷塑处理，防锈性能比较好。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/1fbfa7dbe9d5c24ea23248d2f615b8a6?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/1fbfa7dbe9d5c24ea23248d2f615b8a6?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)户型图![](<a href="https://cdn.sspai.com/2022/06/29/article/7b611debb4b3ee83d051b45686bb588c?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/7b611debb4b3ee83d051b45686bb588c?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)布局</p><p>车内布局是比较经典的车尾部双人铺+卫生间+车前部环形卡座沙发（卡座放平后是单人铺）+开放式厨房，床铺配有阅读照明灯，USB充电口、床下及顶部均带有储物柜，衣物和床上用品等可以放置其中。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/4261327f4c91f80ae179763949d9d8e7?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/4261327f4c91f80ae179763949d9d8e7?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)卫生间</p><p>遗憾的是卫生间空间比较局促，不过配置还算齐全，有洗手池、淋浴花洒、梳妆镜、便携马桶、储物柜、储物架等，简单洗漱冲澡没问题。​</p><p>配置方面标配的是 80L 清水箱、80L 灰水箱、100W 太阳能、双向换气扇、1000W 充逆变一体机、100AH 胶体电池（标配无备胎）。</p><p>电力方面配置很弱，如果用新能源车拖的话无所谓，花 1 万购置空调和厨房相关电器即可，用油车拖的话还要再花 1 万左右升级电池和逆变器。</p><h3 id="新飞祥菱房车（10-54-万）"><a class="header-anchor" href="#新飞祥菱房车（10-54-万）">¶</a>新飞祥菱房车（10.54 万）</h3><blockquote><p>仅十万的入门自行式房车。</p></blockquote><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/120fdd517ddee93240b8559a52f827f8?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/120fdd517ddee93240b8559a52f827f8?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)车友实测开到西藏没问题</p><p>​本车基于福田祥菱微卡底盘打造，总质量 2.9 吨，采用 1.5 升汽油发动机、后驱、手动变速箱，核载 6 人，动力孱弱，因此车身长度较小，整车尺寸为5260<em>1835</em>2650mm，但五脏俱全，卫生间、厨房、会客区、床铺等关键设施齐全，且空间并不小。当然储物空间相应的会比较少。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/edac48cdfd1a0e07346015d84e4bd341?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/edac48cdfd1a0e07346015d84e4bd341?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)厨卫区![](<a href="https://cdn.sspai.com/2022/06/29/article/c79fa395a21831d4d72eb870cb9c261b?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/c79fa395a21831d4d72eb870cb9c261b?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)客厅![](<a href="https://cdn.sspai.com/2022/06/29/article/741130d244bb2a8d62f32806af2c2088?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/741130d244bb2a8d62f32806af2c2088?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)会客区可以拼床</p><p>配置上，这个价格不用想太多，标配 150AH 铅酸电池、1000W 逆变、清水箱 110L、灰水箱67L、电磁炉、洗手池、星光顶灯。这个配置无法到手就玩，自行加装到可使用的成本需3.5 万左右。</p><h3 id="新飞全顺-B-型房车（19-98-万）"><a class="header-anchor" href="#新飞全顺-B-型房车（19-98-万）">¶</a>新飞全顺 B 型房车（19.98 万）</h3><blockquote><p>二十万级别自行式房车。</p></blockquote><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/e1c66f421f64804cb8e75068da09c993?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/e1c66f421f64804cb8e75068da09c993?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)​B型车外观低调</p><p>依然是来自新飞集团的一款房车，这应该是目前市面上最便宜的全顺底盘房车了，起售价 19.98 万。整车尺寸 5341<em>2032</em>2407mm，内高约1700mm，C1 驾照可以驾驶。为了压缩成本，整车采用原厂色调，没有任何拉花等修饰。​</p><p>动力方面采用的是 2.0T柴油发动机，5 速手动变速箱，额定功率 90KW，油箱大小70L。车身外部配有遮阳棚、户外照明、电动踏步、房车专用加水口、充电口等。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/96d0b9980e2bcc63f4f977be9a6edaf6?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/96d0b9980e2bcc63f4f977be9a6edaf6?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)驾驶室![](<a href="https://cdn.sspai.com/2022/06/29/article/b4611d54fdf4c8bb0766fb99ddab6069?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/b4611d54fdf4c8bb0766fb99ddab6069?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)会客区​![](<a href="https://cdn.sspai.com/2022/06/29/article/5b94279e75da5a6706e22c957950b09a?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/5b94279e75da5a6706e22c957950b09a?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)纵床布局![](<a href="https://cdn.sspai.com/2022/06/29/article/e9be9a9a3241806ae16f6195c24848d6?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/e9be9a9a3241806ae16f6195c24848d6?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)横床布局![](<a href="https://cdn.sspai.com/2022/06/29/article/e7c3566ef4f6e86bf10ca2851f5e26b7?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/e7c3566ef4f6e86bf10ca2851f5e26b7?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)卫生间</p><p>上装部分有后横床和纵床布局，可以根据需求灵活选择，个人比较推崇横床布局。会客区配有电视、换气扇、商务座椅及 12V制冷空调。厨房区配备冰箱、电磁炉、洗菜池等设备，安装有 220V 插座和射灯。纵床布局的床铺尺寸为 1650<em>800mm，可以拓展为2200</em>1100mm，勉强可以睡两个成年人。受限于空间，卫生间采用推拉式卷帘门设计。​​</p><p>配置方面，标配 105L 清水箱和 40L 灰水箱、105AH 铅酸电池、1000W逆变器、电热水器、电磁炉、便携式马桶、车载冰箱、倒车影像等。配置很低，提车后加装到使用配置大概还要花 2-3 万元。</p><h3 id="览众长城炮（汽油四驱、自动挡、31-88-万、柴油加-1-万）"><a class="header-anchor" href="#览众长城炮（汽油四驱、自动挡、31-88-万、柴油加-1-万）">¶</a>览众长城炮（汽油四驱、自动挡、31.88 万、柴油加 1 万）</h3><blockquote><p>三十万级别自行式房车。</p></blockquote><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/21acab964d02917226c5da61d1740da7?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/21acab964d02917226c5da61d1740da7?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)外观</p><p>整车尺寸 5990<em>2190</em>3030mm，蓝牌 C 本可以驾驶。底盘配置上颇有亮点，柴油版搭载 2.0T 柴油涡轮增压发动机，最大功率120kw，峰值扭矩 400nm；汽油版搭载 2.0T 的汽油涡轮增压发动机，最大功率 140kw，峰值扭矩 360nm；两者都采用采埃孚 8AT自动挡变速箱。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/a26b0e2ad5e008394924c2ac9502a4a1?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/a26b0e2ad5e008394924c2ac9502a4a1?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)驾驶室</p><p>本车还采用了 TOD 电控四驱系统，带有中央差速锁以及后桥电控式差速锁，接近角 29 度、离去角 21 度。最小离地间隙227mm，脱困性和通过性比较好。主驾支持六向电动调节，副驾支持四向电动调节，配备安全气囊和侧气囊、无钥匙进入、９寸的中控大屏、多功能方向盘、定速巡航、胎压监测、ABS+EBD+TCS+RMI+ESC。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/ff3ce12028407f7c0bfc4d2acf3d6fea?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/ff3ce12028407f7c0bfc4d2acf3d6fea?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)A布局![](<a href="https://cdn.sspai.com/2022/06/29/article/df2bc1c978a9cf6b04db3e2e14b750d8?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/df2bc1c978a9cf6b04db3e2e14b750d8?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)​B布局</p><p>这款车有 A、B 两种布局，A布局会客区位于车厢中部，采用常规的四人对向卡座搭配升降餐桌，会客桌可扩展和收纳，可以拼成一张尺寸为 1700*900mm床铺；B 布局的会客区则移动到了尾部区域，采用对坐式沙发设计，中间配有会客桌，在沙发垫的后方是隐藏式可翻转床板，可变成上下铺单人床，下铺也可以对坐沙发拼床。</p><p>![](<a href="https://cdn.sspai.com/2022/06/29/article/593f3c04b53022bded35b7c0bf433171?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/593f3c04b53022bded35b7c0bf433171?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)额头床![](<a href="https://cdn.sspai.com/2022/06/29/article/af39ea5a1319e265dacf7eaf1cba37a1?imageView2/2/w/1120/q/40/interlace/1/ignore-" target="_blank" rel="noopener">https://cdn.sspai.com/2022/06/29/article/af39ea5a1319e265dacf7eaf1cba37a1?imageView2/2/w/1120/q/40/interlace/1/ignore-</a>error/1)卫生间</p><p>配置方面，标配 150L 净水箱，50L 灰水箱、240AH 锂电、3000W 充电逆变一体机、24英寸液晶电视、回音壁、电磁炉、洗菜池、抽油烟机、微波炉、85L 冰箱、顶置空调、遮阳篷、房车专用马桶、洗衣机等。除了电池比较小以外，其他配置都比较齐全。</p><p>以上便是本文的全部内容，如果你有任何相关的问题或疑问，欢迎在评论区留言交流。</p><blockquote><p>下载 <a href="https://sspai.com/page/client" target="_blank" rel="noopener">少数派 2.0 客户端</a>、关注<a href="https://sspai.com/s/J71e" target="_blank" rel="noopener">少数派公众号</a>，解锁全新阅读体验 📰</p></blockquote><blockquote><p>实用、好用的 <a href="https://sspai.com/mall" target="_blank" rel="noopener">正版软件</a>，少数派为你呈现 🚀</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://sspai.com/post/74043&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;走进小众但不冷门的房车世界&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」从盲目崇拜到理性使用，谈谈我眼中的「双向链接」</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-11-143137724795/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-11-143137724795/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://sspai.com/post/73407" target="_blank" rel="noopener">从盲目崇拜到理性使用，谈谈我眼中的「双向链接」</a></p><a id="more"></a><p><strong>Matrix 首页推荐</strong></p><p><a href="https://sspai.com/matrix" target="_blank" rel="noopener">Matrix</a>是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。<br>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p><h2 id="写在前面"><a class="header-anchor" href="#写在前面">¶</a>写在前面</h2><p>这两年，「双向链接」简直就是知识管理领域的流量明星。</p><p>资本追捧它，认为它具有巨大的商业潜力。2020 年，<a href="https://sspai.com/post/72995" target="_blank" rel="noopener">Roam Research 收获 A 轮融资 900万美元，估值超两亿美元</a>，投资者中不乏资本圈的知名人士。几款亲民的平替软件，如RoamEdit、Logseq 也在 Roam Research 耀眼的光辉下，承其精华顺势而生。一些具备强大的链接功能，又做出自身特色的知识管理软件，如Obsidian、Remnote 一跃而起，在各自领域收获了一批忠实粉丝。传统的行业头部软件也不甘示弱，优雅简约的老牌大纲软件 Workflowy已将反向链接和镜像复制功能完美嵌入，小而美的日程管理软件 <a href="https://sspai.com/post/72479" target="_blank" rel="noopener">Agenda 在 v14更新里也把双向链接功能加进新版本</a>。此外，我们非常熟悉的、主打 Database 功能的Notion，和主打颜值的块编辑器软件 Craft也毫无悬念地都支持双向链接，加上一些我们熟知的国产软件，双链笔记家族的规模可谓前所未有地壮大。时至今日，一款立足文档编辑或知识管理的软件绝不能对双链功能视而不见，毕竟后者的地位早已从一个有附加值的亮点功能，变成了许多用户的「一票取舍」。</p><p>如果我们再往下思考一步，就会发现无论是概念层面，还是实践层面，「双向链接」都是早已有之的东西；功能上，很多双链能够做到的，其他方式也能轻松替代。但不得不承认的是，键入双括号构建双链的丝滑便捷又是真切可感的，「双向链接」这个功能的确给笔记软件增添了前所未有的使用体验，许多深度体验过的用户不是无脑尬吹，而是发自内心地喜爱和推荐这类产品。</p><p>有关双向链接的话题，不少朋友都已经深入讨论辨析过，尤其是王树义老师、和燕燕、吕立青、空谷、yuchen_lea等朋友的相关文章给了我许多启发。即便如此，我还是想用自己的思维框架再聊聊「双向链接」：</p><ul><li>「双向链接」到底是个什么东西？</li><li>它在软件层面是如何实现的？</li><li>它给我们带来的神奇体验是实打实的，还只是我们作为知识管理者的虚妄想象？</li><li>具体使用过程中，我们究竟是应该用双向链接，还是应该打标签？……</li><li>哪些软件更适合进行知识间的互通互联？</li></ul><p>以下就是我对这些问题的感悟和反思，错漏之处还请指正。</p><h2 id="一、「双向链接」到底是个什么东西？"><a class="header-anchor" href="#一、「双向链接」到底是个什么东西？">¶</a>一、「双向链接」到底是个什么东西？</h2><p>双向链接到底是什么？请用一句话解释。</p><ul><li>如果在物理课上回答，就是：从家能走到学校（从 A 到 B），从学校也能走回家（从 B 到 A）。</li><li>语文课上，就是：我中有你，你中有我。</li><li>美术课上，就是米开朗基罗的《创世记》：亚当将手伸向上帝的同时，上帝也在将手伸向亚当。（逐渐离谱……）</li></ul><p><img src="https://cdn.sspai.com/2022/05/23/e17cb3105070e4d598c203df3bf13616.jpeg" alt>米开朗基罗西斯廷教堂天顶壁画局部《创世记》</p><p>那么，回到知识管理领域，我们通常所说的知识的「双向链接」究竟是什么呢？</p><p>先不着急回答。我们以一个写日记的场景为例，从简化的模型开启双链的思考。</p><h3 id="原型：日记本里的「mini-双链」"><a class="header-anchor" href="#原型：日记本里的「mini-双链」">¶</a>原型：日记本里的「mini 双链」</h3><p>新年当天，你拿出了一个新笔记本，打算每天都记录一页日记。8 号那天，你一整天什么事也没做，于是就在第 8 页上写下了大大的几个字： <strong>1 月 8 日今日无事</strong>。</p><p>怅惘之余，你忽然想起来 3 号那天也什么都没干，写的是同样的日记内容，你想在同样的心情页面下方建立起关联，于是就在第 8 日的页面下方备注了一行小字： **见 1 月 3 日**。这样，你就在 A 点建立了一个跳转到 B 点的索引，建立了一个单向（从 A 到 B）的关联。</p><p>接下来，你翻回第 3 页，觉得应该在 3 号那天日记下方也补上一句： ** 见 1 月 8 日**。这个简单又贴心的索引，就是一个反向链接（从 B 到A）。两步做完，你就在自己的日记本里建立了一个双向索引，其内核就是「双向链接」。Bingo！轻轻松松，一个神奇的双链就这么创造出来了。</p><p>以上例子是一个最基本的思维模型，也是许多双链笔记软件主打的一系列炫酷外壳的核心。从 A 到 B，和从 B 到 A 的路径都打通了。如果一个人 <s>偷看你的日记本（大误</s>，他无论是翻到第 3 页，也是第 8 页，都会找到另一页，这就是双链。</p><p>（更多传统笔记的双向链接的思考，请参考 @和燕燕<a href="https://sspai.com/post/69671" target="_blank" rel="noopener">翻阅外公的活页笔记本，我对双向链接与卢曼笔记法感触更深了</a>）</p><p><img src="https://cdn.sspai.com/2022/05/23/908d108b867f02b102ee4f49e4c5b42c.png" alt>RoamResearch 主页上的经典示意图，蓝色连接线处等同于上文所说的双向索引（双向链接）</p><h3 id="去魅：双向链接无处不在"><a class="header-anchor" href="#去魅：双向链接无处不在">¶</a>去魅：双向链接无处不在</h3><p>既然我们把双链的基本模型搭建起来了，那么当下流行的双链笔记软件和它又是怎样的关系呢？是不是说，只有支持双链的笔记软件，才能提供笔记之间的相互连接？</p><p>答案是：no，no，no，前面讲了那么多，就是想用日记本的例子来说明，知识间的相互连接其实很普遍，也很简单！</p><p>不但传统纸质的笔记本可以通过两个「索引指示词」轻松链接两个知识条目。传统的 Word文档一样能做到：只要在一个文档里备注另一个文档的「存储路径」，另一个同样这么操作，那么我们完全可以自信地声称：这两个 Word 文档实现了神奇的双向链接。</p><p>此外，目前绝大多数笔记软件都可以为库里的每个文档，甚至是每个文本块、每条大纲节点生成一个专属的内部链接，通过在文本之间链接，同样可以实现轻松互联。</p><p>所以，我们对于「双向链接」的迷思随即消散 <strong>：不是只有打着「双向链接」旗号的笔记软件才可以进行知识之间的双向互联。毋宁说，几乎所有的笔记形态都可以实现这一点</strong>。双向链接这个概念在知识领域一点都不稀奇，就连缺乏技术工具的古代人，也可以轻松靠笔墨实现知识互联。</p><h3 id="辨析：什么是双链，什么又不是双链"><a class="header-anchor" href="#辨析：什么是双链，什么又不是双链">¶</a>辨析：什么是双链，什么又不是双链</h3><p>双向链接这个概念火了之后，在舆论的喧嚣中，还与其他不少其他时髦概念混淆起来。</p><p>比如，不少人在谈到「双向链接」到底有多牛时，势必就要以卢曼教授传奇的学术人生作为例证。但是，如果细加辨析，二者之间的关联其实是非常有限的。坦率说，我也直到读到@yuchen_lea 的这篇文章<a href="https://sspai.com/post/65273" target="_blank" rel="noopener">《请不要神化双链笔记》</a>，才意识到自己从来没有认真思考过卡片笔记法里，双向链接到底占有怎样的位置，之前只是简单地把两者混作一谈，当作定论囫囵吞下了。</p><p>再比如，具有酷炫视觉效果的「知识图谱」，似乎也是随着双链笔记一起流行起来的。不过二者归根结底仍是两种东西：没有双向链接也可以打造知识图谱，好的双链软件也可以不提供知识图谱功能；更不论知识图谱在这类笔记软件里是否具有实用性，在信息呈现上有哪些问题了。参见@和燕燕 <a href="https://sspai.com/post/67996" target="_blank" rel="noopener">《我们需要什么样的双向链接，它适合你吗》</a>？</p><p>关于双向链接不是什么，上面两篇文章里面已经有很详细的说明，在此不再赘述，欢迎自行翻阅。</p><h2 id="二、双链笔记软件：哪里不一样？"><a class="header-anchor" href="#二、双链笔记软件：哪里不一样？">¶</a>二、双链笔记软件：哪里不一样？</h2><p>既然从概念层面，双向链接不是个石破天惊的东西，那么在实践层面，双链笔记软件为什么又能够给我们带来如此丝滑的体验呢？</p><h3 id="正方观点-1：自动生成的「反向链接」"><a class="header-anchor" href="#正方观点-1：自动生成的「反向链接」">¶</a>正方观点 1：自动生成的「反向链接」</h3><p>首先我们来看，支持双向链接的软件，比起日记本、Word 文档还有不支持双向链接的笔记软件，多出来的核心功能究竟有哪些。</p><p>抛开那些花里胡哨的小功能，如果说真有什么是「双链笔记」这个名称下所独有的、核心的功能，那就是每当你在创建一个从 A 到 B 的链接时，它会自动帮你生成一个从B 到 A 的反向链接。虽然你还停留在 A 的页面上，但 A 和 B 之间的双向索引已经完成。</p><p>除了生成反向链接之外，此类软件通常还会在 B 的页面上，自动汇总链接到它的所有反链的信息，查看起来非常方便。</p><p>我们通常理解的「双向链接」主要就是通过 <strong>用 户主动加入一个链接，软件自动生成与之对应的反向链接</strong>来实现的。这里我简单地梳理了一下，看看双链软件究竟帮我们干了哪些事情：</p><ul><li>【第一步：连上】当我们建立了 A 到 B 的连接时，系统也帮助我们完成了 B 到 A 的连接。</li><li>【第二种：可见】我们在 A 页面可以看到 B，B 页面上也能看到 A。不用你再手动操作，效率更高。</li><li>【第三种：汇总】所有曾经链接到 B 的页面，都会在 B 页面上展现，因此起到了一个信息汇总、整合的作用。</li></ul><p>这个功能对于注重知识之间相互关联的用户来说，确实非常实用。等到你后续使用和查看的时候，双链笔记软件默默在后台做的一切，便会为你的思考赋予价值。尤其在大量收集、整理资料的时候，哪怕能省略一个简单的操作，也能极大地提升效率。否则，如果每一条都需要人工标注，哪怕你再重视这个效果，可能到头来也会因为繁琐而放弃。</p><h2 id="我想用一个比方来表达初遇双链时那种真切的心情。如果在日记本里，你在第-8-页写下「-见-1-月-3-日」的一刹那，第-3页的页面底部瞬间出现一行小字：-1-月-8-日今日无事，仿佛霍格沃兹的咒语一样，闪着微微的荧光。无论你有没有注意到它，点不点进去检查，它都一定会出现，从不缺席。见至此景，想必很多人也会为此感到欣喜"><a class="header-anchor" href="#我想用一个比方来表达初遇双链时那种真切的心情。如果在日记本里，你在第-8-页写下「-见-1-月-3-日」的一刹那，第-3页的页面底部瞬间出现一行小字：-1-月-8-日今日无事，仿佛霍格沃兹的咒语一样，闪着微微的荧光。无论你有没有注意到它，点不点进去检查，它都一定会出现，从不缺席。见至此景，想必很多人也会为此感到欣喜">¶</a>我想用一个比方来表达初遇双链时那种真切的心情。如果在日记本里，你在第 8 页写下「 <strong>见 1 月 3 日</strong>」的一刹那，第 3页的页面底部瞬间出现一行小字： <strong>1 月 8 日今日无事</strong>，仿佛霍格沃兹的咒语一样，闪着微微的荧光。无论你有没有注意到它，点不点进去检查，它都一定会出现，从不缺席。见至此景，想必很多人也会为此感到欣喜</h2><p>这确实是一个简单的操作，或许几行代码就能搞定，甚至连手动操作也可以完成。但正是因为我们之前没有留意过它，所以当它问世时，才会因为简洁和直观而如此具有吸引力。</p><p><img src="https://cdn.sspai.com/2022/05/24/0e73a352881c06189398680351251c0e.png" alt><img src="https://cdn.sspai.com/2022/05/24/bca2024839a9b14665137570c90b8dc4.png" alt></p><h3 id="反方观点-1：可被替代的双链功能？"><a class="header-anchor" href="#反方观点-1：可被替代的双链功能？">¶</a>反方观点 1：可被替代的双链功能？</h3><p>双链笔记确实提供了一种快速链接的思路，可我们只能通过双链符号，才能在不同的页面之间建立关联吗？我们难道不可以加标签吗？不可以直接搜索关键词吗？效果难道不是一样的吗？</p><p>我们还从记日记这个场景入手，再来想一种常见的情景。</p><p>整个 1月份你都很颓废，好些天都无所事事。你想了想，干脆把所有类似心情的日子都关联起来吧！这样，不用逐页翻查笔记本，也能找齐这些日子。想做到这一点，方法很多。</p><p>我们最常做的方法，就是把日记本上的某一页当成索引页，标题就叫：「 <strong>今 日无事</strong>」。如果哪天你什么都没做，就会在当日页面上记下「 <strong>今日无事</strong>」，标注 <strong>索 引符号</strong>，然后再去索引页记下当天的日期。</p><p>这样一来，相当于「 <strong>今 日无事</strong>」被你设置成了关键词，而在它和所有相关日期之间都建立了联系。只要你查找名叫「 <strong>今日无事</strong>」的索引页，就会看到汇总在这个关键词下面的全部信息。</p><p>请注意，上面说的索引符号，如果使用双链功能，那就是我们非常熟悉的双方括号（ [[]] ）；如果使用其他软件，或是在双链笔记软件里，同样可以换成tag（#）符号，换言之，打标签的方式一样可以在上述过程中双向互联啊！那为什么还要双链呢？</p><p>这个问题涉及不同的软件设计，解释起来略有些复杂，我试着说一下我现阶段的理解：</p><ul><li>加双链和打标签在某种程度上是等价的。在许多双链笔记软件自己的理解中（感受最明显的是 Logseq），关键词前面用 # 符号和用 [[]] 都可以。换句话说，你想打标签就打标签，想加双链就加双链。</li><li>实际操作上二者还是有区别的。比如，对于主题词，如果你都是靠打标签的方式，那么软件里最好有个汇总标签的页面，比如 Obsidian 里的 tag 汇总插件，或是 Dynalist 里的 tag pane。这样，你才可以在某个地方直接找到全部标签。而双向链接不存在这个问题，你只要设置了主题词，那么这个词就变成了词条，你在词条页面下方随时随地都可以把关联到它的条目一次看全，还可以在里面随时增补信息，后一点是标签管理做不到的。</li></ul><p><img src="https://cdn.sspai.com/2022/05/24/5ac213cd19ea81cb9b15cf1466f44c95.png" alt><img src="https://cdn.sspai.com/2022/05/24/942159676769eca547181e10888e4a0a.png" alt></p><ul><li><p>适用范围也不太一样。有些场景是双向链接能做的，而标签做不到的。<br>再拿刚才的日记本举例。你并不想设置索引页，而是别出心裁，每次都回到第一次记录「今日无事」的页面（3 号那天），在那天的页面上标注新的日期。比如你翻开日记，第8 日、第 12 日、第 13 日都记着： ** 见 1 月 3 日**，而第 3 页下面则写着三行字： ** 见 1 月 8 日**、 ** 见 1 月12 日、见 1 月 13日**。这样，你就通过之前说的双向链接的方式，在这些页面之间建立了连接。这种方式虽然有点骚操作，但是确实是只有双向链接能实现的，因为你总不能把 1 月 3日设成标签： <strong>#1 月 3 日</strong>，那样的话你当天页面信息就损失了。<br>另外，实践中还有一个更常见的操作。如果你平时写过很多文章，想在某几篇文章里面提到彼此，那么在现有的条件下，在文章里加个双链就可以，再为此设计一个标签，未免太费事了。</p></li><li><p>哲学层面也有差异。双链功能构建的内容，是有主次地位的。在关键词条目和引用它的其他条目之间，就着原本与副本的差异。而标签则是一个没有原本的东西（以 tag 为主题词的搜索页面或可以看成原本），而在每个加 tag 的内容都是等价的。这两者的本体论差异，造就了其使用上的各种差别。（逐渐离谱……）</p></li><li><p>具体使用上，我们每个人对如何使用双链、如何使用标签、如何使用搜索是有独特喜好的，而且在不同的软件环境里，使用方式确实会有差异。这篇文章里就不再细说了。</p></li></ul><p>据此，在双向链接是否可以被替代这个问题上，我的观点是这样的：没错，虽然双链功能确实可以被替代（甚至连标签也可以不用，如果有一个强大的搜索功能，上述所有问题都可以在搜索页面完成），但任何工具并不一定具备有完全独创排他的功能、全新的适用范围和使用方式，才可以被称为好工具。<strong>双 链功能上虽然和先前的工具有所重合，可以被替代，但依旧不影响它在自己独特使用场合下丝滑柔顺、无可置疑的体验。</strong></p><h3 id="综合评价：双链笔记，用着是香"><a class="header-anchor" href="#综合评价：双链笔记，用着是香">¶</a>综合评价：双链笔记，用着是香</h3><p>结合上面的正反两点，我们会发现，我们没必要振臂高歌，赞誉软件里的「双链功能」是跨时代的伟大创举。但公允地评价，双链笔记在操作层面引入的便捷性也是真实存在的。</p><p>以我个人的体会，大多数人在描述双向链接的神奇之处时，他们表达的其实是一整套丝滑的流程：</p><ul><li>**便 捷的快捷键 **：轻松键入双方括号（ [[]] ) 添加主题词，这已经成为同类产品的标配；</li><li><strong>自 动化检索 + 搜索建议</strong>：软件会根据你的输入信息，进行全文档检索，为你提供可链接的主题词参考，确保你能够迅速锁定之前记录的信息；</li><li><strong>主 题词界面自动生成</strong>：哪怕之前你没有创建过该关键词，系统也能通过上述步骤直接为它生成一个页面，不用担心系统报错；</li><li><strong>支 持词条自动改名</strong>：如果你修改了主题词名称，所有链接里显示的名称也会同时自动修改；</li><li><strong>镜 像功能</strong>（这是 Workflowy 里的命名，即键入双圆括号 (()) 呼出的操作）：将之前的内容正文直接复制到新的页面下，彼此之间构成镜像，无论更改或删除哪一个，其他所有镜像内容均会实时改变。</li><li>……</li></ul><p>这一整套组合拳或许才是双链软件最让人感到惊艳、最离不开的地方。而且正是这些具体的功能使用起来是否方便、操作上是否顺滑，决定了某一款特定的双链笔记软件是否好用、是否强大，毕竟有些功能是一些软件拥有，而另一些目前没有，将来很可能也没有的。</p><p>在 Roam Research和其他众位双链笔记软件问世之前，我们不是不可以建立双向链接，而是操作的繁琐限制了我们的手脚，绝大多数人都不会手动给每个链接再匹配上它的反链，查询和修改也都有一定的时间成本（想一想翻日记本、找Word 文档的例子）。而在双链笔记一炮打响之后，我们开始使用这个功能，从而培养起知识互联的认知和使用习惯。</p><p>随着时间的推移，「双向链接」深入人心，变得不再神秘，甚至成为人人都了解、人人都会用的日常功能，但别忘记，它也在去魅的过程中潜移默化地影响了我们在知识积累、整理、记忆、输出时的方方面面，进而让我们对知识管理获得了更加深入的思考。</p><p>这就是麦克卢汉那句 <strong>「 媒介即信息」</strong>背后的涵义：工具的变革其实会潜移默化改变我们的思维。给文本之间建立起便捷易操作的双向链接，哪怕仅作为一个微不足道的设计上的进步，它的意义也是不可忽视的。</p><h2 id="三、双链笔记，我最爱用哪一款"><a class="header-anchor" href="#三、双链笔记，我最爱用哪一款">¶</a>三、双链笔记，我最爱用哪一款</h2><p>一本正经说了半天，最后加点私货，谈谈我在使用过程中总结的一点心得，以及我自己青睐的几款双链笔记软件。</p><h3 id="一点点使用心得"><a class="header-anchor" href="#一点点使用心得">¶</a>一点点使用心得</h3><p>我是从 21 年初入坑双链笔记软件的，初次邂逅的就是Obsidian，初遇的体验如同电光火石。我足足花了有一个月的时间，每天就像打了鸡血一样，摸鱼熬夜，把之前所有存在各个网络文档里的笔记、文章分门别类地制作成上千张概念卡，塞进了庞大的软件库里。每每想到无数张闪耀着智慧的卡片即将通过「双向链接」连成一片，发出夺目的光彩时，我就心神迷醉。</p><p>在此之后我像粉丝追星一样，按图索骥把一众支持双链的软件尝试了个遍，从 Craft、Notion，再到 Logseq、Remnote，再到Workflowy、Dynalist 等等。目前唯一的遗憾是迄今没有使用过业界王者 RoamResearch，心水了很久，但因为高耸入云的价格一直没有下定决心去买。</p><p>最开始使用双链笔记软件的阶段，我其实整个人是蒙的。有人推荐哪个软件好，我就屁颠屁颠去试用了，对自己的需求也不太了解，对软件的定位更无从把握。后来用得多了，可选的软件也多了，我开始从对特定功能的追逐，慢慢地去思考不同软件到底区别在哪里。以下是一点浅见，还不成熟，欢迎大家拍砖指正。</p><h4 id="双链软件的大体分类"><a class="header-anchor" href="#双链软件的大体分类">¶</a>双链软件的大体分类</h4><p>笔记类软件或知识管理类软件，在产品的基本结构上是有所区别的。</p><ul><li><strong>线 性 / 文本软件</strong>，如 Obsidian、思源笔记等。这一类在我理解，基本结构就是我们通常说的文档，类似于 Word。每个文档里面的内容是相对松散的，没有严格的层次关系或分区，所以通常情况下我们是把一整个文档视为基本单元的。</li><li><strong>大 纲型软件</strong>，比较直观的像 Workflowy、Dynalist 等，基本单元是一个个的大纲节点，呈现高度的结构化特征，彼此是有清晰的逻辑层级的。Roam Research 更是其中最知名的一个，Logseq、Remnote 也是。</li><li><strong>块 编辑器软件</strong>，如 Notion、Craft 等。基础结构是一个个的块（Block），每个块里都可以插入文本、图片、视频乃至表格等富文本信息。块的结构比文档的结构更小一些，但在块与块之间，通常不像大纲软件那样强调逻辑层级的。我个人感觉在知识链接上，类似软件体验一般，以下不多做讨论。</li></ul><p><img src="https://cdn.sspai.com/2022/05/24/8a1703d810b0afe9b66ad61344c426d8.png" alt><img src="https://cdn.sspai.com/2022/05/24/bffbefadfa93e4d3fc1ab55073e6bbcf.png" alt></p><h4 id="大纲软件的优势"><a class="header-anchor" href="#大纲软件的优势">¶</a>大纲软件的优势</h4><p>一旦划分好类别，我们就会直观地发现：大纲型软件相比于文本软件，天然就是最适合做双向链接的笔记软件，因为它的基本结构更细，所以可以用于链接的内容也更丰富了。这意味着，无论你的文档有多大，内容有多少，你都可以深入到它们内部，和里面的每一条大纲进行互联互动。而且，由于一般人很少会把大量的文本写进同一条大纲节点里（许多大纲软件的排版体验会让用户克制这种操作，换言之，频繁有这类操作需求的用户是不匹配大纲软件工具的），所以一条大纲的容量天然就是有限的，粒度----可以建立链接的基本结构----自然就是精细的。</p><p>与此相比，根据我们再熟悉不过的 Word使用体验，一个文本型软件的容量就要大得多了。你可以在里面放上一篇日记，也可以放进去一篇长篇小说。如果是后者，可想而知，这个文档的粒度就要远远大于一个大纲节点。</p><p>当然，文本型软件想要实现更好的粒度也不是没有机会。起码有好几种思路。一是设计者给文档里的每一行进行标记，比如说都标上行号，这样通过编码的方式，就能在文档内部细分到了「行」这个单位；二是给文档内部划分为「块」，比如说，如果用户设置了某一个区域的逻辑关系和大小标题，那么就可以把大标题覆盖的所有区域设置成为一个「块」，这样也可以直接「块引用」到这个部分。----当然，由于我没有深入研究过文本型软件的产品设计，这些思考只能算作是我个人的思想实验，但它们帮我很好地想清楚了我的需求是什么，以及我这样的需求应该匹配怎样的双链笔记软件。</p><h4 id="反链内容的实际呈现"><a class="header-anchor" href="#反链内容的实际呈现">¶</a>反链内容的实际呈现</h4><p>还有一个我个人高频使用的信息，那就是软件在反向链接处会体现哪些内容。还以日记本举例，当我们在第 8 页写下「 <strong>见 1 月 3 日</strong>」后，3号那天页面下面自动出现的，究竟是「 <strong>见 1 月 8 日</strong>」，还是「 <strong>见 1 月 8 日今日无事</strong>」，还是包括更多元的信息（如这个日记本的名称、8号那天页面上后来增加的其他内容），在不同的软件里是有差异的。在信息量更大、双向链接更多的情况下，这部分内容的设计就格外重要了。</p><p>涉及每个软件设计细节的内容我就不在此分析了，详细可见语雀作者 @Chief Torturer的文章：<a href="https://www.yuque.com/deerain/gannbs/ffqk2e" target="_blank" rel="noopener">《双向链接时代的快速无压记录》</a>，这位作者的想法给了我很大启发，该专栏下的所有文章都值得一读。</p><h3 id="私人红黑榜"><a class="header-anchor" href="#私人红黑榜">¶</a>私人红黑榜</h3><p>之前说过，我从 Obsidian 入坑双链，在里面积累了大量的素材。加上社区强大的插件支持，理论上说，Obsidian完全可以满足我的日常需求。不过，或许就是因为 Obsidian 太强、容量太大的缘故，我在日常记录时，经常很不情愿地打开Obsidian，感觉到一种无形的压力。另外，加上我最近需要在 ios、Android 系统间反复横跳，如果不加购 Obsidian的同步功能（涨价了，现在的价格有点超预算了），多平台同步确实有点问题。</p><p>能够出色解决这个问题的，目前是 Workflowy，就是那款老牌优雅的大纲写作软件。由于它多端同步很顺畅、本身也加入了双链的功能，对标 RoamResearch 的前两种（[[]] 、(()) ），对我来说完全够用。经由Workflowy，我意识到，大纲写作是多么无压、轻松；而且，省去大量修改格式的步骤，这样的使用对我这样一个排版强迫症来说，简直完美。另外，因为我日常有其他软件（如Agenda、Fantastical、Marginnote）做富文本笔记管理、日程管理、电子书阅读，所以我只用 Workflowy记录灵感、写日常计划和总结、汇总阅读清单、写文章打草稿列提纲等等内容，一旦引入双链，很多内容实现联通，效果杠杠的。</p><p>当然，我同时也还有使用 Logseq、Remnote，这两者在我看来基本上是等价的，它们各有一些闪光功能（Logseq 的 TODO功能可以自动计时，Remnote 强大的复习功能），存储方式有所差异（Logseq 本地、Remnote我用云端库），我不用使用得特别重，但是有需要的时候，因为数据传输也方便（Logseq 可以直接打开 md 文件，Remnote的导入也简单），所以也偶尔一用。</p><p>以上是非常推荐的软件，Roam Research 我可能很快也会入坑。</p><p>下面还有些我个人不太喜欢的使用体验，仅供参考。</p><p>像功能强大的块编辑器软件，如 Notion、Craft等，可以插入文本、图片、视频乃至表格等富文本信息，按道理应该用起来很爽。但根据我个人的使用体验，双向链接对于大多数块编辑器软件来说更像是一种附加功能，在知识的连接层面体验一般，尤其是在你非常关注知识链接本身，而不是积累内容的丰富程度和呈现美观度时，就会容易失望。</p><p>还有期待高、失望高的Dynalist，我本来用它作为大纲笔记软件，但无意中发现了它也支持双链功能。不过可能是因为双链只是产品设计的一个小亮点，在展示上，你会发现双链的页面呈现冗余信息很多，不过好玩的是，我正是因为Dynalist 这个「直白」的设计，才看清楚双向链接的本质原来就是内链地址搜索。当然，我最后弃坑的直接原因是多端同步快把我逼疯了，双链上，我觉得Dynalist 做得是有可取之处的。</p><p><img src="https://cdn.sspai.com/2022/05/24/d7dc175f20c4ceb2e2dd4b16e0e1eb91.png" alt>《叫魂》这个页面旁边提供了快速查看反链信息的设置（还可以点击进入页面底部查看）、虽不好看，但好处是告诉了我们反链信息的原理就是搜索！</p><h2 id="尾声"><a class="header-anchor" href="#尾声">¶</a>尾声</h2><p>用双链软件进行知识管理的这一年，我开始从对「双向链接」这个概念不加反思地追逐崇拜，到逐渐清楚自己的使用习惯、软件喜好、任务目标。站在今日，我知道未来我还会怀着饱满的热情，深度体验某款双链笔记软件，但那绝不是因出于双链的迷信，而只是出于对产品功能的体验、对尝试新事物的热爱。</p><p>以上，就是本文的所有内容，写了非常久，中间增删很多次，也有很多想法在写下来的时候才觉得不够成熟。但所有的一切，在写完的时候都觉得值了。这是我自己对「双向链接」一个阶段性的探索成果，希望未来还能有更多的领悟。谢谢大家的时间。</p><blockquote><p>下载 <a href="https://sspai.com/page/client" target="_blank" rel="noopener">少数派 2.0 客户端</a>、关注<a href="https://sspai.com/s/J71e" target="_blank" rel="noopener">少数派公众号</a>，解锁全新阅读体验 📰</p></blockquote><blockquote><p>实用、好用的 <a href="https://sspai.com/mall" target="_blank" rel="noopener">正版软件</a>，少数派为你呈现 🚀</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://sspai.com/post/73407&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从盲目崇拜到理性使用，谈谈我眼中的「双向链接」&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」创建自己的第一个 Power Automate 工作流，从此繁琐操作是路人</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-06-112955648077/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-06-112955648077/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://sspai.com/post/73710" target="_blank" rel="noopener">创建自己的第一个 Power Automate 工作流，从此繁琐操作是路人</a></p><a id="more"></a><p>编注：本文为《<a href="https://sspai.com/series/273" target="_blank" rel="noopener">59 分钟就上手 Power AutomateDesktop</a>》栏目的试读文章。可能是少数派目前最具「信价比」的栏目，介绍 PowerAutomate Desktop这款能把你从重复繁琐的软件操作中解脱出来的效率工具。欢迎前往<a href="https://sspai.com/series/273" target="_blank" rel="noopener">详情页</a>了解栏目的具体内容。</p><p>点击<a href="https://www.jianguoyun.com/p/DRKZb7gQyODhBxjdw8sEIAA" target="_blank" rel="noopener">链接</a>，下载文章中演示时所用到的文件。</p><p>在上一篇文章中，我帮助大家厘清了通过 Power Automate Desktop（下文简称 PAD） 来解决问题的基本思路，那就是「抽象问题 &gt; 确定目标</p><blockquote><p>思考解决方案 &gt; 在 PAD 中实现」。同时，我们也简单地了解了 PAD的工作区以及「数据」「变量」「控制结构」这些概念，通过掌握这些最基础的元素我们已经可以在 PAD 上创建一些简单的流了。</p></blockquote><p>那么，在第二节课程中我会带着大家一步步地创建一个流，通过这个案例让大家快速上手 PAD 的基本操作。另外，在本节课的最后我还为大家准备一份 PAD的调试指南，可以帮助大家利用一些基本原则来快速定位 bug 以及解决 bug。</p><h2 id="流（Flow）是什么？"><a class="header-anchor" href="#流（Flow）是什么？">¶</a>流（Flow）是什么？</h2><p>流（Flow）是 PAD 中工作流的基本度量单位，一个流即是一系列操作的一个组合。在 PAD的主界面中，我们看到的就是一个流列表，列表中的每一个项目都包含了流的名称、最近一次修改时间和状态。如果选中任意一个流，就会出现快速操作栏，在这里我可以对选中的流进行运行、停止以及编辑等操作。</p><p><img src="https://cdn.sspai.com/2022/06/17/de8c3fa824294bf25c005ee739b6fa16.png" alt></p><p>在 PAD 里帮你完整解决一个问题的流程就是流，至于流是简单还是复杂，那就丰俭由人。用 PAD 逐个打开京东、淘宝的网址，这个操作可以是流；用 PAD打开商品网址后，复制标题和价格到 Excel，这个操作可以是流；用 PAD 打开商品网址后，复制标题和价格到 Excel，然后把 Excel作为附件发送给自己，同时抄送给同事，这个操作也可以是流。因此，一个流中的动作数量和复杂程度没有任何限制，只要这个流可以解决预想中的问题，就可以称之为一个完整的流。</p><h2 id="怎样创建自己的流"><a class="header-anchor" href="#怎样创建自己的流">¶</a>怎样创建自己的流</h2><h3 id="验证需求"><a class="header-anchor" href="#验证需求">¶</a>验证需求</h3><p>一个 PAD的流从创建、调试到最终可用，都需要时间和精力去实现，这本身也是一种成本。而发明工具的最终目的还是要提高效率、解决问题，因此在动手创建流之前可以先想一想：</p><ul><li>这项工作是周期性的吗？</li><li>PAD 能为我节省多少时间？</li><li>根据工作的复杂程度，我想要完成创建一个流需要多长时间？</li></ul><p>比如现在你需要把 10 份 Word 文档中的数据汇总到同一个 Excel 中，这份工作可能几个月才需要做一次。这种情况下，用 PAD去编写一个流就非常不划算。但如果你每天、每周都需要做同样的汇总操作，手工复制粘贴就应该被机器来替代了，节省的时间累积下来会非常可观。</p><p>如上文的例子所述，如果评估完成本和收益后还是觉得使用 PAD 更划算，那我们再来认真学习如何创建一个流也不迟。</p><h3 id="三步定位"><a class="header-anchor" href="#三步定位">¶</a>三步定位</h3><p>上文提到过，我们可以把 PAD 理解成一种编程工具，而利用编程工具解决问题可以分为三步：</p><ul><li>抽象问题，确定目标</li><li>找出解决方案</li><li>翻译成机器看的懂的语言</li></ul><p>那么把这个流程应用到 PAD 上，就可以得到如下步骤：</p><ul><li>把自己要优化的流程手动多跑几遍，想清楚过程中自己的鼠标键盘做了什么操作，使用了软件内的什么功能，对流程中各处的情况有个基本的认知。</li><li>画出整个流程的「流程图」。如果工作流比较复杂，可以把工作流切分成不同的模块。前期对 PAD 了解不多的时候，可以抽象的层次放得更低一些，甚至到每一个具体的步骤。这里的「流程图」其实就是把整个流程拆成几个不同的模块并用箭头连接一下，方便逐个击破。</li><li>参照流程图分模块拼接流并调试。用 PAD 创建流的时候多想想人工操作在这一步会怎么做，然后再看怎么用 PAD 实现它。</li></ul><h2 id="案例演示"><a class="header-anchor" href="#案例演示">¶</a>案例演示</h2><p>假如说我有一个需求：给定一批京东商品的网址，逐个在浏览器上访问，然后截图保留快照到本地文件夹，最后把文件夹打包压缩。</p><pre><code>https://item.jd.com/100008716820.htmlhttps://item.jd.com/100001644698.htmlhttps://item.jd.com/100015047660.html</code></pre><p>按照上面说的三部定位法，我先想清楚这个问题需要怎么来解决，然后构思一个流程图，最后就是分模块构建，完成后再进行拼接。</p><p><img src="https://cdn.sspai.com/2022/06/17/e72489a744d32d7ee2c1d05c33c99750.png" alt></p><h3 id="明确流程"><a class="header-anchor" href="#明确流程">¶</a>明确流程</h3><p>这里的需求相对简单，多体验几次就可以直接生成下面这份流程图。我们大致可以将这个流程分为两个部分：Excel 读取、浏览器循环打开网址并截图。</p><p><img src="https://cdn.sspai.com/2022/06/17/ff2858560d6a1910cbe192c22f5ea5b0.png" alt></p><h3 id="分模块拼接"><a class="header-anchor" href="#分模块拼接">¶</a>分模块拼接</h3><h4 id="从获取商品网址列表"><a class="header-anchor" href="#从获取商品网址列表">¶</a>从获取商品网址列表</h4><p>首先我们需要做的是把相关的商品网址从 Excel 中提取出来。人工操作的时候，流程是「打开 Excel-选中所有 item -复制」。我们希望这个流通用性更强，因为每次 Excel 中的 <strong>商 品的数量应该是不确定的</strong>。那我们该怎样确保每次都能选中所有的商品网址列表？</p><p><img src="https://cdn.sspai.com/2022/06/17/262d41483b5554d336ceeb7b48bf4737.png" alt></p><p>这时我们就需要想想，在人工操作的时候我们是怎么来确定选中区域的范围的？其实很简单，只要找到文字和空白行交界的地方，从第一行到这里就是该选中的位置。</p><p>所以在 PAD 里面，我们可以先定位出表格里第一个空白行，然后提取表格里面第一行到「第一个空白行-1」范围之间的内容。</p><p><img src="https://cdn.sspai.com/2022/06/17/6cba21a8d0780a742d20350c99fcb0d8.png" alt></p><p>因为不同的模块是靠变量来传递信息的，上一个模块的输出是下一个模块的输入。上一个模块写好了，我们应该检查一下这个模块输出的内容是否满足我们的要求，如果不满足，则下一个模块也无法正常对接运行。</p><p>这里我们希望的输出是一个存放着所有需要遍历的网址列表 <code>ExcelData</code>，所以我们只需要观察在此部分模块结束时，<code>ExcelData</code>中的数据是否符合我们的需求即可。</p><p>点击「运行」，等待流执行完成。完成后在「流变量」区域点击<code>ExcelData</code>，发现数据类型的确是「数据表」，并且表中存放着需要遍历的所有网址，这就代表着这个模块我们已经创建成功了。</p><p><img src="https://cdn.sspai.com/2022/06/17/ef2cc4d9b12be06a30cdcafb348ec208.png" alt></p><h4 id="单条网址打开后截图保存"><a class="header-anchor" href="#单条网址打开后截图保存">¶</a>单条网址打开后截图保存</h4><p>正常来讲，此处应该直接开始编写循环结构，但这样每次调试都需要运行一次之前的步骤，既耗时又增加了调试的复杂度，和我们「分模块拼接」的思想是相悖的。</p><p>因此，在循环这个模块里，我们其实 **只需要一个存放着网址列表的变量输入。**为了方便下面的调试，可以全选上一个模块的动作，然后在右键菜单中选择「禁用操作」。</p><p><img src="https://cdn.sspai.com/2022/06/17/a991d2d9c0d5881c937bef77110c7fc3.png" alt></p><p>这样一来，我们可以专心先把循环这个模块搞定。循环的本质是把一项工作重复很多遍，那要想写好循环，其实我们只需要把里面的工作搞清楚就行了，也就是----给定一个网址，浏览器打开网址并截图保存。我们拿 <code>https://item.jd.com/100008716820.html</code> 举例子。</p><p>首先是用浏览器打开：</p><p><img src="https://cdn.sspai.com/2022/06/17/aa58f992a7ac975267fa171c63725a57.png" alt></p><p>通常浏览器打开一个网址还需要等待网页完全加载，网页加载不全的话截图也没意义，所以我们先人工加载一遍网页，估算网页加载时间大概在 2 秒，保险起见那我们就等3 秒。</p><p><img src="https://cdn.sspai.com/2022/06/17/5b40b147e38a3a0f82060926ef709f0d.png" alt></p><p>现在网页加载好了，我们该进行截图操作了。PAD 自己提供了三种截图的动作。</p><ul><li>获取屏幕截图：直接在屏幕的可视范围内截图。</li><li>获取网页的屏幕截图：会自动下拉完全网页，是网页的长图。</li><li>获取 UI 元素的屏幕截图：单个元素截图，暂时用不上。</li></ul><p>这里我们选择「获取屏幕截图」这个动作，多显示器的用户可以指定要截取的屏幕，单一屏幕可以直接选「所有屏幕」。</p><p><img src="https://cdn.sspai.com/2022/06/17/69c8725aeee1dd2b85288075ff6c51b8.png" alt></p><p>我们希望截图能够以文件的形式保存，那么就需要指定一个本地路径。这里的本地路径可以在目标文件夹内随意复制一个文件的地址后粘贴进来，然后修改最后的文件名和文件后缀。等截图完了，我们就可以关闭浏览器。</p><p><img src="https://cdn.sspai.com/2022/06/17/638db178bbb5d646eddb6410c6f7c64c.png" alt></p><p>当循环里的任务编写完后也需要做一次检查，点击「运行」看看目标文件夹内是否生成了对应的屏幕截图。</p><h4 id="编写循环任务"><a class="header-anchor" href="#编写循环任务">¶</a>编写循环任务</h4><p>我们现在尝试把单项任务放到循环里面。</p><p>首先，我们需要一个列表作为循环的输入。按照「分模块调试」的思想，我们应该另外创建一个存放网址的列表作为模块测试的输入源，避免前方动作耗时太长而降低模块测试的效率。不过，在这个案例中前方的动作数量较少，耗时不多，所以权且直接启用上一个模块的输出作为循环模块的输入。</p><p>接着，我们对 <code>ExcelData</code> 进行「for each」循环，每次循环到的网址储存到 <code>CurrentItem</code> 里面。</p><p><img src="https://cdn.sspai.com/2022/06/17/3f74b6d20383926333d9924950e12e82.png" alt></p><p>因为循环里每次打开的网址不同，所以我们需要将原来固定的网址 <code>https://item.jd.com/100008716820.html</code>变更为每次循环里的网址变量 <code>CurrentItem</code></p><p>点击「运行」，我们来看看是否这个模块按照我们的期望输出了三个商品的截图。很遗憾，没有。文件夹最后只有一张截图，这是因为我们所有的截图文件都采用了同一个文件名，每次新的截图把前一个覆盖直接掉了。</p><p>因此，我们需要让不同的截图拥有不同的名字。方法有很多，这里我想用网址中的数字编号来做唯一的匹配符。从网址里获取第 20 个字符后 12个字符长度的内容，赋值为<code>ItemID</code>，然后放入图片的保存路径。</p><p><img src="https://cdn.sspai.com/2022/06/17/9483e5aaf72a6dd00628b353db4ec966.png" alt><img src="https://cdn.sspai.com/2022/06/17/6ea44f11fd5968929f40c0e8999dcc6d.png" alt></p><p>此时再运行一次，就可以发现文件夹里成功包含了三张商品的截图。</p><p><img src="https://cdn.sspai.com/2022/06/17/4456393c90330f0c13095695ed854aad.png" alt></p><h4 id="优化步骤"><a class="header-anchor" href="#优化步骤">¶</a>优化步骤</h4><p>虽然运行成功了，但是我们也能发现每次打开浏览器然后关闭太耗时。当循环次数少时尚能接受，次数增多后则非常难熬。</p><p>与开启关闭浏览器相比，在开启的浏览器中跳转新网址则会快很多，所以我们可以在循环外开启和关闭浏览器，循环内只完成不同网址的跳转。</p><p><img src="https://cdn.sspai.com/2022/06/17/d73fba74e82d344a99243779ed70e2ac.png" alt></p><h4 id="打包文件夹"><a class="header-anchor" href="#打包文件夹">¶</a>打包文件夹</h4><p>打包压缩这一步很简单，PAD 有成熟的动作，拖进工作区填表即可。</p><p><img src="https://cdn.sspai.com/2022/06/17/a37cfa24150e6c99e0d8a6b772ad4a6a.png" alt></p><h2 id="调试的方法"><a class="header-anchor" href="#调试的方法">¶</a>调试的方法</h2><p>在编写流的过程中，通常很难一次就直接跑通，多半都会遇到各种问题（Bug）。处理 Bug 经常会占整体编写时间的一半以上，那怎样相对高效地处理 Bug 呢？</p><p>很不幸，正因为 Bug 是意料之外的，所以我也很难直接告诉你一个框架性的处理 Bug 的流程。不过处理 Bug 可以拆成找 Bug 和解决 Bug两个环节，还是有一些基本的原则可以帮助你事半功倍。</p><h3 id="找-Bug"><a class="header-anchor" href="#找-Bug">¶</a>找 Bug</h3><p>通常我们运行一个流，它报错时会直接提示你是在第几个操作上出了什么问题，这个时候你可以直接点开对应的操作看看是不是自己配置上出了什么错误。</p><p>比如下图的「提示-图像不存在」，原因在于我们的文件路径少了文件后缀，即文件的路径应该是<code>D:\我的坚果云\常用模块案例\04-批量提取身份证信息\身份证图片集\身份证.png</code> ，而不是<code>D:\我的坚果云\常用模块案例\04-批量提取身份证信息\身份证图片集\身份证</code> 。</p><p><img src="https://cdn.sspai.com/2022/06/17/50095c92fd1f361cdf5e5d0aa203b733.png" alt></p><h4 id="设置断点"><a class="header-anchor" href="#设置断点">¶</a>设置断点</h4><p>简单的配置错误其实通过报错的信息就可以解决，但有时候我们会发现报错提示的操作的配置并没有问题，这就说明问题出在更前面的操作里。</p><p>这个时候我们可以通过设置断点，流运行到断点就会自动停止，只有我们点击「运行下一个操作」流才会继续往下运行，然后通过在变量区观察断点操作前后变量值的变化，就可以验证断点处的操作是否符合我们的要求。</p><h4 id="拆分模块"><a class="header-anchor" href="#拆分模块">¶</a>拆分模块</h4><p>在写一些比较复杂的流时，可能涉及到多个软件，以及数百个操作。这个时候如果想要验证的操作是第 80 个，那从头开始运行就会很耗时。</p><p>另外，调试的时候经常会运行数十次才能找到问题，如果每次都需要前面的操作运行几分钟，那整个调试的效率就会非常低。</p><p>这种场景下我会更建议大家将一个复杂的流拆成几个模块（通常是根据不同的软件），上一个模块的输出就是下一个模块的输入。然后除了测试模块，其他模块全部禁用，在测试模块前手动设置测试模块里所需变量的值，观察测试模块的输出是否符合预期。</p><h3 id="解决-Bug"><a class="header-anchor" href="#解决-Bug">¶</a>解决 Bug</h3><p>通常我们定位到 Bug 以后，整个问题其实就解决了一半。解决 Bug 的方法核心其实就是查文档、搜索然后不断修改验证。</p><p>PAD 中的每一个操作微软都提供了一个参考文档，可以点击「详细信息」快速直达。对照文档，可以看看自己的配置是否存在问题。</p><p><img src="https://cdn.sspai.com/2022/06/17/e5425b5fab1d56561d3bbb4fb46612c8.png" alt></p><p>如果不是配置上的问题，那可以直接把报错信息复制到浏览器里查询，看看网络上有没有相关的解决方案。不过目前互联网上 PAD的中文内容还是比较少，所以搜索时建议使用英文会得到更多相关的结果。</p><h3 id="PAD-自身的出错处理"><a class="header-anchor" href="#PAD-自身的出错处理">¶</a>PAD 自身的出错处理</h3><p>PAD 里任意一个操作下方其实都有一个「出错时」的配置选项，比如第一次出错后间隔一定时间自动重试，或者忽略错误继续流的运行，这其实也是一个帮助我们应对Bug 的地方。</p><p><img src="https://cdn.sspai.com/2022/06/17/c7795d199603815165d04ad9d5f7bfd0.png" alt></p><p>另一个方法是我们可以设置一个 <code>Warning</code>变量存放我们想要观察的变量值，然后通过调用子流来输出。这个触发条件可以是报错就触发，也可以指定特定报错类型才触发。</p><p><img src="https://cdn.sspai.com/2022/06/17/24bea7e1c6e25629c410476d68209cb2.png" alt></p><h2 id="小结"><a class="header-anchor" href="#小结">¶</a>小结</h2><p>在本节课程中，我带着大家非常详细地创建了 PAD上的第一个流，从验证需求开始，到明确流程，接着分模块把具体的操作动作编写完成，最后拼接成一个完整的流。在创建第一个流之后，我还向大家介绍了一些基本的 bug调试方法，可以在最快的时间内找到并解决问题。当然话说回来，处理 Bug终究不是一个标准化的过程，很多经验还是需要不断实践来积累。从下一节课开始，我将逐个介绍操作中的各个模块和动作，并辅以对应的实战案例，希望通过这些例子可以帮助大家在较短的时间内掌握这些模块，以应用到日常的流创作中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://sspai.com/post/73710&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;创建自己的第一个 Power Automate 工作流，从此繁琐操作是路人&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」跨时空圆桌：伟大创作者们如何安排日常生活</title>
    <link href="https://talengu.github.io/public/2022/07/16/test/202207/2022-07-03-015035971655/"/>
    <id>https://talengu.github.io/public/2022/07/16/test/202207/2022-07-03-015035971655/</id>
    <published>2022-07-16T16:00:04.000Z</published>
    <updated>2022-07-16T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>「转」<a href="https://sspai.com/post/73779" target="_blank" rel="noopener">跨时空圆桌：伟大创作者们如何安排日常生活</a></p><a id="more"></a><p>2007 年 7月一个周日下午，美国作家梅森*柯瑞正在办公室里，想赶出第二天截稿的稿子。他是个早起的人，每天五点半即起，早上十分专注，但下午就心不在焉了。因此，虽然deadline迫在眉睫，但梅森却在摸鱼：他看看新闻，泡泡咖啡，收拾收拾东西，完全无心工作。摸到鱼外焦里嫩之际，不禁开始反思，责怪自己五点半起床的习惯严重降低了下午的工作效率。于是他上网搜索其他作家的生活习惯，看看能否参考一下。这类资料并不难找，而且十分有趣，梅森觉得应该把它们收集起来。这天下午，他创立了博客「<a href="https://dailyroutines.typepad.com/" target="_blank" rel="noopener">日常作息</a>」。这个博客陆续收集了一百多位作家、作曲家、思想家、科学家等创作者的生活习性记录，受到各大媒体关注，后被集结成书，台湾和大陆俱有引进。至于那篇稿子，梅森拖到了次日早上最后一分钟压线交卷。</p><p><img src="https://cdn.sspai.com/2022/06/13/544f1410813c0e816deea95b8d073961.png" alt>梅森*柯瑞和他的著作，图自<a href="https://www.masoncurrey.com/" target="_blank" rel="noopener">masoncurrey.com</a><img src="https://cdn.sspai.com/editor/u_/cajhenlb34tcvb1j9pdg.png" alt>「日常作息」博客，<a href="https://dailyroutines.typepad.com/" target="_blank" rel="noopener">图源</a></p><p>梅森这份创作者名单不乏如雷贯耳之人：伏尔泰、康德、贝多芬、巴尔扎克、雨果、达尔文、马克思、福楼拜、托尔斯泰、柴可夫斯基、特斯拉、爱因斯坦、毕加索、卡夫卡、村上春树……他们当中很多人生活在距我们上百年的历史时期，与今人的生活习惯必有很多差异。但实际上，我们对于如何安排日常生活的困惑都是相通的：</p><ul><li>有必要为自己设定时间表吗？</li><li>几点睡觉？几点起床？</li><li>工作时间越长越好吗？</li><li>设立工作目标有用吗？</li><li>怎样提高工作效率？</li><li>琐事干扰太多，如何保持专注不分心？</li><li>作为创作者，如何获取灵感？</li><li>摸鱼应该有负罪感吗？</li><li>不工作的时候怎么玩？</li><li>……</li></ul><p>诸位将本文中看到各位伟大创作者们对如上问题给出的回答。将这些几百年前的回答和如今的番茄钟、GTD、健康监测等工具对照，有助于剥离数字时代的华丽外壳，思考自我管理的本质。不过，这些回答未必是「解决方案」，因为很多问题他们自己也没有解决；也不必因为作品伟大就推崇他们的一切习惯，世上并无完美无缺之人。这是一场跨时空圆桌会，诸位拣选有启发或有趣味的部分即可。</p><h2 id="关于时间表"><a class="header-anchor" href="#关于时间表">¶</a>关于时间表</h2><p>不妨想象一下：如果无需上班，不用上学，自由地安排二十四小时，你会过上规律性的生活吗？其实不用想象----回忆自己假期的表现就知道答案了。本文涉及到的创作者们大部分就过着这样自由的生活：他们并没有一份今天意义上的「工作」。他们可以用创作养活自己，做自己的老板，自由地支配时间，就像是自由职业者。那么，他们会有规律地安排自己的生活吗？他们的自制力会像传说中那样异于常人吗？</p><h3 id="创作者们会有规律地安排日常生活吗？"><a class="header-anchor" href="#创作者们会有规律地安排日常生活吗？">¶</a>创作者们会有规律地安排日常生活吗？</h3><p>回答是肯定的。大部分创作者会按照一定的范式安排日常生活：他们有相对固定的睡眠、创作、休闲时间段，这也使整理出一份他们的时间表成为可能。</p><p>下图便是 23位著名创作者的简要时间表。补充说明：图中时间段只表示大概时间，并非都那么准时；也并未完全表示创作者一生的时间安排，只代表某个人生阶段；只展示了工作日，不代表休息日或假期。</p><p>特斯拉在图中的时间表是他为爱迪生公司做学徒时的作息。他总是从十点半一直工作到次日凌晨五点，著名资本家爱迪生称赞他是「卷王之王」：「我有许多工作勤奋的助理，但你可谓其中的佼佼者」。后来他离职创业，成立了「特斯拉电气公司」，工作时间改为中午十二点至午夜。</p><p>佛洛依德每天要花大量时间接待患者，持续到晚上九点。晚上剩余时间他还要写作、阅读、为精神分析期刊做编辑工作，忙到凌晨一点或更晚，因此图中他显得十分忙碌。但是他有一个奢侈的调剂----每年长达三个月的假期，在山上疗养中心远足、钓鱼、采草莓或蘑菇、陪伴家人。</p><p><img src="https://cdn.sspai.com/editor/u_/cajheo5b34tcvr93tui0.jpeg" alt>本文涉及的部分创作者的时间表，作者制图。版式部分参考了<a href="https://podio.com/site/creative-routines#" target="_blank" rel="noopener">creative routinues</a></p><h3 id="去做「习惯的动物」"><a class="header-anchor" href="#去做「习惯的动物」">¶</a>去做「习惯的动物」</h3><p>与我们类似，很多创作者的规律性依习惯和生活事务而自然形成。但一些创作者也会有意识地规划安排自己的时间。康德和史蒂芬*金为自己订立的时间表堪称苛刻：他们每天都在大约相同的时间行动，如同钟表般规律。</p><p>诗人海因里希<em>海涅如此描写哲学家康德的日常：「康德的一生很难描写，因为他既没有生活，也没有历史。他在德国东北边陲老城柯尼斯堡偏远的静巷中，过着规律、机械、近乎抽象的单身汉生活。我相信当地天主教堂的那口大钟工作的规律性都不如其市民伊曼努尔</em>康德。他起床、喝咖啡、写作、上课、吃饭、散步，一切都有它固定的时间。当康德下午穿着灰外套，拄着西班牙手杖出门时，邻居就知道那一定是三点半。」</p><p><img src="https://cdn.sspai.com/editor/u_/cajheolb34tcve3bs7lg.jpeg" alt>康德像，JohannGottlieb Becker绘。<a href="https://commons.wikimedia.org/wiki/File:Kant_gemaelde_3.jpg" target="_blank" rel="noopener">图源</a></p><p>画家培根被评价为「习惯的动物」：起床第一件事就是作画，直至中午。整个下午和漫长的夜晚，他有大把的时间作乐，喝酒、夜店、宵夜，夜夜笙歌、通宵达旦，靠安眠药睡几个钟头，再早起画画，一生如此。</p><p>作家史蒂芬*金：「必须要有日程表----每天大约同一时间进写作间，写完上千字才出来，让你能够养成习惯，就像你每天晚上大约都在同样的时间上床，依同样的规矩准备睡觉和做梦一样。不论是写作还是睡眠，我们都要学会保持身体的静止，而同时我们也鼓励心智从平凡庸碌的日常生活中解放。」</p><p><img src="https://cdn.sspai.com/editor/u_/cajheotb34tcvb1j9pe0.png" alt>史蒂芬*金，图自<a href="https://stephenking.com/the-author/" target="_blank" rel="noopener">stephenking.com</a></p><p>俄国作家格拉宁作品《奇特的一生》记录了昆虫学家柳比歇夫的时间管理方法：他 56 年如一日定量地管理自己的时间。每天以小于 15分钟的精确度，记录自己做了什么事，花了多长时间；每月、每年分类统计各项花费的时间，并分析哪些不必要的事项用时过长，以持续改进。柳比歇夫一生涉猎广泛，著作甚丰，生前发表了七十余部学术著作，但他的时间管理法比学术成就受关注得多。</p><h3 id="像钟表一样生活？我做不到"><a class="header-anchor" href="#像钟表一样生活？我做不到">¶</a>像钟表一样生活？我做不到</h3><p>虽然康德这些位「珠玉在前」，但人非机器，要求自己像钟表一般行事未免过分苛求。也许你也曾立下雄心壮志，为自己订立了完善的时间管理计划，只是不出几天就无疾而终。别自责，别内疚，下面这些创作者的「打脸」故事告诉你：其实我们都一样。</p><p>心理学家威廉*詹姆斯极为推崇规律作息：「我们越具有把生活琐事交给不费心力的自动行为照管的能力，就能解放出越高的智慧和能力，让他发挥适当的功能。再没有比毫无习惯，一切都优柔寡断更可悲的人。」但其实这可悲的人就是指他自己：他有严重的拖延症，做事犹犹豫豫，生活散漫无纪，永远不能坚持规律的作息。</p><p><img src="https://cdn.sspai.com/editor/u_/cajhep5b34tcvr93tuj0.png" alt>威廉*詹姆斯，NotmanStudios 摄。<a href="https://commons.wikimedia.org/w/index.php?curid=16250941" target="_blank" rel="noopener">图源</a></p><p>小说家海勒写作慢如龟速，他的第一本小说《第二十二条军规》耗时八年才写完。「（下班后）我每天晚上写两三个小时。我曾经放弃过，停笔去和太太一起看电视，但电视却让我回头写作。我不能想象美国人如果不写小说，晚上有什么事可做。」辞去工作后，他全身心投入到第二本小说的写作，每天早上写两三个小时，然后去健身、吃午餐，回来再工作一阵。就算错过一天没写，他也不着急：「这是每天都要做的工作，但我绝不会因为没做而感到歉疚。我并没有非写不可的感觉，而且从来就没有。」在这样的摆烂精神指引下，他的第二本小说《出了毛病》终于在《第二十二条军规》十三年之后完稿了。</p><p><img src="https://cdn.sspai.com/editor/u_/cajhepdb34tcvr93tujg.png" alt>约瑟夫*海勒。<a href="https://commons.wikimedia.org/wiki/File:Joseph_Heller1986_crop.jpg" target="_blank" rel="noopener">图源</a></p><p>富兰克林堪称自我管理的先驱。他为自己制定了精确的时间表，开列了养成十三项美德的清单，计划每周养成一项美德。先前<a href="https://sspai.com/post/73453" target="_blank" rel="noopener">少数派文章</a> 提到，他的清单还被用于证明 GTD工具的历史。这样精致的自我管理总体上是有效的，但并非完美：他的印刷业务总是干扰时间表的执行；一周养成一样美德的计划落空了，后来改为一年养成一样，再后来改为几年养成一样，但「秩序」这项美德最终也未能养成。他天生难以保持物品的整齐，认为整理东西这事儿非常烦人。</p><p><img src="https://cdn.sspai.com/editor/u_/cajheplb34tcvgn49fvg.png" alt>富兰克林的时间表，引自他的自传</p><h3 id="小结"><a class="header-anchor" href="#小结">¶</a>小结</h3><p>柳比歇夫的日程管理法对时间的控制力堪称极致，很多日程管理软件以他的理论为宗。但当人们亲身实践这一方法时，就会被它的表象所迷惑，追求日程管理上的「完美」，认为日程管理在于充实生活，延长工作时间，并为由此产生的意义感而欣喜。最终，我们无奈发现，「完美」并不存在：实践时我们生怕浪费一点时间在与工作无关的事情上，但工作时还分心想着自己在管理时间，终于身心俱疲，难以为继。从前面的故事里我们能够得到一点慰藉：即使自我管理的推崇者威廉*詹姆斯和富兰克林都难以保证完美地落实日程安排。</p><p>失败的实践源于误解：日程管理的目的不应该是「延长工作时间」，或者说追求完美而充实的生活内容。大脑的生理条件决定了人一天中能集中精力的时间有限，在此基础上片面延长工作时间，以至于超过了大脑的极限，不可避免地会带来效率的下降。</p><p><img src="https://cdn.sspai.com/editor/u_/cajheptb34tcve3bs7m0.jpeg" alt><a href="https://unsplash.com/photos/uo_llXeqgQY" target="_blank" rel="noopener">图源</a></p><p>史蒂芬<em>金和威廉</em>詹姆斯有相似的观点：日程管理的目的在于「集中精力」：尽量无脑地、「自动化」地完成各类生活琐事，从而将宝贵的精力留在需要它的工作之中。换言之，要给琐事安排上固定的时间，或者事先解决掉，不要让大脑在工作时还要考虑它们。从这一点来说，任务管理的目的也是类似的：将日常琐事存储于清单中，忘掉它们，只在需要或它提醒时去读取内容。</p><p>集中精力的重要条件之一是工作的时间不应该过长。但不幸的是，我们的工作时间并不由自己决定，甚至在休息时还不得不担心工作。此时日程管理尚有一点可怜的作用，就是给工作和生活一点界限感，欺骗大脑在安排好的时段就别想那些烦心事（此外，也可以换个环境来营造界限感）。如果你的大脑足够聪明，或者足够笨，它应该会上当的。</p><h2 id="关于睡眠"><a class="header-anchor" href="#关于睡眠">¶</a>关于睡眠</h2><p>睡眠是每天的结束和新一天的开始，关于伟大人物的睡眠，历来有很多煞有介事的传说。</p><p>我们常听说，早睡早起是很多伟大人物成功的秘诀，事实的确如此吗？</p><p>还有人说，只睡四个小时、甚至放弃长睡眠，有间隔地小睡有利于工作，这样不走寻常路的睡眠法会有神奇的效用吗？</p><p>我们还将看到创作者们如何面临失眠的困扰，或许你能和他们产生共鸣。</p><h3 id="早起是创作者们成功的秘诀吗？"><a class="header-anchor" href="#早起是创作者们成功的秘诀吗？">¶</a>早起是创作者们成功的秘诀吗？</h3><p>想必细心的读者已在上文「创作者们的时间表」中发现，创作者们大多起得很早。我们开头提到的作者梅森也有类似的发现，这估计让五点半起床的他欣慰不已：「在研究创作者们的日常生活的过程中，我看到一位又一位的创作者在清晨完成他们一天中最重要的、甚至是唯一一段工作。这本书记录的161位创作者中，约有三分之一于早上七点或更早起床。如果问我从这本书中学到了什么，那应该是：起床直接工作；如果你喜欢可以泡杯咖啡，但别做太多其他事；好好利用这段日常琐事找上门之前的时间。」</p><p>歌德：「我人生曾有一度可以每天轻轻松松写满满一张纸，但现在（说这话时他 79岁）只能在早上。在我睡饱后，还没被日常生活的俗务烦扰前，觉得心旷神怡的时候，撰写《浮士德》的第二部。」</p><p><img src="https://cdn.sspai.com/editor/u_/cajheq5b34tcvr93tuk0.png" alt>歌德像，Joseph KarlStieler绘。<a href="https://commons.wikimedia.org/wiki/File:Joseph_Karl_Stieler_portrait_de_Johann_Wolfgang_von_Goethe.jpg" target="_blank" rel="noopener">图源</a></p><p>很多创作者早起并非刻意为之，只是习惯而已：睡醒了，起床，就是这样的简单。他们所处的时代无需工作到深夜，也没有电子设备的干扰，早睡并非难事，早起也就顺理成章。</p><p>在权威们的先例下，我们也会想尝试养成早起的习惯，似乎依葫芦画瓢就能取得成功。早起是个好习惯，但「早起 =成功」就是成功学逻辑了。如果很多成功者早起即能证明这一点，按照同样的逻辑，我们也能够举例说明「晚起 = 成功」。于是便可知道，早起晚起和成功并无必然关系。</p><p>毛泽东习惯清晨入睡，下午三点起床。1949 年 10 月 1日这天情况比较特殊，他特意叮嘱警卫「下午一点钟叫我起床。」下午一点，警卫走进卧室轻轻喊他。毛泽东听到叫声，立刻坐起来，揉揉眼睛说：「这么快呀！」</p><p>笛卡尔习惯晚起。他每天睡十个小时，日上三竿时起床，还要赖在床上直到十一点多。「我的心灵在睡梦漫游过森林、花园和魔宫，体验过各种想象得到的愉悦之后，我醒来把夜里的梦境和白天的绮想融合在一起。」这一切于1649年后期突然终止，他接受了瑞典女王的授课邀请。这年冬天的瑞典极冷，他抵达时才得知，和女王的课程安排在清晨五点。采取新作息才一个月，笛卡尔就因不适应气候和作息病倒了，十天后溘然长逝。</p><p><img src="https://cdn.sspai.com/editor/u_/cajheqdb34tcvb1j9peg.png" alt>笛卡尔像，FransFranchoisz Hals 绘。[图源](<a href="https://commons.wikimedia.org/wiki/File:Frans_Hals_-" target="_blank" rel="noopener">https://commons.wikimedia.org/wiki/File:Frans_Hals_-</a>_Portret_van_Ren%C3%A9_Descartes.jpg)</p><h3 id="一天只睡四小时真的可能吗？"><a class="header-anchor" href="#一天只睡四小时真的可能吗？">¶</a>一天只睡四小时真的可能吗？</h3><p>在睡眠时长这一话题上，人与人之间的体质差异尤为明显。宾夕法尼亚大学心理学教授大卫*丁格斯认为，大多数人每天都需要 8 个小时的睡眠以确保发挥出应有的能力。但他也承认，有不到 5% 的人天生短睡，他们确实可以每天晚上只睡四五个小时，甚至更少。</p><p>牛顿很少在凌晨两三点前睡觉，有时候到清晨五六点了还没睡。但一到早上他就精力充沛，似乎睡了个长觉。</p><p>海明威每天五点半或六点就起床，即使前一晚烂醉如泥亦如此。他说：「当我在写书和故事时，我总是一见黎明，就立刻振笔疾书。」他的儿子说他似乎不受宿醉的影响：「我父亲总是神清气爽，仿佛刚在隔音室里戴上眼罩睡了一个好觉。」</p><h3 id="达芬奇会按照「达芬奇睡眠法」睡觉吗？"><a class="header-anchor" href="#达芬奇会按照「达芬奇睡眠法」睡觉吗？">¶</a>达芬奇会按照「达芬奇睡眠法」睡觉吗？</h3><p>「达芬奇睡眠法」据说是达芬奇提出的一种睡眠法，也称「多相睡眠法」。「达芬奇睡眠法」抛弃了睡一整个八小时（被称作「单相睡眠」）的观念，认为应该间隔式地小睡，例如每隔4 小时睡 15 分钟，这样一天能睡一个半小时左右。</p><p>美国建筑师富勒亲身验证过这一方法，似乎效果还很不错。富勒乐于把自己当作实验对象。1932 和 1933年的一系列实验让他认定，觉得疲惫或者困乏代表他的身心已经过度疲劳，亟需休息。经过多次试验，他发现了一种最适合他的作息：每工作六小时，小睡三十分钟；如果走神，就更早些休息。这种作息制度对他很有效，他可以连续授课十小时依然神采奕奕，很多与他共事的年轻人的精力都比不上他。虽然高效率睡眠实验十分成功，但他没有一直坚持下去，因为妻子抱怨他的作息太古怪了。</p><p><img src="https://cdn.sspai.com/editor/u_/cajheqlb34tcvr93tukg.png" alt>富勒设计的 1967年蒙特利尔世博会美国馆，被称作「富勒球」。[图源](<a href="https://commons.wikimedia.org/wiki/File:Expo_67" target="_blank" rel="noopener">https://commons.wikimedia.org/wiki/File:Expo_67</a>,<em>pavillon_des</em>%C3%89tats-Unis.jpg)</p><p>但是，并无确切证据证明达芬奇采用了这种睡眠法。他的助手如此描述他的工作状态，其中并未提到间隔式小睡的习惯：</p><p>达芬奇作画时总会早早到达，爬上脚手架，开始工作。有时他从黎明一直呆到日落，从不放下画笔，不吃不喝，不停地作画。也有时，他会连续两三四天不碰画笔，每天在作品前花上几个小时，抱着胳膊，自己检查这些画作。</p><p>关于睡眠的科学研究也并不支持这种睡眠方法。人类睡眠存在一个约 90 分钟的睡眠周期，粗略地说包含入睡、浅睡、深睡、做梦等阶段，而 15～30分钟的时长打断了这一周期，很难达到完全的休息效果。网上也有很多人亲身试验了「达芬奇睡眠法」，就像短睡四个小时一样，这并非是大多数人适合的睡眠方式。如果你习惯在睡觉前玩一个小时手机，达芬奇睡眠法下的时间表将会非常「精彩」。</p><h3 id="失眠者的治愈沙龙"><a class="header-anchor" href="#失眠者的治愈沙龙">¶</a>失眠者的治愈沙龙</h3><p>同是天涯失眠人，相逢何必曾相识。这里是失眠者的治愈沙龙，本次请来的失眠嘉宾有达尔文、马克吐温和卡夫卡。</p><p>达尔文大约晚上十点结束与家人的娱乐，半小时内上床。不过他睡不太着，往往过了几个小时还醒着，忙着思考白天没解决的问题。</p><p>马克吐温的好友记述他失眠的情况：起初他在临睡前喝香槟，我们就给他香槟。后来他从波士顿回来，腋下夹了几瓶窖藏啤酒，说现在这种啤酒才能让他睡得着，我们便提供窖藏啤酒。更后来，我去哈特福德拜访他，才得知他又认为热威士忌是唯一的助眠良方。又过了很久，我问他还喝不喝热威士忌助眠，他说他现在什么也不喝了。</p><p><img src="https://cdn.sspai.com/editor/u_/cajher5b34tcvgn49g00.png" alt>马克吐温。<a href="https://commons.wikimedia.org/wiki/File:Mark_Twain_reading_c1900s.jpeg" target="_blank" rel="noopener">图源</a></p><p>卡夫卡：「我挖空心思想入睡，但那是不可能的任务，因为我们不可能一边睡觉，一边又惦记着自己的工作，并且还想解决明明就无法解决的问题。」</p><h3 id="小结-2"><a class="header-anchor" href="#小结-2">¶</a>小结</h3><p>睡眠是非常私人的话题，它与每个人的身体素质、生活节奏、心理状态密切相关。当我们看到牛顿、海明威、富勒的「高效率睡眠」时，也该明白自己的身体绝大概率并不能适应这样的短睡。我们很难不付代价地从睡眠中省出时间：如果你的睡眠没有达到身体的要求，它终究会报复你的。</p><p>荣格（所谓荣格十六型人格就是用了他的名字，但它并不是荣格发明的）每天要花八九个小时接待病人。尽管他明白很多病人都非常依赖他，但他仍然毫不避讳地去度假。他说：「如果累了，需要休息了，还依旧去工作的人是傻瓜。」在推崇牺牲睡眠努力工作的论调之下，我们应该大大方方地睡足觉，没有什么比睡个好觉更重要，是它让我们精神抖擞地醒着。「那个时候我年轻想办好事，差不多一个月大病一场。为什么呢？老熬夜。经常是通宵达旦干。后来最后感觉到不行，这么干也长不了。先把自己的心态摆顺了，内在有激情，外在还是要从容不迫。后来我就想了一个，今天做到12 点就不做了，睡大觉，第二天重新来过。」</p><h2 id="关于工作"><a class="header-anchor" href="#关于工作">¶</a>关于工作</h2><p>伟大创作者的威名完全源于他们的作品。这些作品历久弥新，传诵至今，以至于今天的人们还难免好奇它们创作者的工作细节。他们的工作真如传说中那般勤奋吗？如果是，他们是如何保持这种勤奋的？他们会用目标管理的手段督促自己的创作吗？他们作品的灵感是从哪里找到的？他们会在工作累的时候摸鱼吗？他们的工作室是如何布置的？他们会面临如今这样信息轰炸的挑战吗？以下便是他们给出的回答。</p><h3 id="工作的激情源于热爱"><a class="header-anchor" href="#工作的激情源于热爱">¶</a>工作的激情源于热爱</h3><p>英国作家普里切特曾感叹：「这些伟大的人物迟早都会变成一个模样，他们从不停止工作，绝不浪费一分钟，这真让人沮丧。」而从他们自己的讲述来看，这一勤奋并非源于自我管理或KPI，而是对这份工作发自内心的热爱。</p><p>梵高：「今天我又从早上七点一直工作到晚上六点，除了走一两步之外的距离去取食物之外，一动也不动。我一点没感觉到疲惫，今天晚上我会再画一幅画，而且要把它完成。」「我们的日子都花在工作上，时时都在工作。到晚上我们已经筋疲力竭，于是就去咖啡馆，之后早早上床！这就是我们的生活。」</p><p>贝尔年轻时总是日以继夜地工作，每天只睡三四个小时。等他妻子怀孕之后，他的作息总算正常一些。妻子强迫他晚餐后休息，他还会在十点后回书房工作。当产生新点子时，他恳求妻子免去他的家务，连续工作22 小时不眠不休。他自述，「当我的脑袋塞满了各种新想法，教我兴奋莫名，急于一试，无法自拔，这是我焦躁不安的时刻。」</p><p><img src="https://cdn.sspai.com/editor/u_/cajherdb34tcvr93tul0.png" alt>贝尔和他的妻子，1903年。<a href="https://commons.wikimedia.org/wiki/File:Alexander_Graham_Bell_and_Mabel_Hubbard_Gardiner_Bell_kissing.gif" target="_blank" rel="noopener">图源</a></p><p>福楼拜：「有时候我不明白为什么我的手臂不会因为疲惫而由身体掉落，为什么我的脑袋不会溶化。我过的是苦行的生活，剥除了所有外在的娱乐，只靠一种永恒的狂热支撑，而这有时也让我流出无能的眼泪，但这种狂热却从不消退。我爱我的工作，那种爱痴狂而病态，就像苦行的人爱折磨他肚子的刚毛衬衣（一种旧时苦修者所穿的粗糙衣衫）。」</p><p>海明威：「当我在写书和故事时，我总是一见黎明，就立刻振笔疾书。那时没有任何人会打扰你，天气可能或凉或冷，而你开始工作，边写就边暖和起来。你读读自己写了些什么，而由于你在停笔时总知道接下来会发生什么，因此你就由那里接着写，写到你还有灵感，而且知道接下来会发生什么之后停笔，然后去过你的日子，直到第二天你再拿起稿子来为止。你早上六点已经起身，可能一直写到中午，或者更早就结束。等你停笔时，你一方面是空虚的，但另一方面却又一点也不空虚，而是实在的，就仿佛你已经和你所爱的恋人行了鱼水之欢一样。没有任何事物可以伤害你，没有任何事会发生，没有任何事有任何意义，直到第二天你再做一次。难以度过的是在来到第二天之前的等待。」</p><p><img src="https://cdn.sspai.com/editor/u_/cajherlb34tcvb1j9pf0.png" alt>海明威在写作，LookMagazine 摄，约 1953年。[图源](<a href="https://commons.wikimedia.org/wiki/File:Ernest_Hemingway_Writing_at_Campsite_in_Kenya_-" target="_blank" rel="noopener">https://commons.wikimedia.org/wiki/File:Ernest_Hemingway_Writing_at_Campsite_in_Kenya_-</a><em>NARA</em>-_192655.jpg)</p><h3 id="为自己设立目标"><a class="header-anchor" href="#为自己设立目标">¶</a>为自己设立目标</h3><p>热爱是对工作巨大的推动力，但创作者们也会采取自我管理的手段。最常见的是「目标管理」，方式也很简单粗暴，设定产量目标和工作时长目标。他们的工作时长目标都小于八个小时，有的甚至还不到四个小时。</p><p>诗人叶芝规定自己无论是否愿意，每天都必须至少写两个小时。这样的日常纪律对他非常重要，因为要是没有常规，他的注意力就会涣散----「每一点改变都会扰乱我原本就不太坚决的生活习惯」。叶芝写得非常慢，他一天内的产量从未超过五六行，写一首八十行以上的抒情诗估计要三个月。</p><p><img src="https://cdn.sspai.com/editor/u_/cajhertb34tcvgn49g0g.png" alt>叶芝像，其父绘。<a href="https://commons.wikimedia.org/wiki/File:William_Butler_Yeats_by_John_Butler_Yeats_1900.jpg" target="_blank" rel="noopener">图源</a></p><p>海明威在图表上跟踪自己每天的产量，「这样才不会欺骗自己。」</p><p>毛姆每天早上写作三四个小时，规定自己每天要写一千至一千五百字。中午结束工作时，也往往会不耐烦，急着要再次开始。他说：「在你写作，在你创作一个角色的时候，他一直跟着你，你一心一意都想着他，他是活生生的。」毛姆的传记中如此评价他的写作：「这与其说是职业，不如说是上瘾。」</p><p>史蒂芬*金一年三百六十五天天天写作，从不休息。他为自己设立了每天两千字的目标，不写完不罢休。他早上大约八点或八点半开始写作，有时在十一点半就已经写完，但通常要到下午一点半才达到目标字数。接下来整个下午和晚上就可以自由支配：午睡、写信、看书、看电视、与家人娱乐。</p><h3 id="灵感的诞生"><a class="header-anchor" href="#灵感的诞生">¶</a>灵感的诞生</h3><p>创作者永远渴求灵感，而灵感的诞生需要灵感之神的眷顾。这一过程电光石火，充满神奇和兴奋。</p><p>法国小说家乔治*桑记录了肖邦的生活习惯：「他的创作自然而神奇，无需费心，不必预想，就这样自然而然涌现，由他的指尖流泻，突如其来、完整而崇高，或者在散步时，它会浮现在他的脑海，让他迫不及待要试行演奏。」</p><p><img src="https://cdn.sspai.com/editor/u_/cajhes5b34tcve3bs7mg.png" alt>肖邦（铅笔画），GeorgeSand绘。<a href="https://commons.wikimedia.org/wiki/File:Frederic_Chopin_by_George_Sand_in_pencil,_1841.jpg" target="_blank" rel="noopener">图源</a></p><p>福楼拜：「有时，当我脑袋空空洞洞，文思枯竭之际，当我发现自己画了整页却没有写出一个句子之时，我倒在长榻上，躺在那里茫然若失，陷入绝望的深渊，动弹不得，痛恨我自己，并且为驱使我追求妄想的疯狂骄傲而责怪自己。十五分钟之后，一切都变了，我的心因欢喜而砰砰直跳。」</p><p>柴可夫斯基：「未来作品的种子往往以最意想不到的方式，突如其来地出现。如果土壤够肥沃，也就是说，如果我有工作的情绪，这颗种子就会以难以想像的力量和速度生根，冒出土壤，伸出根、叶、枝，最后开花结果，我无法描绘这创造的过程，只能用这样的比喻说明。所有的困难都在于种子必须出现，必须处在有利的环境之下。其他的都是自动自发。我无法以言词向你说明在主要的想法出现、成形之后，笼罩你全身那无尽的喜悦感受。你忘怀一切，几乎丧失理智，你心中的一切都颤抖而翻腾，思绪奔腾，几乎无法用笔记下来。」</p><p><img src="https://cdn.sspai.com/editor/u_/cajheslb34tcvr93tulg.png" alt>柴可夫斯基纪念碑。<a href="https://commons.wikimedia.org/wiki/File:Monument_to_Tchaikovsky,_Klin.JPG" target="_blank" rel="noopener">图源</a></p><p>上面的灵感来源颇有些玄学，教人完全无法模仿。当然，伟大的创作者必有一些天赋是我们学不来的。不过，也有一些创作者透露了他们获取灵感的方法，只是这些方法看上去都平平无奇，全无神秘可言。</p><p>下午两点左右，狄更斯准时离开书桌，在乡间或伦敦街头散步三小时，一边思索的故事，一边如他所描述的，「搜寻我想要编织故事的画面。」他的妹夫记得他「神采奕奕回到家，全身充满活力，仿佛来自某个看不见的蓄水池。」</p><p>伍迪*艾伦：「这些年来我发现，只要有短暂的改变，就能刺激心灵，提供新鲜的能量。因此如果我人在这个房间，然后走到另一个房间，就能帮助到我；如果我走到外面的街上，帮助更大。如果我在客厅觉得陷入死胡同，上楼淋个浴就能有所帮助，它使一切分解，让我松弛。」</p><p>「史努比之父」舒尔茨送完孩子上学后开始一天的工作。他坐在画板前，先用铅笔漫不经心地乱涂乱画，让自己的心思四处漫游。他最常用的方法是「就坐在那里，回想过去，有点像挖掘丑恶的记忆之类的东西。」不过，一旦有了点子，就会迅速工作，极其专注地把它画在纸上，以免灵感枯竭。</p><p><img src="https://cdn.sspai.com/editor/u_/cajhet5b34tcvr93tum0.png" alt>舒尔茨。<a href="https://commons.wikimedia.org/wiki/File:Charles_Schulz_NYWTS.jpg" target="_blank" rel="noopener">图源</a></p><h3 id="如果工作没进展，那就去摸鱼吧！"><a class="header-anchor" href="#如果工作没进展，那就去摸鱼吧！">¶</a>如果工作没进展，那就去摸鱼吧！</h3><p>即使是伟大的创作者，灵感之神也并不会永远眷顾，灵感枯竭之际就是摸鱼开始之时。</p><p>歌德：「我们不该勉强，工作没有进展，宁可虚掷光阴，或者睡觉度过，而不要勉强自己去做让自己日后也得不到满足的事物。」</p><p>海明威如果写作得不顺利，就会放下书稿，先去回信，这让他能够休息一下，暂时摆脱「可怕的写作责任」。</p><p>威廉*詹姆斯：「我认识一个人，他每天早上搬动椅子、捡拾尘土、摆弄桌子、翻阅报纸书籍、剪指甲，反正就是浪费早上的时间，而且不假思索。他这样做，只是因为他唯一该做的事是准备中午的形式逻辑课，而这偏偏正是他讨厌的。」这个人说的就是他自己。</p><h3 id="创作者们的工作室"><a class="header-anchor" href="#创作者们的工作室">¶</a>创作者们的工作室</h3><p>居家办公越发普及的今天，合适的工作间显得更加必要。创作者们大多也拥有自己的工作室，这些工作室条件各异，是他们性格的外化表现。</p><p>狄更斯对于写作环境有着苛刻的要求。首先，他需要绝对的安静。他家的书房要多装一扇门以阻隔噪音。另外，他的书房必须精心安排：书桌要放在窗户前，桌上需要备齐全套写作用具、鲜花、裁纸刀、两个铜制小塑像。</p><p><img src="https://cdn.sspai.com/editor/u_/cajhetdb34tcvgn49g10.png" alt>狄更斯，John &amp;Charles Watkins摄。<a href="https://commons.wikimedia.org/wiki/File:Charles_Dickens_by_Watkins_c1860.jpg" target="_blank" rel="noopener">图源</a></p><p>托尔斯泰在写作时把自己隔离起来，没有人可以进他的书房，邻近房间的门都被锁上，以确保他不受干扰。</p><p><img src="https://cdn.sspai.com/editor/u_/cajhettb34tcvr93tumg.png" alt>工作中的托尔斯泰。[图源](<a href="https://commons.wikimedia.org/wiki/File:Leo_Tolstoy_-" target="_blank" rel="noopener">https://commons.wikimedia.org/wiki/File:Leo_Tolstoy_-</a>_portrait.jpg)</p><p>史蒂芬*金把写小说比作「创意的睡眠」。「像卧室一样，你写作的房间也该隐密，是你可以做梦的地方。」</p><p>毛姆的书桌永远是面对光秃秃的墙壁，他认为如果眼前有美景可看，就不可能写作。</p><p>特斯拉在黑暗中效率最高，他的办公室即使是中午也拉着百叶窗。只有在电闪雷鸣时，他才会拉开百叶窗，坐在自己的沙发上，欣赏闪电打在城市上方的景象。</p><p>阿加莎*克里斯蒂没有自己的书房。她只需稳固的桌面和打字机，「大理石洗手台就是个写作的好地方，不是吃饭时间的饭桌也很合适。」</p><p><img src="https://cdn.sspai.com/editor/u_/cajheu5b34tcvr93tun0.png" alt>打字中的阿加莎*克里斯蒂。[图源](<a href="https://www.britannica.com/biography/Agatha-" target="_blank" rel="noopener">https://www.britannica.com/biography/Agatha-</a>Christie)</p><p>画家培根的画室一片混乱，油彩乱七八糟地抹在墙上，地上堆着齐膝高的书本、画笔、纸、坏家具，以及其他破烂。他说如果屋里清爽宜人会扼杀他的创造力。</p><p><img src="https://cdn.sspai.com/editor/u_/cajheulb34tcvgn49g1g.png" alt>培根的工作室。<a href="https://commons.wikimedia.org/w/index.php?curid=112551712" target="_blank" rel="noopener">图源</a></p><h3 id="如何面对信息轰炸"><a class="header-anchor" href="#如何面对信息轰炸">¶</a>如何面对信息轰炸</h3><p>今天的工作过程经常被消息打断，我们经常在各种设备间切来切去，大脑也为此疲于奔命。本文的创作者们大多在数字时代之前生活，但他们也有信息焦虑：信件、杂务、邀约，作为著名人物，这些信息经常堆积如山。</p><p>柴可夫斯基每天总是在处理完书信和校样后才开始在钢琴前作曲。他的弟弟写道：「在开始愉快的工作之前，彼得总是先忙着把不愉快的工作做完。」</p><p>午餐后是达尔文的写信时间。他通常自己写信，但如果有很多信要写，他会简单写个草稿后口述找人听写。达尔文非常坚持每一封收到的信都要回，即使是非常愚笨或古怪的人写来的亦然。要是有信没回，他就会觉得良心不安，甚至整晚辗转反侧。</p><p>村上春树的时间表一成不变：凌晨四点起床，工作五六个小时，下午跑步或游泳、处理杂务、阅读、听音乐，晚上九点上床。这样的作息有一个缺点，那就是没留多少社交的时间。他在2008年的一篇文章中写道，「你一再拒绝别人的邀请，结果冒犯了他们。」但村上春树认为，与读者的关系比维系社交更为重要，他努力想让每一个新作品都比上一个有进步。</p><p><img src="https://cdn.sspai.com/editor/u_/cajhev5b34tcvgn49g20.png" alt>村上春树的工作台。<a href="https://www.harukimurakami.com/author" target="_blank" rel="noopener">图源</a></p><h3 id="小结-3"><a class="header-anchor" href="#小结-3">¶</a>小结</h3><h2 id="伟大的创作者大多相似：他们怀有对自己从事的事业发自内心的狂热，并有着常人难以企及的才华，极为专注地投入到每天的创作中去。这样的狂热对我们其实是一份奢求。大部分人并不知道自己热爱什么，也不知道如何寻找它，对于现在的工作心生厌倦却没有勇气告别。库克曾说：「我以前的老板乔布斯曾说过一句很深刻的话，『当你找到自己的热情所在，你的心会告诉你。如果你还没有找到，应该继续寻找。』因为你期望感受到这份热情，找到工作的意义"><a class="header-anchor" href="#伟大的创作者大多相似：他们怀有对自己从事的事业发自内心的狂热，并有着常人难以企及的才华，极为专注地投入到每天的创作中去。这样的狂热对我们其实是一份奢求。大部分人并不知道自己热爱什么，也不知道如何寻找它，对于现在的工作心生厌倦却没有勇气告别。库克曾说：「我以前的老板乔布斯曾说过一句很深刻的话，『当你找到自己的热情所在，你的心会告诉你。如果你还没有找到，应该继续寻找。』因为你期望感受到这份热情，找到工作的意义">¶</a>伟大的创作者大多相似：他们怀有对自己从事的事业发自内心的狂热，并有着常人难以企及的才华，极为专注地投入到每天的创作中去。这样的狂热对我们其实是一份奢求。大部分人并不知道自己热爱什么，也不知道如何寻找它，对于现在的工作心生厌倦却没有勇气告别。库克曾说：「我以前的老板乔布斯曾说过一句很深刻的话，『当你找到自己的热情所在，你的心会告诉你。如果你还没有找到，应该继续寻找。』因为你期望感受到这份热情，找到工作的意义</h2><p>你所做的对这个世界是有意义的，能够让世界有所不同。如果你找到了，一切都会变得不同。你的心会告诉你，因为你能真切地感受到每天早上起床，精神焕发、充满动力；否则就不会有这种感觉。所以如果大家还没有找到自己的热情所在，我鼓励大家继续寻找，我相信会找到的。」只有少数有能力和条件的幸运儿能够寻得这处活力的源泉，如果你愿意寻找，那就趁早出发，即使没有找到也不虚此生。</p><p>除了这份理想的狂热，也有一些更实际的经验值得参考：</p><ul><li>设立简明的目标并坚持执行；</li><li>为自己安排一个舒适的工作环境；</li><li>在散步、洗澡等休闲中获得新鲜感，促进思考；</li><li>不在失去工作动力时勉强自己；</li><li>集中处理消息杂务，或者全部屏蔽掉。</li></ul><h2 id="关于休闲"><a class="header-anchor" href="#关于休闲">¶</a>关于休闲</h2><p>本文提到的很多创作者经常只在上午工作，整个下午和夜晚用于休息娱乐。他们的休闲方式与今天相比并不丰富：聊天、玩牌、看报、读书、健身、散步、洗澡、烟酒、与家人共度。对他们来说，休闲不仅不是可有可无的东西，而且至为必要。</p><h3 id="散步能给我提供创意"><a class="header-anchor" href="#散步能给我提供创意">¶</a>散步能给我提供创意</h3><p>柴可夫斯基午餐后会去散个长步。他的弟弟吐槽说：「他不知道什么时候在哪里听来说，为了健康该散步两小时，因此非常古板、迷信地遵守这个规则，仿佛只要早五分钟回来，就会生病，难以相信的厄运会接踵而至一样。」但是，柴可夫斯基的迷信或许有他的理由：散步对他的创作力很有必要，而且他常在途中停步记下他的想法，日后再在钢琴上谱写成曲。</p><p>伍迪*艾伦认为出门散步能给他提供创意，只是他不可能在大街上散步而不被人认出来搭讪。这让他难以专心。作为替代，他经常在自己的公寓阳台上走来走去。</p><p><img src="https://cdn.sspai.com/editor/u_/cajhevdb34tcvb1j9pfg.png" alt>伍迪*艾伦于 2011年戛纳电影节。<a href="https://commons.wikimedia.org/wiki/File:Le_cin%C3%A9aste_Woody_Allen.jpg" target="_blank" rel="noopener">图源</a></p><h3 id="「我发现在冷空气中沐浴对我的身体更好」"><a class="header-anchor" href="#「我发现在冷空气中沐浴对我的身体更好」">¶</a>「我发现在冷空气中沐浴对我的身体更好」</h3><p>据贝多芬的学生兼秘书说，贝多芬一天起码沐浴五次。他会穿着衣服站在盥洗台前，把大罐大罐的水倒在双手上，音调一阵高一阵低地吼叫，还有时对着自己大声哼唱。接着他一边瞪大眼睛东张西望，一边在屋子里大步流星，一下记东西，一下又恢复倒水和大声唱的仪式。房东抱怨他在地上洒了太多水，渗到楼下去了。</p><p>1851年，雨果在根西岛安顿下来，买下了一块「闹鬼」的旧居，在屋顶上建设了全玻璃的「瞭望台」。他每天从清晨写到十一点，然后在全玻璃的瞭望台中洗冷水澡，并用马毛手套摩擦全身。凡是经过的居民都可以由街上看到这幅景象。</p><p><img src="https://cdn.sspai.com/editor/u_/cajhevtb34tcve3bs7n0.png" alt>雨果在根西岛上的房子。[图源](<a href="https://commons.wikimedia.org/wiki/File:Victor_Hugo_%C3%A0_Hauteville_House_-" target="_blank" rel="noopener">https://commons.wikimedia.org/wiki/File:Victor_Hugo_à_Hauteville_House_-</a>_Guernesey.jpg#)</p><p>伍迪*艾伦认为淋浴能够给自己的创造力一点刺激。「我会站在那里，在热气弥漫中冲个三十分钟、三十五分钟，光是想想点子，揣摩情节，然后我出来，擦干、穿衣，扑通一声倒在床上继续想。」</p><p>富兰克林：「我发现在冷空气中沐浴对我的身体更好。为此，我几乎每天早上都早起，脱光衣服，坐在我的房间里，读书或写作半个或一个小时，时间长短视季节而定。这样做一点也不会痛苦，反而很舒服，而且有时候，如果我在穿衣之前再回到床上，可以补眠，再睡一两个小时你所能想象最舒服的觉。」</p><h3 id="「吸烟是人生中最快乐也最便宜的享受」"><a class="header-anchor" href="#「吸烟是人生中最快乐也最便宜的享受」">¶</a>「吸烟是人生中最快乐也最便宜的享受」</h3><p>佛洛依德酷爱雪茄，自二十几岁到去世，尽管医生再三警告和暮年身体问题愈发严重，他也坚持抽雪茄，每天可达二十支。他声称，「吸烟是人生中最快乐也最便宜的享受。」</p><p><img src="https://cdn.sspai.com/editor/u_/cajhf05b34tcvr93tung.png" alt>佛洛依德最著名的照片中就在抽雪茄。<a href="https://commons.wikimedia.org/wiki/File:Sigmund_Freud,_by_Max_Halberstadt_(cropped).jpg" target="_blank" rel="noopener">图源</a></p><p>马克思每晚七点从大英博物馆阅览室离开后，开始整夜的长时间工作，不停地抽烟。抽烟已经从奢侈的习惯变成了不可或缺的镇静剂，这对他的健康造成了永久损伤。他经常受肝病折磨，有时还有脓肿和眼睛发炎，这使他感到疲惫易怒。</p><p>康德给自己定的准则是一天只抽一管烟。但据说多年下来，他的烟斗尺寸大了不少。</p><p>巴尔扎克每天凌晨一点起身工作，一连写七个小时。早上八点，他小睡一个半小时，然后继续工作到下午四点。期间他灌下一杯又一杯的黑咖啡，据估计每天可以喝五十杯。</p><h3 id="小结-4"><a class="header-anchor" href="#小结-4">¶</a>小结</h3><p>正如每个人的生活习惯不尽相同一样，每个人喜欢的休闲方式也不同。篇幅所限，我们只列举了散步、洗澡、烟酒三类，但创作者们的休闲方式其实多姿多彩：有的创作者喜欢夜夜笙歌；有的热衷于打牌，没人陪也要一个人打；有的人喜欢与家人聊天（福楼拜工作前都要找他老妈聊到尽兴为止）。以上种种，读者也不必照单全收，例如吸烟酗酒夜夜笙歌就不是什么好习惯。每个人都应该找到一种适合自己大脑的休闲方式，让休闲能够充分地放松大脑，为工作助力。</p><p>创作者们的休闲并不是可有可无的，而是像睡眠一样，是大脑的必要调剂。有的创作者还把休闲作为自己创作的活力源泉。很多人想当然地认为伟大人物必定把一切能利用的时间都花在工作上，进而限制甚至消灭他们自己（或者他们子女）的休闲时间。休闲和睡眠同样重要，我们应当正视大脑休闲娱乐的需求，劳逸结合方能更好工作。</p><h2 id="结语：勿在浮沙筑高台"><a class="header-anchor" href="#结语：勿在浮沙筑高台">¶</a>结语：勿在浮沙筑高台</h2><p>读者不难发现：本文的核心与其说是在讨论「创作者」，不如说是在讨论「大脑」。有研究表明，人类的大脑基因已经有约 5800年没有升级了，它所适应的环境还在新石器时代。本质上，我们和创作者们的大脑没有区别，这是我们在如此巨大的时代差异下，仍能参考他们日常生活经验的最大基础。</p><p>数字时代的洪流裹挟着爆炸的信息流而来，众多效率工具、高效方法论和工作流方案应运而生。我们用这些华丽的工具建起辉煌的效率大厦，却忽视了它的地基其实并不坚实。人类的大脑并非精准的机器，想让它专注地工作，发挥出最大效率，需要苛刻的条件：</p><ul><li>对工作内容的热爱；</li><li>尽量少的干扰，它们可能来自电子设备、生活琐事或环境；</li><li>有一定规律性的安排；</li><li>足够的休息和玩耍。</li></ul><p>在这样的浮沙之上，我们需要慎重地选择效率工具，而不是被它们的外表所迷惑。</p><ul><li>它是核心事务必需的吗？</li><li>它能帮助大脑专注，还是使大脑分心？</li></ul><p>我们必须承认：大脑每天能够专注和高效的时间是有限的。我们所能做的是尽可能保证这些时间的高质量，发挥其最大效用。至于其余的时间段，我们应当给予它充分的休息或娱乐。</p><p>当你困的时候，睡吧！</p><p>当你工作不下去的时候，摸吧！</p><p>当你无所事事的时候，玩吧！</p><p>愿所有伟大的创作者保佑你，脑门！</p><p><strong>关 联阅读</strong></p><ol><li><a href="https://dailyroutines.typepad.com/" target="_blank" rel="noopener">博客「日常作息」</a></li><li>根据博客「日常作息」整理的著作：原版：Mason Currey. Daily Rituals: How Artists Work[M]. New York: Knopf, 2013.台版：[美]梅森<em>柯瑞. 創作者的日常生活[M]. 台北: 聯經出版, 2014.陆版：[美]梅森</em>柯里. 创作者的一天世界[M]. 上海: 上海文艺出版社, 2021.</li></ol><p>两岸版本的译者均为庄安祺。文中大部分引言以台版《創作者的日常生活》为本，考虑到两岸用语习惯的差异以及篇幅，在保留原意的基础上有少许删改。</p><ol start="3"><li>格拉宁. 奇特的一生[M]. 北京: 外国文学出版社, 1979.</li><li>陈也辰, 王钦双. 毛泽东的1949[M]. 北京: 东方出版社, 2007.</li></ol><blockquote><p>下载 <a href="https://sspai.com/page/client" target="_blank" rel="noopener">少数派 2.0 客户端</a>、关注<a href="https://sspai.com/s/J71e" target="_blank" rel="noopener">少数派公众号</a>，解锁全新阅读体验 📰</p></blockquote><blockquote><p>实用、好用的 <a href="https://sspai.com/mall" target="_blank" rel="noopener">正版软件</a>，少数派为你呈现 🚀</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「转」&lt;a href=&quot;https://sspai.com/post/73779&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;跨时空圆桌：伟大创作者们如何安排日常生活&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="https://talengu.github.io/public/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="https://talengu.github.io/public/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>「转」Linux内核数据包bridge上转发流程</title>
    <link href="https://talengu.github.io/public/2022/07/06/linux/linux_bridge_forward/"/>
    <id>https://talengu.github.io/public/2022/07/06/linux/linux_bridge_forward/</id>
    <published>2022-07-06T16:00:04.000Z</published>
    <updated>2022-07-06T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址 <a href="https://blog.csdn.net/hhhhhyyyyy8/article/details/102133863" target="_blank" rel="noopener">blog.csdn.net</a>@hhhhhyyyyy8 @4.15.1</p></blockquote><h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><p>linux 内核源代码变动怎么这么大，handle_bridge 函数居然没有了，本来接着准备以 3.9.1 分析的，但发现和后面的又变了，还是以 4.15.1 现在电脑上用的版本分析吧。</p><p><strong>linux kernel：4.15.1</strong></p><p>先看三张图片</p><p><a href="https://blog.csdn.net/NW_NW_NW/article/details/76153027" target="_blank" rel="noopener">IMG skb桥转发蓝图</a><img src="/public/2022/07/06/linux/linux_bridge_forward/20191005153149853.jpg" alt></p><p><a href="https://blog.csdn.net/u012247418/article/details/90137663" target="_blank" rel="noopener">IMG linux TCP/IP L2层数据包接收流程</a><img src="/public/2022/07/06/linux/linux_bridge_forward/t_70.png" alt></p><p><a href="https://www.cnblogs.com/xuanxuanBOSS/p/11424290.html" target="_blank" rel="noopener">IMG 浅析ebtables的概念和一些基本应用</a><img src="/public/2022/07/06/linux/linux_bridge_forward/netfilter.png" alt></p><blockquote><p>tips: linux 内核版本不一样，流程函数会发生细微改变。</p></blockquote><a id="more"></a><h2 id="1-br-handle-frame"><a class="header-anchor" href="#1-br-handle-frame">¶</a>1. br_handle_frame()</h2><p>作用：</p><ol><li><p>对于需要转发的报文，调用 <code>NF_BR_PRE_ROUTING</code> 处钩子函数，结束后，进入 <code>br_handle_frame_finish()</code> 函数；</p></li><li><p>对于 STP 报文，调用 <code>NF_BR_LOCAL_IN</code> 处钩子函数，结束后，进入 <code>br_handle_local_finish()</code> 函数，在 <code>br_handle_local_finish()</code> 函数中会调用 <code>br_pass_frame_up()</code> 函数。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_input.c</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Return NULL if skb is handled</span></span><br><span class="line"><span class="comment"> * note: already called with rcu_read_lock</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">rx_handler_result_t</span> <span class="title">br_handle_frame</span><span class="params">(struct sk_buff **pskb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sk_buff</span> *<span class="title">skb</span> = *<span class="title">pskb</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *dest = eth_hdr(skb)-&gt;h_dest;</span><br><span class="line"><span class="keyword">br_should_route_hook_t</span> *rhook;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*如果是环回地址，直接返回RX_HANDLER_PASS*/</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(skb-&gt;pkt_type == PACKET_LOOPBACK))</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_PASS;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*判断源MAC地址是否是有效的地址，不是直接丢弃，源MAC地址不能是多播地址和全0地址*/</span></span><br><span class="line"><span class="keyword">if</span> (!is_valid_ether_addr(eth_hdr(skb)-&gt;h_source))</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"><span class="comment">/*判断是否是共享数据包，若是则clone该数据包；若clone时分配内存出错，返回NULL*/</span></span><br><span class="line">skb = skb_share_check(skb, GFP_ATOMIC);</span><br><span class="line"><span class="keyword">if</span> (!skb)</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_CONSUMED;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*获取dev对应的网桥端口*/</span></span><br><span class="line">p = br_port_get_rcu(skb-&gt;dev);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; BR_VLAN_TUNNEL) &#123;</span><br><span class="line"><span class="keyword">if</span> (br_handle_ingress_vlan_tunnel(skb, p,</span><br><span class="line">  nbp_vlan_group_rcu(p)))</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*特殊MAC地址处理*/</span></span><br><span class="line"><span class="comment">//如果目的mac地址是本地链路地址link local reserved addr (01:80:c2:00:00:0X) STP报文</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(is_link_local_ether_addr(dest))) &#123;</span><br><span class="line">u16 fwd_mask = p-&gt;br-&gt;group_fwd_mask_required;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * See IEEE 802.1D Table 7-10 Reserved addresses</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Assignment Value</span></span><br><span class="line"><span class="comment"> * Bridge Group Address01-80-C2-00-00-00</span></span><br><span class="line"><span class="comment"> * (MAC Control) 802.301-80-C2-00-00-01</span></span><br><span class="line"><span class="comment"> * (Link Aggregation) 802.301-80-C2-00-00-02</span></span><br><span class="line"><span class="comment"> * 802.1X PAE address01-80-C2-00-00-03</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 802.1AB LLDP 01-80-C2-00-00-0E</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Others reserved for future standardization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fwd_mask |= p-&gt;group_fwd_mask;</span><br><span class="line"><span class="keyword">switch</span> (dest[<span class="number">5</span>]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x00</span>:<span class="comment">/* Bridge Group Address */</span></span><br><span class="line"><span class="comment">/* If STP is turned off,</span></span><br><span class="line"><span class="comment">   then must forward to keep loop detection */</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;br-&gt;stp_enabled == BR_NO_STP ||</span><br><span class="line">    fwd_mask &amp; (<span class="number">1u</span> &lt;&lt; dest[<span class="number">5</span>]))</span><br><span class="line"><span class="keyword">goto</span> forward;</span><br><span class="line">*pskb = skb;</span><br><span class="line">__br_handle_local_finish(skb);</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_PASS;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="number">0x01</span>:<span class="comment">/* IEEE MAC (Pause) */</span></span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0E</span>:<span class="comment">/* 802.1AB LLDP */</span></span><br><span class="line">fwd_mask |= p-&gt;br-&gt;group_fwd_mask;</span><br><span class="line"><span class="keyword">if</span> (fwd_mask &amp; (<span class="number">1u</span> &lt;&lt; dest[<span class="number">5</span>]))</span><br><span class="line"><span class="keyword">goto</span> forward;</span><br><span class="line">*pskb = skb;</span><br><span class="line">__br_handle_local_finish(skb);</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_PASS;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">/* Allow selective forwarding for most other protocols */</span></span><br><span class="line">fwd_mask |= p-&gt;br-&gt;group_fwd_mask;</span><br><span class="line"><span class="keyword">if</span> (fwd_mask &amp; (<span class="number">1u</span> &lt;&lt; dest[<span class="number">5</span>]))</span><br><span class="line"><span class="keyword">goto</span> forward;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Deliver packet to local host only */</span></span><br><span class="line"><span class="comment">/*调用NF_BR_LOCAL_IN处钩子函数，结束后，进入br_handle_local_finish函数*/</span></span><br><span class="line">NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN, dev_net(skb-&gt;dev),</span><br><span class="line"><span class="literal">NULL</span>, skb, skb-&gt;dev, <span class="literal">NULL</span>, br_handle_local_finish);</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_CONSUMED;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">forward:</span><br><span class="line"><span class="keyword">switch</span> (p-&gt;state) &#123;</span><br><span class="line"><span class="comment">//网桥端口处于转发状态</span></span><br><span class="line"><span class="keyword">case</span> BR_STATE_FORWARDING:</span><br><span class="line">rhook = rcu_dereference(br_should_route_hook);</span><br><span class="line"><span class="keyword">if</span> (rhook) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*rhook)(skb)) &#123;</span><br><span class="line">*pskb = skb;</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_PASS;</span><br><span class="line">&#125;</span><br><span class="line">dest = eth_hdr(skb)-&gt;h_dest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* fall through */</span></span><br><span class="line"><span class="comment">/*网桥端口处于学习状态，处于转发状态也会执行下面的代码，因为上面的case没有break。*/</span></span><br><span class="line"><span class="keyword">case</span> BR_STATE_LEARNING:</span><br><span class="line"><span class="comment">/*数据包目的MAC为网桥的Mac，发往本地的数据包*/</span></span><br><span class="line"><span class="keyword">if</span> (ether_addr_equal(p-&gt;br-&gt;dev-&gt;dev_addr, dest))</span><br><span class="line">skb-&gt;pkt_type = PACKET_HOST;</span><br><span class="line"><span class="comment">/*调用NF_BR_PRE_ROUTING处钩子函数，结束后进入br_handle_frame_finish函数*/</span></span><br><span class="line">NF_HOOK(NFPROTO_BRIDGE, NF_BR_PRE_ROUTING,</span><br><span class="line">dev_net(skb-&gt;dev), <span class="literal">NULL</span>, skb, skb-&gt;dev, <span class="literal">NULL</span>,</span><br><span class="line">br_handle_frame_finish);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">drop:</span><br><span class="line">kfree_skb(skb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> RX_HANDLER_CONSUMED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关函数</p><h3 id="rx-handler-result-t-枚举类型"><a class="header-anchor" href="#rx-handler-result-t-枚举类型">¶</a><code>rx_handler_result_t</code> 枚举类型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> rx_handler_result &#123;</span><br><span class="line">RX_HANDLER_CONSUMED,</span><br><span class="line">RX_HANDLER_ANOTHER,</span><br><span class="line">RX_HANDLER_EXACT,</span><br><span class="line">RX_HANDLER_PASS,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> rx_handler_result <span class="keyword">rx_handler_result_t</span>;</span><br></pre></td></tr></table></figure><h3 id="is-valid-ether-addr"><a class="header-anchor" href="#is-valid-ether-addr">¶</a><code>is_valid_ether_addr()</code></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * is_valid_ether_addr - Determine if the given Ethernet address is valid</span></span><br><span class="line"><span class="comment"> * @addr: Pointer to a six-byte array containing the Ethernet address</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Check that the Ethernet address (MAC) is not 00:00:00:00:00:00, is not</span></span><br><span class="line"><span class="comment"> * a multicast address, and is not FF:FF:FF:FF:FF:FF.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Return true if the address is valid.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Please note: addr must be aligned to u16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_valid_ether_addr</span><span class="params">(<span class="keyword">const</span> u8 *addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* FF:FF:FF:FF:FF:FF is a multicast address so we don't need to</span></span><br><span class="line"><span class="comment"> * explicitly check for it here. */</span></span><br><span class="line"><span class="keyword">return</span> !is_multicast_ether_addr(addr) &amp;&amp; !is_zero_ether_addr(addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="br-handle-local-finish"><a class="header-anchor" href="#br-handle-local-finish">¶</a><code>br_handle_local_finish()</code></h3><p><code>br_handle_local_finish()</code> 函数中调用 <code>br_pass_fame_up()</code> 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">/* note: already called with rcu_read_lock */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">br_handle_local_finish</span><span class="params">(struct net *net, struct sock *sk, struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">p</span> = <span class="title">br_port_get_rcu</span>(<span class="title">skb</span>-&gt;<span class="title">dev</span>);</span></span><br><span class="line"> </span><br><span class="line">__br_handle_local_finish(skb);</span><br><span class="line"> </span><br><span class="line">BR_INPUT_SKB_CB(skb)-&gt;brdev = p-&gt;br-&gt;dev;</span><br><span class="line">br_pass_frame_up(skb);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-br-handle-frame-finish"><a class="header-anchor" href="#2-br-handle-frame-finish">¶</a>2. br_handle_frame_finish()</h2><p>作用：</p><p>网桥设备是否处于混杂模式，如果是，则会发一份到本地进行处理</p><p>如果是广播包，则会进行广播洪泛，并会发一份到本地处理</p><p>如果是组播包，则根据组播表进行组播转发，并发一份数数包到本地处理</p><p>如果是单播包，发往本地的单播包则送到本地处理，在 fdb 表中可以找到转发表项的单播包则进行转发，未知单播包在广播域内进行洪泛</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_input.c</span></span><br><span class="line"><span class="comment">/* note: already called with rcu_read_lock */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">br_handle_frame_finish</span><span class="params">(struct net *net, struct sock *sk, struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">p</span> = <span class="title">br_port_get_rcu</span>(<span class="title">skb</span>-&gt;<span class="title">dev</span>);</span></span><br><span class="line"><span class="keyword">enum</span> br_pkt_type pkt_type = BR_PKT_UNICAST;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_fdb_entry</span> *<span class="title">dst</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_mdb_entry</span> *<span class="title">mdst</span>;</span></span><br><span class="line"><span class="keyword">bool</span> local_rcv, mcast_hit = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *dest;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge</span> *<span class="title">br</span>;</span></span><br><span class="line">u16 vid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*如果网桥端口不存在或者网桥端口状态为BR_STATE_DISABLED，则丢弃*/</span></span><br><span class="line"><span class="keyword">if</span> (!p || p-&gt;state == BR_STATE_DISABLED)</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"><span class="comment">/*判断是否允许进入桥内，如果没有开启VLAN则所有数据包都可以进入，</span></span><br><span class="line"><span class="comment">如果开启了VLAN,则根据VLAN相应的规则，从桥上进行数据包转发。*/</span></span><br><span class="line"><span class="keyword">if</span> (!br_allowed_ingress(p-&gt;br, nbp_vlan_group_rcu(p), skb, &amp;vid))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"> </span><br><span class="line">nbp_switchdev_frame_mark(p, skb);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* insert into forwarding database after filtering to avoid spoofing */</span></span><br><span class="line">br = p-&gt;br;</span><br><span class="line"><span class="comment">/*如果网桥端口标志有BR_LEARNING,则更新fdb表。</span></span><br><span class="line"><span class="comment">    一般新建网桥端口p-&gt;flags=BR_LEARNING| BR_FLOOD | BR_MCAST_FLOOD | BR_BCAST_FLOOD*/</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; BR_LEARNING)</span><br><span class="line">br_fdb_update(br, p, eth_hdr(skb)-&gt;h_source, vid, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发往本地数据包标记，!!的作用是转换为bool值</span></span><br><span class="line">local_rcv = !!(br-&gt;dev-&gt;flags &amp; IFF_PROMISC);</span><br><span class="line">dest = eth_hdr(skb)-&gt;h_dest;</span><br><span class="line"><span class="comment">/*目的地址为多播地址*/</span></span><br><span class="line"><span class="keyword">if</span> (is_multicast_ether_addr(dest)) &#123;</span><br><span class="line"><span class="comment">/* by definition the broadcast is also a multicast address */</span></span><br><span class="line"><span class="comment">/*如果目的地址是广播地址，将数据包也发往本地一份*/</span></span><br><span class="line"><span class="keyword">if</span> (is_broadcast_ether_addr(dest)) &#123;</span><br><span class="line">pkt_type = BR_PKT_BROADCAST;</span><br><span class="line">local_rcv = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pkt_type = BR_PKT_MULTICAST;</span><br><span class="line"><span class="comment">//igmp snooping留给网桥子系统的外部接口函数，</span></span><br><span class="line"><span class="comment">//当网桥接收了igmp数据包后就会调用该函数进行后续处理</span></span><br><span class="line"><span class="keyword">if</span> (br_multicast_rcv(br, p, skb, vid))</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果网桥端口状态此时还是BR_STATE_LEARNING,则丢弃。</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;state == BR_STATE_LEARNING)</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"><span class="comment">//将网桥所属的net_device放入skb的私有数据中（struct br_input_skb_cb）</span></span><br><span class="line">BR_INPUT_SKB_CB(skb)-&gt;brdev = br-&gt;dev;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (IS_ENABLED(CONFIG_INET) &amp;&amp;</span><br><span class="line">    (skb-&gt;protocol == htons(ETH_P_ARP) ||</span><br><span class="line">     skb-&gt;protocol == htons(ETH_P_RARP))) &#123;</span><br><span class="line">br_do_proxy_suppress_arp(skb, br, vid, p);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (IS_ENABLED(CONFIG_IPV6) &amp;&amp;</span><br><span class="line">   skb-&gt;protocol == htons(ETH_P_IPV6) &amp;&amp;</span><br><span class="line">   br-&gt;neigh_suppress_enabled &amp;&amp;</span><br><span class="line">   pskb_may_pull(skb, <span class="keyword">sizeof</span>(struct ipv6hdr) +</span><br><span class="line"> <span class="keyword">sizeof</span>(struct nd_msg)) &amp;&amp;</span><br><span class="line">   ipv6_hdr(skb)-&gt;nexthdr == IPPROTO_ICMPV6) &#123;</span><br><span class="line">struct nd_msg *msg, _msg;</span><br><span class="line"> </span><br><span class="line">msg = br_is_nd_neigh_msg(skb, &amp;_msg);</span><br><span class="line"><span class="keyword">if</span> (msg)</span><br><span class="line">br_do_suppress_nd(skb, br, vid, p, msg);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">switch</span> (pkt_type) &#123;</span><br><span class="line"><span class="comment">//组播包</span></span><br><span class="line"><span class="keyword">case</span> BR_PKT_MULTICAST:</span><br><span class="line"><span class="comment">//获取组播转发项，设置local_rcv为true，组播包也要发往本地一份。</span></span><br><span class="line">mdst = br_mdb_get(br, skb, vid);</span><br><span class="line"><span class="keyword">if</span> ((mdst || BR_INPUT_SKB_CB_MROUTERS_ONLY(skb)) &amp;&amp;</span><br><span class="line">    br_multicast_querier_exists(br, eth_hdr(skb))) &#123;</span><br><span class="line"><span class="keyword">if</span> ((mdst &amp;&amp; mdst-&gt;host_joined) ||</span><br><span class="line">    br_multicast_is_router(br)) &#123;</span><br><span class="line">local_rcv = <span class="literal">true</span>;</span><br><span class="line">br-&gt;dev-&gt;stats.multicast++;</span><br><span class="line">&#125;</span><br><span class="line">mcast_hit = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">local_rcv = <span class="literal">true</span>;</span><br><span class="line">br-&gt;dev-&gt;stats.multicast++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//单播包</span></span><br><span class="line"><span class="keyword">case</span> BR_PKT_UNICAST:</span><br><span class="line"><span class="comment">//根据目的MAC地址查找fdb表，看是否有对应的表项</span></span><br><span class="line">dst = br_fdb_find_rcu(br, dest, vid);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果找到目的MAC对应的表项</span></span><br><span class="line"><span class="keyword">if</span> (dst) &#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> now = jiffies;</span><br><span class="line"><span class="comment">//送入上层处理</span></span><br><span class="line"><span class="keyword">if</span> (dst-&gt;is_local)</span><br><span class="line"><span class="keyword">return</span> br_pass_frame_up(skb);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (now != dst-&gt;used)</span><br><span class="line">dst-&gt;used = now;</span><br><span class="line"><span class="comment">//根据fdb转发表项进行转发，若这里local_rcv 为1,（即端口处于混杂模式IFF_PROMISC），则会克隆一份再转发</span></span><br><span class="line"><span class="comment">//传入的第一个参数dst-&gt;dst 即为要转发的目的端口</span></span><br><span class="line">br_forward(dst-&gt;dst, skb, local_rcv, <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//进行广播或者组播洪泛</span></span><br><span class="line"><span class="keyword">if</span> (!mcast_hit)</span><br><span class="line">br_flood(br, skb, pkt_type, local_rcv, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">br_multicast_flood(mdst, skb, local_rcv, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//local_rcv标记为1，送入上层处理。</span></span><br><span class="line"><span class="keyword">if</span> (local_rcv)</span><br><span class="line"><span class="keyword">return</span> br_pass_frame_up(skb);</span><br><span class="line"> </span><br><span class="line">out:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">drop:</span><br><span class="line">kfree_skb(skb);</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-br-pass-frame-up"><a class="header-anchor" href="#3-br-pass-frame-up">¶</a>3.br_pass_frame_up</h2><p>数据包的目的 MAC 是本地的单播报文，广播，组播和网桥处于混杂模式时，报文都会通过 br_pass_frame_up 函数交由上层处理。</p><p>作用：</p><p>调用 NF_BR_LOCAL_IN 处钩子函数，最后调用 br_netif_receive_skb 函数，绕一圈后，交友上层处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_input.c</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">br_pass_frame_up</span><span class="params">(struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_device</span> *<span class="title">indev</span>, *<span class="title">brdev</span> = <span class="title">BR_INPUT_SKB_CB</span>(<span class="title">skb</span>)-&gt;<span class="title">brdev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge</span> *<span class="title">br</span> = <span class="title">netdev_priv</span>(<span class="title">brdev</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_vlan_group</span> *<span class="title">vg</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pcpu_sw_netstats</span> *<span class="title">brstats</span> = <span class="title">this_cpu_ptr</span>(<span class="title">br</span>-&gt;<span class="title">stats</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//统计网桥设备上的收包流量数据</span></span><br><span class="line">u64_stats_update_begin(&amp;brstats-&gt;syncp);</span><br><span class="line">brstats-&gt;rx_packets++;</span><br><span class="line">brstats-&gt;rx_bytes += skb-&gt;len;</span><br><span class="line">u64_stats_update_end(&amp;brstats-&gt;syncp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取网桥设备上的VLAN组</span></span><br><span class="line">vg = br_vlan_group_rcu(br);</span><br><span class="line"><span class="comment">/* Bridge is just like any other port.  Make sure the</span></span><br><span class="line"><span class="comment"> * packet is allowed except in promisc modue when someone</span></span><br><span class="line"><span class="comment"> * may be running packet capture.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!(brdev-&gt;flags &amp; IFF_PROMISC) &amp;&amp;</span><br><span class="line">    !br_allowed_egress(vg, skb)) &#123;</span><br><span class="line">kfree_skb(skb);</span><br><span class="line"><span class="keyword">return</span> NET_RX_DROP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录数据包的收包网络设备</span></span><br><span class="line">indev = skb-&gt;dev;</span><br><span class="line"><span class="comment">//将数据包的收包设备改为网桥设备</span></span><br><span class="line"><span class="comment">//当再次进入__netif_receive_skb_core时就不会再次进入桥处理了，因为网桥上没有注册rx_handler 函数</span></span><br><span class="line">skb-&gt;dev = brdev;</span><br><span class="line"><span class="comment">//配置数据包vlan相关信息</span></span><br><span class="line">skb = br_handle_vlan(br, <span class="literal">NULL</span>, vg, skb);</span><br><span class="line"><span class="keyword">if</span> (!skb)</span><br><span class="line"><span class="keyword">return</span> NET_RX_DROP;</span><br><span class="line"><span class="comment">/* update the multicast stats if the packet is IGMP/MLD */</span></span><br><span class="line"><span class="comment">//如果数据包是组播，更新组播数据包的统计信息</span></span><br><span class="line">br_multicast_count(br, <span class="literal">NULL</span>, skb, br_multicast_igmp_type(skb),</span><br><span class="line">   BR_MCAST_DIR_TX);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用NF_BR_LOCAL_IN处钩子函数，最后调用br_netif_receive_skb函数。</span></span><br><span class="line"><span class="keyword">return</span> NF_HOOK(NFPROTO_BRIDGE, NF_BR_LOCAL_IN,</span><br><span class="line">       dev_net(indev), <span class="literal">NULL</span>, skb, indev, <span class="literal">NULL</span>,</span><br><span class="line">       br_netif_receive_skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次进入 netif_receive_skb，由于 skb-dev 被设置成了 bridge，而 bridge 设备的 rx_handler 函数是没有被设置的，所以就不会再次进入 bridge 逻辑，而直接进入了主机上层协议栈。</p><p>相关函数</p><h3 id="br-netif-receive-skb"><a class="header-anchor" href="#br-netif-receive-skb">¶</a><code>br_netif_receive_skb()</code></h3><p>可以看到在 br_netif_receive_skb() 函数中调用了 netif_receive_skb() 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">static int</span><br><span class="line">br_netif_receive_skb(struct net *net, struct sock *sk, struct sk_buff *skb)</span><br><span class="line">&#123;</span><br><span class="line">br_drop_fake_rtable(skb);</span><br><span class="line">return netif_receive_skb(skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-br-forward"><a class="header-anchor" href="#4-br-forward">¶</a>4. br_forward()</h2><p>不是发往本地的数据包，但在 fdb 表中能找到对应的表项，则进行转发 br_forward()，若在 fdb 表中找不到对应表项就进行洪泛 br_blood().</p><p>作用：</p><p>主要是调用__br_forward() 转发报文</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * br_forward - forward a packet to a specific port</span></span><br><span class="line"><span class="comment"> * @to: destination port</span></span><br><span class="line"><span class="comment"> * @skb: packet being forwarded</span></span><br><span class="line"><span class="comment"> * @local_rcv: packet will be received locally after forwarding</span></span><br><span class="line"><span class="comment"> * @local_orig: packet is locally originated</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Should be called with rcu_read_lock.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">br_forward</span><span class="params">(<span class="keyword">const</span> struct net_bridge_port *to,</span></span></span><br><span class="line"><span class="function"><span class="params">struct sk_buff *skb, <span class="keyword">bool</span> local_rcv, <span class="keyword">bool</span> local_orig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//should_deliver测试是否应该将该包转发出去</span></span><br><span class="line"><span class="keyword">if</span> (to &amp;&amp; should_deliver(to, skb)) &#123;</span><br><span class="line"><span class="comment">//如果local_rcv为1，表明端口为混杂模式，先clone一份数据包再进行转发</span></span><br><span class="line"><span class="keyword">if</span> (local_rcv)</span><br><span class="line">deliver_clone(to, skb, local_orig);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">__br_forward(to, skb, local_orig);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!local_rcv)</span><br><span class="line">kfree_skb(skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-br-forward"><a class="header-anchor" href="#5-br-forward">¶</a>5. __br_forward()</h2><p>作用:</p><p>__br_forward() 函数根据数据包的来源（local_orig）分别进入不同的钩子点，如果数据包是从本地发出的，则进入 NF_BR_LOCAL_OUT，如果不是本地发出的，则进入 NF_BR_FORWARD 钩子，最后都进入 br_forward_finish() 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __br_forward(<span class="keyword">const</span> struct net_bridge_port *to,</span><br><span class="line"> struct sk_buff *skb, <span class="keyword">bool</span> local_orig)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_vlan_group</span> *<span class="title">vg</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_device</span> *<span class="title">indev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net</span> *<span class="title">net</span>;</span></span><br><span class="line"><span class="keyword">int</span> br_hook;</span><br><span class="line"><span class="comment">//获取vlan组，这个组中有许多的vlanid，br_handle_vlan函数就是要在这个组中查找自己的vid</span></span><br><span class="line">vg = nbp_vlan_group_rcu(to);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加vlan的相关配置</span></span><br><span class="line">skb = br_handle_vlan(to-&gt;br, to, vg, skb);</span><br><span class="line"><span class="keyword">if</span> (!skb)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//记录数据包的原始收包网络设备</span></span><br><span class="line">indev = skb-&gt;dev;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将skb的dev修改为出口网络设备</span></span><br><span class="line">skb-&gt;dev = to-&gt;dev;</span><br><span class="line"><span class="comment">/*如果local_orig标志位(判断是否从本地发出的数据包)为false，就进入NF_BR_FORWARD钩子</span></span><br><span class="line"><span class="comment">若为true，就进入NF_BR_LOCAL_OUT钩子点*/</span></span><br><span class="line"><span class="keyword">if</span> (!local_orig) &#123;</span><br><span class="line"><span class="keyword">if</span> (skb_warn_if_lro(skb)) &#123;</span><br><span class="line">kfree_skb(skb);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不是本地发出的数据包，进入NF_BR_FORWARD</span></span><br><span class="line">br_hook = NF_BR_FORWARD;</span><br><span class="line">skb_forward_csum(skb);</span><br><span class="line">net = dev_net(indev);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (unlikely(netpoll_tx_running(to-&gt;br-&gt;dev))) &#123;</span><br><span class="line"><span class="keyword">if</span> (!is_skb_forwardable(skb-&gt;dev, skb)) &#123;</span><br><span class="line">kfree_skb(skb);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">skb_push(skb, ETH_HLEN);</span><br><span class="line">br_netpoll_send_skb(to, skb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若是本地发出的数据包，进入NF_BR_LOCAL_OUT处理</span></span><br><span class="line">br_hook = NF_BR_LOCAL_OUT;</span><br><span class="line">net = dev_net(skb-&gt;dev);</span><br><span class="line">indev = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入钩子点，最后执行br_forward_finish函数。</span></span><br><span class="line">NF_HOOK(NFPROTO_BRIDGE, br_hook,</span><br><span class="line">net, <span class="literal">NULL</span>, skb, indev, skb-&gt;dev,</span><br><span class="line">br_forward_finish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-br-forward-finish"><a class="header-anchor" href="#6-br-forward-finish">¶</a>6. br_forward_finish()</h2><p><code>br_forward_finish()</code> 函数比较简单，调用 <code>NF_BR_POST_ROUTING</code> 处的钩子函数，最后进入 <code>br_dev_queue_push_xmit</code> 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">br_forward_finish</span><span class="params">(struct net *net, struct sock *sk, struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> NF_HOOK(NFPROTO_BRIDGE, NF_BR_POST_ROUTING,</span><br><span class="line">       net, sk, skb, <span class="literal">NULL</span>, skb-&gt;dev,</span><br><span class="line">       br_dev_queue_push_xmit);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-br-dev-queue-push-xmit"><a class="header-anchor" href="#7-br-dev-queue-push-xmit">¶</a>7. br_dev_queue_push_xmit</h2><p>在 <code>br_dev_queue_push_xmit()</code> 中，会先 <code>skb_push(skb,ETH,HLEN);</code> 将 data 指向二层头部，然后调用 <code>dev_queue_xmit()</code> 发送报文。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">br_dev_queue_push_xmit</span><span class="params">(struct net *net, struct sock *sk, struct sk_buff *skb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!is_skb_forwardable(skb-&gt;dev, skb))</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//注意这句操作</span></span><br><span class="line">skb_push(skb, ETH_HLEN);</span><br><span class="line">br_drop_fake_rtable(skb);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (skb-&gt;ip_summed == CHECKSUM_PARTIAL &amp;&amp;</span><br><span class="line">    (skb-&gt;protocol == htons(ETH_P_8021Q) ||</span><br><span class="line">     skb-&gt;protocol == htons(ETH_P_8021AD))) &#123;</span><br><span class="line"><span class="keyword">int</span> depth;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!__vlan_get_protocol(skb, skb-&gt;protocol, &amp;depth))</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"> </span><br><span class="line">skb_set_network_header(skb, depth);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">dev_queue_xmit(skb);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">drop:</span><br><span class="line">kfree_skb(skb);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-br-flood"><a class="header-anchor" href="#8-br-flood">¶</a>8. br_flood</h2><p><code>br_flood()</code> 也是调用 <code>__br_forward()</code> 函数转发报文。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="comment">/* called under rcu_read_lock */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">br_flood</span><span class="params">(struct net_bridge *br, struct sk_buff *skb,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">enum</span> br_pkt_type pkt_type, <span class="keyword">bool</span> local_rcv, <span class="keyword">bool</span> local_orig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 igmp_type = br_multicast_igmp_type(skb);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">prev</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">p</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*遍历网桥设备的port_list，取出所有的网桥端口*/</span></span><br><span class="line">list_for_each_entry_rcu(p, &amp;br-&gt;port_list, <span class="built_in">list</span>) </span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">/* Do not flood unicast traffic to ports that turn it off, nor</span></span><br><span class="line"><span class="comment"> * other traffic if flood off, except for traffic we originate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">switch</span> (pkt_type) </span><br><span class="line">                &#123;</span><br><span class="line"><span class="keyword">case</span> BR_PKT_UNICAST:</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; BR_FLOOD))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BR_PKT_MULTICAST:</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; BR_MCAST_FLOOD) &amp;&amp; skb-&gt;dev != br-&gt;dev)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BR_PKT_BROADCAST:</span><br><span class="line"><span class="keyword">if</span> (!(p-&gt;flags &amp; BR_BCAST_FLOOD) &amp;&amp; skb-&gt;dev != br-&gt;dev)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Do not flood to ports that enable proxy ARP */</span></span><br><span class="line">                <span class="comment">/*代理arp*/</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;flags &amp; BR_PROXYARP)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> ((p-&gt;flags &amp; (BR_PROXYARP_WIFI | BR_NEIGH_SUPPRESS)) &amp;&amp;</span><br><span class="line">    BR_INPUT_SKB_CB(skb)-&gt;proxyarp_replied)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">prev = maybe_deliver(prev, p, skb, local_orig);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(prev))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"><span class="keyword">if</span> (prev == p)</span><br><span class="line">br_multicast_count(p-&gt;br, p, skb, igmp_type,</span><br><span class="line">   BR_MCAST_DIR_TX);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!prev)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (local_rcv)</span><br><span class="line">deliver_clone(prev, skb, local_orig);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">__br_forward(prev, skb, local_orig);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">out:</span><br><span class="line"><span class="keyword">if</span> (!local_rcv)</span><br><span class="line">kfree_skb(skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-br-mulicast-flood"><a class="header-anchor" href="#9-br-mulicast-flood">¶</a>9. br_mulicast_flood()</h2><hr><p>以后再分析，肚子饿了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//linux/net/bridge/br_forward.c</span></span><br><span class="line"><span class="comment">/* called with rcu_read_lock */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">br_multicast_flood</span><span class="params">(struct net_bridge_mdb_entry *mdst,</span></span></span><br><span class="line"><span class="function"><span class="params">struct sk_buff *skb,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">bool</span> local_rcv, <span class="keyword">bool</span> local_orig)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_device</span> *<span class="title">dev</span> = <span class="title">BR_INPUT_SKB_CB</span>(<span class="title">skb</span>)-&gt;<span class="title">brdev</span>;</span></span><br><span class="line">u8 igmp_type = br_multicast_igmp_type(skb);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge</span> *<span class="title">br</span> = <span class="title">netdev_priv</span>(<span class="title">dev</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">prev</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port_group</span> *<span class="title">p</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hlist_node</span> *<span class="title">rp</span>;</span></span><br><span class="line"> </span><br><span class="line">rp = rcu_dereference(hlist_first_rcu(&amp;br-&gt;router_list));</span><br><span class="line">p = mdst ? rcu_dereference(mdst-&gt;ports) : <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (p || rp) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net_bridge_port</span> *<span class="title">port</span>, *<span class="title">lport</span>, *<span class="title">rport</span>;</span></span><br><span class="line"> </span><br><span class="line">lport = p ? p-&gt;port : <span class="literal">NULL</span>;</span><br><span class="line">rport = rp ? hlist_entry(rp, struct net_bridge_port, rlist) :</span><br><span class="line">     <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)lport &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>)rport) &#123;</span><br><span class="line">port = lport;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (port-&gt;flags &amp; BR_MULTICAST_TO_UNICAST) &#123;</span><br><span class="line">maybe_deliver_addr(lport, skb, p-&gt;eth_addr,</span><br><span class="line">   local_orig);</span><br><span class="line"><span class="keyword">goto</span> delivered;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">port = rport;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">prev = maybe_deliver(prev, port, skb, local_orig);</span><br><span class="line">delivered:</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(prev))</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"><span class="keyword">if</span> (prev == port)</span><br><span class="line">br_multicast_count(port-&gt;br, port, skb, igmp_type,</span><br><span class="line">   BR_MCAST_DIR_TX);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)lport &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)port)</span><br><span class="line">p = rcu_dereference(p-&gt;next);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)rport &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)port)</span><br><span class="line">rp = rcu_dereference(hlist_next_rcu(rp));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!prev)</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (local_rcv)</span><br><span class="line">deliver_clone(prev, skb, local_orig);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">__br_forward(prev, skb, local_orig);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">out:</span><br><span class="line"><span class="keyword">if</span> (!local_rcv)</span><br><span class="line">kfree_skb(skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a class="header-anchor" href="#参考">¶</a>参考</h2><p><a href="http://ebtables.netfilter.org/br_fw_ia/br_fw_ia.html" target="_blank" rel="noopener">ebtables/iptables interaction on a Linux-based bridge</a>@ebtables @2.4.x kernel</p><p><a href="https://blog.csdn.net/sxd2001/article/details/125031113" target="_blank" rel="noopener">Iptables DNAT实现broadcast与unicast之间相互映射</a>@sxd2001 分析ebtables 的redirect 和 iptables 的redirect</p><p><a href="https://blog.csdn.net/Sophisticated_/article/details/87923362" target="_blank" rel="noopener">Linux-4.20.8内核桥收包源码解析（七）--本地（br_pass_frame_up）or 转发（br_forward）</a>@lw_yang @Linux-4.20.8</p><p><a href="http://blog.chinaunix.net/uid-28541347-id-5750406.html" target="_blank" rel="noopener">Linux 3.10 kernel bridge转发逻辑</a>@lvyilong316 @Linux 3.10 kernel</p><p><a href="https://blog.csdn.net/linyt/article/details/5191512" target="_blank" rel="noopener">kernel 网桥代码分析</a>@海枫 @ 2.6.24.4</p><p><a href="https://blog.csdn.net/NW_NW_NW/article/details/76674232" target="_blank" rel="noopener">桥数据包处理函数——br_handle_frame_finish（七）</a>@不留你的名字</p><p><a href="https://www.cnblogs.com/super-king/p/bridge_implement.html" target="_blank" rel="noopener">Bridge实现</a>@SuperKing @linux 2.6.18</p><p><a href="https://www.cnblogs.com/ck1020/p/5894235.html" target="_blank" rel="noopener">LInux下桥接模式详解三</a>@jack.chen @linux 3.10.1</p><p><a href="https://blog.csdn.net/one_clouder/article/details/52877737" target="_blank" rel="noopener">协议栈报文接收之netif_receive_skb函数分析</a>@one_clouder @Linux4.1.12</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址 &lt;a href=&quot;https://blog.csdn.net/hhhhhyyyyy8/article/details/102133863&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blog.csdn.net&lt;/a&gt;
@hhhhhyyyyy8 @4.15.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#前言&quot;&gt;¶&lt;/a&gt;前言&lt;/h2&gt;
&lt;p&gt;linux 内核源代码变动怎么这么大，handle_bridge 函数居然没有了，本来接着准备以 3.9.1 分析的，但发现和后面的又变了，还是以 4.15.1 现在电脑上用的版本分析吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;linux kernel：4.15.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先看三张图片&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/NW_NW_NW/article/details/76153027&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IMG skb桥转发蓝图&lt;/a&gt;
&lt;img src=&quot;/public/2022/07/06/linux/linux_bridge_forward/20191005153149853.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u012247418/article/details/90137663&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IMG linux TCP/IP L2层数据包接收流程&lt;/a&gt;
&lt;img src=&quot;/public/2022/07/06/linux/linux_bridge_forward/t_70.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xuanxuanBOSS/p/11424290.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IMG 浅析ebtables的概念和一些基本应用&lt;/a&gt;
&lt;img src=&quot;/public/2022/07/06/linux/linux_bridge_forward/netfilter.png&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tips: linux 内核版本不一样，流程函数会发生细微改变。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://talengu.github.io/public/categories/Linux/"/>
    
    
      <category term="bridge" scheme="https://talengu.github.io/public/tags/bridge/"/>
    
      <category term="netfilter" scheme="https://talengu.github.io/public/tags/netfilter/"/>
    
  </entry>
  
  <entry>
    <title>「转」tcpdump是在哪儿抓到的包？</title>
    <link href="https://talengu.github.io/public/2022/07/01/linux/how_tcpdump/"/>
    <id>https://talengu.github.io/public/2022/07/01/linux/how_tcpdump/</id>
    <published>2022-07-01T16:00:04.000Z</published>
    <updated>2022-07-01T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址 <a href="https://cloud.tencent.com/developer/article/1879646" target="_blank" rel="noopener">cloud.tencent.com</a></p></blockquote><blockquote><p>最近使用 tcpdump 的时候突然想到这个问题。因为我之前只存在一些一知半解的认识：比如直接镜像了网卡的包、在数据包进入内核前就获取了。但这些认识真的正确么？针对...</p></blockquote><p>最近使用 tcpdump 的时候突然想到这个问题。因为我之前只存在一些一知半解的认识：比如直接镜像了网卡的包、在数据包进入内核前就获取了。但这些认识真的正确么？针对这个问题，我进行了一番学习探究。</p><p>先说结论：通过 PF_PACKET 这个特殊的套接字协议，直接接收来自链路层的帧。数据包<strong>并非没有</strong>进入内核，而是在进入内核后直接跳过了内核中三层 / 四层的协议栈，直达套接字接口，被应用层的 tcpdump 所使用。实际上，在网卡驱动程序通知内核接受到数据帧的时候，数据包就已经进入了内核处理流程。具体的区别，可以见下图。</p><p><img src="/public/2022/07/01/linux/how_tcpdump/1620.png" alt></p><p>内核网络协议栈示意图</p><a id="more"></a><p>先来看看，普通的套接字的收包路径在内核中是怎么样。</p><p>以最常见的以太网网卡，当网卡接口接收到了一个帧，那么接受者知道它一定包含了一个 Ethernet 报头。封包在协议栈向上传递过程中，一定会在报头中包含一个字段，指出下一阶段的处理应该使用哪一个协议。 以太网卡拥有特定的 MAC 地址，在监听数据帧的时候，当看到帧的目的 MAC 地址与自己的地址或者链路层广播地址（FF:FF:FF:FF:FF:FF）相匹配，就会通过 DMA 把该帧读取到内存中的 ring buffer。</p><p>当一个数据帧被写入到内存后，将产生一个硬件中断请求，以通知 CPU 收到了数据包。操作系统为了减少硬中断产生的次数，会采用一个软中断 (softirq) 唤醒 NAPI 子系统。这样会产生一个单独的线程，调用网卡驱动注册的 poll 方法收包，同时禁止网卡产生新的硬中断，这样的效果便是一次中断可以接收多个包。一旦软终端代码判断有 softirq 处于 pending 状态，便会调用软终端处理函数 net_rx_action。</p><p>中断处理函数会在处理循环中调用 NAPI poll 来接收数据包。poll 方法会分配一个 sk_buff 数据结构（include/linux/skbuff.h），表示该数据包的内核视图。然后将数据从缓冲区提取到新建的 sk_buff 中，并对其中的 protocol 字段做初始化，该字段用以识别特定的协议。之后这个字段会被 netif_receive_skb 内核函数查询，用来确定该执行哪个函数来处理三层的封包。字段涉及协议的值都列在了 include/uapi/linux/if_ether.h 中，名字形如 ETH_P_XXX，比如 ip 协议为 ETH_P_IP。而有一种特殊情况，单一封包可以传递给多个处理函数，这就是 tcpdump 等网络嗅探应用会用到的 ETH_P_ALL。</p><p>软终端处理循环的最后是通过 netif_receive_skb 函数将将数据交给 TCP/IP 协议栈的。它会从数据包包头中取出协议信息，然后遍历注册在这个协议上的回调函数列表。这里的列表值得一提，分别是 ptype_all 和 ptype_base。他们是 hash table 数据结构，分别对应通用数据包（ETH_P_ALL 类型）和特定协议的数据包（ETH_P_XXX 类型），其中存放着指向对应协议处理函数的指针，当收到该类型的数据包时便调用对应的处理函数。</p><p>因此，以 IP 数据包为例，当 ETH_P_IP 类型数据包出队后，软中断处理程序 net_rx_action 最终会在 ptype_base 列表中找到 IP 协议的处理函数 ip_rcv() 并调用它，完成数据包向上提交到协议栈。这里略过 IP 协议栈的处理过程，简而言之，在经过 IP 数据包完整性校验、Netfilter 子系统（iptables 的底层实现）、路由子系统等等一些列流程之后，开始准备送往高层协议。这里的处理和 net_rx_action 很相似，从 IP 数据包头部提取出协议类型后，通过名为 inet_protos 的哈希来寻找高层协议的处理函数，每个高层协议都对应一个处理函数，型如 tcp_v4_rcv(), udp_rcv() 等。</p><p>四层协议以较为简单的 UDP 为例，udp_rcv 会对 udp 包进行合法性校验，然后查找是否有愿意接收此数据包的套接字，如果找到，__udp_queue_rcv_skb 会将包放到 socket 的接收队列。最后，所有在这个 socket 上等待数据的进程都会收到通过 sk_data_ready 函数处理的通知。</p><p>以上是一个数据包穿越协议栈到达 socket 的简要过程，实际的内核处理过程会复杂的多，这里只是做简要的描述。以引入本文的主角：PF_PACKET 协议数据包在内核中的处理路径。</p><p>当创建 PF_PACKET 套接字时，与协议相关的数据包类型将被同时注册进 ptype_all 和 ptype_base，接受函数为 packet_rcb()。此时，net_rx_action 函数会拦截所有进入机器的包，并同样通过 netif_receive_skb 函数遍历 ptype_all 后，传递给 PF_PACKET 接受函数。值得一提的是，tcpdump 依赖的 libpcap 库并非使用原始套接字 + recvfrom 的方式收包，而是在内核空间分配一块内核缓冲区，然后用户空间调用 mmap 系统调用映射到用户空间。</p><h2 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h2><p><a href="https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/" target="_blank" rel="noopener">Monitoring and Tuning the Linux Networking Stack: Receiving Data</a></p><p><a href="https://www.linuxjournal.com/article/4852" target="_blank" rel="noopener">Inside the Linux Packet Filter</a></p><p><a href="https://km.woa.com/group/17746/articles/show/%E5%9B%BE%E8%A7%A3linux%20tcpdump" target="_blank" rel="noopener">图解 linux tcpdump</a></p><p>《深入理解 Linux 网络技术内幕》</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址 &lt;a href=&quot;https://cloud.tencent.com/developer/article/1879646&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cloud.tencent.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最近使用 tcpdump 的时候突然想到这个问题。因为我之前只存在一些一知半解的认识：比如直接镜像了网卡的包、在数据包进入内核前就获取了。但这些认识真的正确么？针对...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近使用 tcpdump 的时候突然想到这个问题。因为我之前只存在一些一知半解的认识：比如直接镜像了网卡的包、在数据包进入内核前就获取了。但这些认识真的正确么？针对这个问题，我进行了一番学习探究。&lt;/p&gt;
&lt;p&gt;先说结论：通过 PF_PACKET 这个特殊的套接字协议，直接接收来自链路层的帧。数据包&lt;strong&gt;并非没有&lt;/strong&gt;进入内核，而是在进入内核后直接跳过了内核中三层 / 四层的协议栈，直达套接字接口，被应用层的 tcpdump 所使用。实际上，在网卡驱动程序通知内核接受到数据帧的时候，数据包就已经进入了内核处理流程。具体的区别，可以见下图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/public/2022/07/01/linux/how_tcpdump/1620.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;内核网络协议栈示意图&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://talengu.github.io/public/categories/Linux/"/>
    
    
      <category term="tcpdump" scheme="https://talengu.github.io/public/tags/tcpdump/"/>
    
  </entry>
  
  <entry>
    <title>使用脚本将英文rss转成中文rss</title>
    <link href="https://talengu.github.io/public/2022/05/08/rss_google_translate/"/>
    <id>https://talengu.github.io/public/2022/05/08/rss_google_translate/</id>
    <published>2022-05-08T22:00:04.000Z</published>
    <updated>2022-05-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><p>本文中我们将英文rss 自动转成中文 rss供ttrss使用。（利用谷歌翻译）</p><p>方便在手机上进行阅读或者收听。<img src="/public/2022/05/08/rss_google_translate/20220508-22-28-27.png" alt></p><a id="more"></a><h2 id="举例"><a class="header-anchor" href="#举例">¶</a>举例</h2><p>国外有很多不错的rss源，比如:</p><ul><li><p><a href="http://www.mckinsey.com/insights/rss" target="_blank" rel="noopener">McKinsey Insights &amp; Publications</a><img src="/public/2022/05/08/rss_google_translate/20220508-22-18-23.png" alt>转成中文rss<img src="/public/2022/05/08/rss_google_translate/20220508-22-20-48.png" alt></p></li><li><p><a href="http://rss.acast.com/nature" target="_blank" rel="noopener">Nature Podcast</a><img src="/public/2022/05/08/rss_google_translate/20220508-22-25-04.png" alt>转成中文rss<img src="/public/2022/05/08/rss_google_translate/20220508-22-26-36.png" alt></p></li></ul><h2 id="脚本"><a class="header-anchor" href="#脚本">¶</a>脚本</h2><p>使用 Translate 和 BeautifulSoup 项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8 </span></span><br><span class="line"><span class="keyword">from</span> pygtrans <span class="keyword">import</span> Translate</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># pip 安装</span></span><br><span class="line"><span class="comment"># pip install pygtrans BeautifulSoup -i https://pypi.org/simple</span></span><br><span class="line"><span class="comment"># ref:https://zhuanlan.zhihu.com/p/390801784</span></span><br><span class="line"><span class="comment"># ref:https://beautifulsoup.readthedocs.io/zh_CN/latest/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># client = Translate()</span></span><br><span class="line"><span class="comment"># text = client.translate('Google Translate')</span></span><br><span class="line"><span class="comment"># print(text.translatedText)  # 谷歌翻译</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> feedparser</span><br><span class="line"></span><br><span class="line">args = sys.argv</span><br><span class="line">URL=<span class="string">"http://www.mckinsey.com/insights/rss"</span></span><br><span class="line"></span><br><span class="line">BASE=<span class="string">"/home/xxx/www/"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tran</span><span class="params">(url=URL,out_dir=BASE+<span class="string">"mckinsey_rss.xml"</span>)</span>:</span></span><br><span class="line">    GT = Translate()</span><br><span class="line">    content= request.urlopen(url).read().decode(<span class="string">'utf8'</span>)</span><br><span class="line">    <span class="comment"># 变tag，以使用谷歌翻译</span></span><br><span class="line">    content=content.replace(<span class="string">'title&gt;'</span>, <span class="string">'stitle&gt;'</span>) <span class="comment">#谷歌翻译会将很多titile去掉，所以需要换一个tag</span></span><br><span class="line">    content=content.replace( <span class="string">'&lt;pubDate&gt;'</span>,<span class="string">'&lt;pubDate&gt;&lt;span translate="no"&gt;'</span>) </span><br><span class="line">    <span class="comment"># 谷歌翻译对&lt;span translate="no"&gt; &lt;/span&gt; 不翻译。</span></span><br><span class="line">    content=content.replace( <span class="string">'&lt;/pubDate&gt;'</span>,<span class="string">'&lt;/span&gt;&lt;/pubDate&gt;'</span>)</span><br><span class="line">    <span class="comment">#print(content)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    _text = GT.translate(content)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(out_dir,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        c=_text.translatedText</span><br><span class="line">        <span class="comment"># 还原tag</span></span><br><span class="line">        c=c.replace(<span class="string">'stitle&gt;'</span>, <span class="string">'title&gt;'</span>)</span><br><span class="line">        c=c.replace(<span class="string">'&lt;span translate="no"&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">        c=c.replace(<span class="string">'&lt;/span&gt;&lt;/pubDate&gt;'</span>, <span class="string">'&lt;/pubDate&gt;'</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        f.write(c)</span><br><span class="line">        <span class="comment">#f.write(content)</span></span><br><span class="line">    print(<span class="string">"GT: "</span>+ url +<span class="string">" &gt; "</span>+ out_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(args)==<span class="number">1</span>:</span><br><span class="line">    tran()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    tran(args[<span class="number">1</span>],args[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tran_nature</span><span class="params">(url=<span class="string">"http://rss.acast.com/nature"</span>,out_dir=BASE+<span class="string">"nature_rss.xml"</span>)</span>:</span></span><br><span class="line">    GT = Translate()</span><br><span class="line">    </span><br><span class="line">    html_doc=request.urlopen(url).read().decode(<span class="string">'utf8'</span>)</span><br><span class="line">    soup = BeautifulSoup(html_doc)</span><br><span class="line"></span><br><span class="line">    items=soup.find_all(<span class="string">'item'</span>)</span><br><span class="line">    <span class="comment"># nature post内容太多，谷歌api翻译不了，去掉一些</span></span><br><span class="line">    <span class="keyword">for</span> idx,e <span class="keyword">in</span> enumerate(items):</span><br><span class="line">        <span class="keyword">if</span> idx &gt;<span class="number">8</span>:</span><br><span class="line">                e.decompose()</span><br><span class="line">    </span><br><span class="line">    content= str(soup)</span><br><span class="line">    content=content.replace(<span class="string">'title&gt;'</span>, <span class="string">'stitle&gt;'</span>)</span><br><span class="line">    content=content.replace( <span class="string">'&lt;pubdate&gt;'</span>,<span class="string">'&lt;pubDate&gt;&lt;span translate="no"&gt;'</span>)</span><br><span class="line">    content=content.replace( <span class="string">'&lt;/pubdate&gt;'</span>,<span class="string">'&lt;/span&gt;&lt;/pubdate&gt;'</span>)</span><br><span class="line">    <span class="comment">#print(content)</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    _text = GT.translate(content)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(out_dir,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        c=_text.translatedText</span><br><span class="line">        c=c.replace(<span class="string">'stitle&gt;'</span>, <span class="string">'title&gt;'</span>)</span><br><span class="line">        c=c.replace(<span class="string">'&lt;span translate="no"&gt;'</span>, <span class="string">''</span>)</span><br><span class="line">        c=c.replace(<span class="string">'&lt;/span&gt;&lt;/pubdate&gt;'</span>, <span class="string">'&lt;/pubDate&gt;'</span>) <span class="comment"># 对于ttrss需要为pubDate才会识别正确</span></span><br><span class="line">        c=c.replace(<span class="string">'&amp;gt'</span>,<span class="string">'&gt;'</span>) <span class="comment"># &amp;gt 会影响识别</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        f.write(c)</span><br><span class="line">        <span class="comment">#f.write(content)</span></span><br><span class="line">    print(<span class="string">"GT: "</span>+ url +<span class="string">" &gt; "</span>+ out_dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tran_nature()</span><br></pre></td></tr></table></figure><h3 id="定时任务"><a class="header-anchor" href="#定时任务">¶</a>定时任务</h3><blockquote><p>注意激活一下miniconda3 这个命令<code>source /home/xxx/miniconda3/bin/activate</code></p></blockquote><p>放到 <code>/etc/cron.daily/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> /home/xxx/miniconda3/bin/activate</span><br><span class="line">python /home/xxx/txxx.py</span><br></pre></td></tr></table></figure><h2 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h2><ul><li><a href="https://blog.csdn.net/wokuailewozihao/article/details/82021709" target="_blank" rel="noopener">利用Google翻译实现网站国际化——js插件</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文中我们将英文rss 自动转成中文 rss供ttrss使用。（利用谷歌翻译）&lt;/p&gt;
&lt;p&gt;方便在手机上进行阅读或者收听。
&lt;img src=&quot;/public/2022/05/08/rss_google_translate/20220508-22-28-27.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://talengu.github.io/public/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="rss" scheme="https://talengu.github.io/public/tags/rss/"/>
    
      <category term="python" scheme="https://talengu.github.io/public/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>rss统计 基于ttrss的PostgresQL数据库</title>
    <link href="https://talengu.github.io/public/2022/05/08/rss_ttrss_statics/"/>
    <id>https://talengu.github.io/public/2022/05/08/rss_ttrss_statics/</id>
    <published>2022-05-08T22:00:04.000Z</published>
    <updated>2022-05-08T22:00:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong>统计ttrss的使用数据。</p><ul><li>月度mark文件分析 OK</li></ul><p>TODO：</p><ul><li>全年阅读报告 doing</li></ul><a id="more"></a><h2 id="按月保存mark的内容"><a class="header-anchor" href="#按月保存mark的内容">¶</a>按月保存mark的内容</h2><p>账号 密码 和你docker文件里面的一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按月来保存</span></span><br><span class="line"><span class="keyword">import</span> html2text</span><br><span class="line"><span class="comment"># psycopg2 head</span></span><br><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"><span class="comment"># pip3 install psycopg2-binary</span></span><br><span class="line"><span class="comment"># ref:https://blog.csdn.net/Haiqiang1995/article/details/89069791</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_from_dataset</span><span class="params">(cmd_sql)</span>:</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># read database configuration</span></span><br><span class="line">        params = &#123;</span><br><span class="line">        <span class="string">'host'</span>: <span class="string">"?????"</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">"????"</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">"????"</span>,</span><br><span class="line">        <span class="string">'dbname'</span>: <span class="string">"ttrss"</span>,</span><br><span class="line">        'port': ??00</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># connect to the PostgresQL database</span></span><br><span class="line">        conn = psycopg2.connect(**params)</span><br><span class="line">        <span class="comment"># create a new cursor object</span></span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="comment"># execute the SELECT statement</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        print(cmd_sql)</span><br><span class="line">        cur.execute(cmd_sql)</span><br><span class="line"></span><br><span class="line">        blob = cur.fetchall()</span><br><span class="line">        <span class="comment"># blob = cur.fetchone()</span></span><br><span class="line">        <span class="comment">#open(path_to_dir + str(blob[0]) + '.jpg', 'wb').write(blob[1])</span></span><br><span class="line">        <span class="comment"># close the communication with the PostgresQL database</span></span><br><span class="line">        cur.close()</span><br><span class="line">    <span class="keyword">except</span> (Exception, psycopg2.DatabaseError) <span class="keyword">as</span> error:</span><br><span class="line">        print(error)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            conn.close()</span><br><span class="line">    print(<span class="string">"get_from_dataset success"</span>)</span><br><span class="line">    <span class="keyword">return</span> blob</span><br><span class="line"></span><br><span class="line">_s=<span class="string">"ref_id,feed_id,last_read,last_marked"</span></span><br><span class="line">cmd_sql=<span class="string">"SELECT %s  FROM public.ttrss_user_entries Where marked=TRUE AND last_marked BETWEEN '2022-04-01' And '2022-5-01'"</span> % _s</span><br><span class="line"><span class="comment"># 可以自己改日期</span></span><br><span class="line"></span><br><span class="line">g_content=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> _e <span class="keyword">in</span> sorted(get_from_dataset(cmd_sql),key=<span class="keyword">lambda</span> x:x[<span class="number">3</span>]):</span><br><span class="line">    [ref_id,feed_id,last_read,last_marked] = _e</span><br><span class="line">    _s=<span class="string">"id,title,link,updated,content"</span></span><br><span class="line">    cmd_sql=<span class="string">"SELECT %s FROM public.ttrss_entries WHERE id = %s"</span> % (_s,ref_id)</span><br><span class="line">    [id,title,link,updated,content] =get_from_dataset(cmd_sql)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    g_content += <span class="string">"# [%s](%s)\n"</span>%(title,link)</span><br><span class="line">    g_content +=<span class="string">"pubdata:%s\n"</span>%str(updated)</span><br><span class="line">    g_content +=<span class="string">"markdate:%s\n"</span>%str(last_marked)</span><br><span class="line">    g_content+=html2text.html2text(content)</span><br><span class="line">    </span><br><span class="line">    g_content+=<span class="string">"\n\n"</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">D=<span class="string">"C:\\Users\\talen\\Desktop\\"</span></span><br><span class="line"><span class="keyword">with</span> open(D+<span class="string">"cc.md"</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(g_content)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;
统计ttrss的使用数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;月度mark文件分析 OK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全年阅读报告 doing&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="https://talengu.github.io/public/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="rss" scheme="https://talengu.github.io/public/tags/rss/"/>
    
      <category term="python" scheme="https://talengu.github.io/public/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>本地安装rss</title>
    <link href="https://talengu.github.io/public/2022/04/16/rss_local_install/"/>
    <id>https://talengu.github.io/public/2022/04/16/rss_local_install/</id>
    <published>2022-04-16T12:39:04.000Z</published>
    <updated>2022-04-27T12:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong></p><p>在 “<a href="https://zhuanlan.zhihu.com/p/149452085" target="_blank" rel="noopener">二零年RSS杂谈</a>”中说到，我想建立一种信息的获取系统，免受广告和推荐算法的困扰。</p><p>我希望其的功能包括：</p><ul><li>多终端 Web、PC、 mobile的同步</li><li>全文获取能力</li><li>可自定义过滤规则</li><li>RSS源自定义</li></ul><p>方案：</p><ul><li>RSS源 rsshub</li><li>RSS服务  ttrss</li><li>RSS电脑手机软件：Android的Readably、Feedme，mac的reeder等等。windows上我暂时没有发现，我用的是ttrss的web界面。</li></ul><a id="more"></a><p>rsshub 是由 DIYgod 开发的开源RSS源生成工具，RSShub原始的网站可能不稳定，所以我选择了自己搭建。</p><p>ttrss 是一个rss源管理配置的工具，可获取全文，可自定义过滤规则。</p><p>本教程我们将完成在window电脑通过docker安装，ttrss与全文插件、rsshub的过程。</p><p>服务器的成本还是有点小贵的，我们可以在本地搭建整个服务，即利用docker安装这些服务，开机的时候记得启动这些服务。不爽点：</p><ul><li>需要后台开启docker服务，使得其自动更新信息</li><li>没有公网ip的情况下，无法全网连接服务</li></ul><h2 id="最终ttrss界面"><a class="header-anchor" href="#最终ttrss界面">¶</a>最终ttrss界面</h2><p>在这里我已经添加一些rss源了。</p><p><img src="/public/2022/04/16/rss_local_install/image-20200626135803804.png" alt="image-20200626135803804"></p><h2 id="docker-windows安装"><a class="header-anchor" href="#docker-windows安装">¶</a>docker windows安装</h2><p>从<a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">docker 官网</a> 下载windows版本安装。完成后，在图标区会有一个鲸鱼船。</p><p><img src="/public/2022/04/16/rss_local_install/image-20200626141604658.png" alt="image-20200626141604658"></p><p>我们使用docker-compose 来进行下一步 网站服务的安装。将下面的资料保存到s<code> docker-compose.yml</code> 然后利用docker-compose方法安装。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">service.rsshub:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">diygod/rsshub</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rsshub</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"1200:1200"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rsshub_data:/app/lib</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">service.rss:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wangqiru/ttrss:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ttrss</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8118</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SELF_URL_PATH=http://127.0.0.1:8118/</span> <span class="comment"># please change to your own domain</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_HOST=database.postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PORT=5432</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_NAME=ttrss</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_USER=postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_PASS=ttrss</span> <span class="comment"># please change the password</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ENABLE_PLUGINS=auth_internal,fever</span> <span class="comment"># auth_internal is required. Plugins enabled here will be enabled for all users as system plugins</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FEED_LOG_QUIET=true</span></span><br><span class="line">    <span class="attr">stdin_open:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">'sh /wait-for.sh $$DB_HOST:$$DB_PORT -- php /configure-db.php &amp;&amp; exec s6-svscan /etc/s6/'</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">database.postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=ttrss</span> <span class="comment"># please change the password</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres_data:/var/lib/postgresql/data</span> <span class="comment"># persist postgres data to ~/postgres/data/ on the host</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">service.mercury:</span> <span class="comment"># set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wangqiru/mercury-parser-api:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mercury</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">postgres_data:</span></span><br><span class="line">  <span class="attr">rsshub_data:</span></span><br></pre></td></tr></table></figure><p><img src="/public/2022/04/16/rss_local_install/image-20200626140114783.png" alt="image-20200626140114783"></p><p>在地址栏输入<code>cmd</code>，我们就可以打开cmd界面了，然后运行<code>docker-compose up -d</code> ，就可以自动安装全部内容了。</p><p><img src="/public/2022/04/16/rss_local_install/image-20200626134626593.png" alt="image-20200626134626593"></p><p>在地址栏输入<code>cmd</code> 然后回车，我们就能进入cmd界面，然后使用docker-compose，进行安装，网速好的话，安装很快。</p><p><img src="/public/2022/04/16/rss_local_install/image-20200626140147402.png" alt="image-20200626140147402"></p><p>安装完毕我们就可以使用了，下面是其资源占用情况。</p><table><thead><tr><th></th><th>内容</th><th>占用内存空间（M）</th></tr></thead><tbody><tr><td>mercury</td><td>全文获取ttrss插件</td><td>66.8</td></tr><tr><td>postgres</td><td>ttrss数据库</td><td>6.8</td></tr><tr><td>ttrss</td><td>ttrss工具</td><td>30.2</td></tr><tr><td>rsshub</td><td>rsshub各种b站源等等</td><td>142.4</td></tr><tr><td></td><td></td><td>246.2</td></tr></tbody></table><p><img src="/public/2022/04/16/rss_local_install/image-20200626140407183.png" alt="image-20200626140407183"></p><p>打开 <a href="http://127.0.0.1:8118/" target="_blank" rel="noopener">http://127.0.0.1:8118/</a></p><p>默认账户：admin 密码：password，请第一时间更改。</p><p><img src="/public/2022/04/16/rss_local_install/image-20200626143320968.png" alt="image-20200626143320968"></p><h2 id="在chrome安装-rsshub-radar"><a class="header-anchor" href="#在chrome安装-rsshub-radar">¶</a>在chrome安装 rsshub radar</h2><p><img src="/public/2022/04/16/rss_local_install/image-20200626144233385.png" alt="image-20200626144233385"></p><p>并设置到本机的rsshub地址，ttrss地址，如上。</p><p><img src="/public/2022/04/16/rss_local_install/image-20200626144330350.png" alt="image-20200626144330350"></p><p>打开bilibili up主的主页就能订阅了，订阅到ttrss。</p><p>这里有问题。需要解决。</p><p><img src="/public/2022/04/16/rss_local_install/image-20200626145153354.png" alt="image-20200626145153354"></p><p>本次安装教程到此结束，下期我们介绍全文获取功能，手机app的联动，即ttrss的设置问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 “&lt;a href=&quot;https://zhuanlan.zhihu.com/p/149452085&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二零年RSS杂谈&lt;/a&gt;”中说到，我想建立一种信息的获取系统，免受广告和推荐算法的困扰。&lt;/p&gt;
&lt;p&gt;我希望其的功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多终端 Web、PC、 mobile的同步&lt;/li&gt;
&lt;li&gt;全文获取能力&lt;/li&gt;
&lt;li&gt;可自定义过滤规则&lt;/li&gt;
&lt;li&gt;RSS源自定义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RSS源 rsshub&lt;/li&gt;
&lt;li&gt;RSS服务  ttrss&lt;/li&gt;
&lt;li&gt;RSS电脑手机软件：Android的Readably、Feedme，mac的reeder等等。windows上我暂时没有发现，我用的是ttrss的web界面。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="信息收集" scheme="https://talengu.github.io/public/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
    
      <category term="rss" scheme="https://talengu.github.io/public/tags/rss/"/>
    
      <category term="工具" scheme="https://talengu.github.io/public/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>【转】window软件运行时间</title>
    <link href="https://talengu.github.io/public/2022/04/15/soft_run_time/"/>
    <id>https://talengu.github.io/public/2022/04/15/soft_run_time/</id>
    <published>2022-04-15T12:39:04.000Z</published>
    <updated>2022-04-27T12:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a class="header-anchor" href="#背景">¶</a>背景</h2><p>对关注性能的程序开发人员而言，一个好的计时部件既是益友，也是良师。计时器既可以作为程序组件帮助程序员精确的控制程序进程，又是一件有力的调试武器，在有经验的程序员手里可以尽快的确定程序的性能瓶颈，或者对不同的算法作出有说服力的性能比较。</p><a id="more"></a><p>在Windows平台下，常用的计时器有两种，一种是<code>timeGetTime</code>多媒体计时器，它可以提供毫秒级的计时。但这个精度对很多应用场合而言还是太粗糙了。另一种是<code>QueryPerformanceCount</code>计数器，随系统的不同可以提供微秒级的计数。对于实时图形处理、多媒体数据流处理、或者实时系统构造的程序员，善用<code>QueryPerformanceCount/QueryPerformanceFrequency</code>是一项基本功。</p><p>本文要介绍的，是另一种直接利用<code>Pentium CPU</code>内部时间戳进行计时的高精度计时手段。以下讨论主要得益于<code>《Windows图形编程》</code>一书，第15页－17页，有兴趣的读者可以直接参考该书。关于RDTSC指令的详细讨论，可以参考Intel产品手册。本文仅仅作抛砖之用。</p><p>在 <code>Intel Pentium</code>以上级别的CPU中，有一个称为“时间戳（Time   Stamp）”的部件，它以64位无符号整型数的格式，记录了自CPU上电以来所经过的时钟周期数。由于目前的CPU主频都非常高，因此这个部件可以达到纳秒级的计时精度。这个精确性是上述两种方法所无法比拟的。</p><p>在Pentium以上的CPU中，提供了一条机器指令RDTSC（Read Time   Stamp Counter）来读取这个时间戳的数字，并将其保存在EDX:EAX寄存器对中。由于<code>EDX:EAX</code>寄存器对恰好是Win32平台下C++语言保存函数返回值的寄存器，所以我们可以把这条指令看成是一个普通的函数调用。像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inline   unsigned   __int64   GetCycleCount()   </span><br><span class="line">&#123;   </span><br><span class="line">  __asm   RDTSC   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是不行，因为RDTSC不被C++的内嵌汇编器直接支持，所以我们要用_emit伪指令直接嵌入该指令的机器码形式<code>0X0F</code>、<code>0X31</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  inline   unsigned   __int64   GetCycleCount()   </span><br><span class="line">  &#123;   </span><br><span class="line">    __asm   _emit   0x0F   </span><br><span class="line">    __asm   _emit   0x31   </span><br><span class="line">  &#125;   </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">以后在需要计数器的场合，可以像使用普通的Win32   API一样，调用两次GetCycleCount函数，比较两个返回值的差，像这样：</span><br></pre></td></tr></table></figure><p>unsigned   long   t;<br>t   =   (unsigned   long)GetCycleCount();<br>//Do   Something   time-intensive   ...<br>t   -=   (unsigned   long)GetCycleCount();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`《Windows图形编程》`第15页编写了一个类，把这个计数器封装起来。有兴趣的读者可以去参考那个类的代码。作者为了更精确的定时，做了一点小小的改进，把执行`RDTSC`指令的时间，通过连续两次调用`GetCycleCount`函数计算出来并保存了起来，以后每次计时结束后，都从实际得到的计数中减掉这一小段时间，以得到更准确的计时数字。但我个人觉得这一点点改进意义不大。在我的机器上实测，这条指令大概花掉了几十到100多个周期，在`Celeron 800MHz`的机器上，这不过是十分之一微秒的时间。对大多数应用来说，这点时间完全可以忽略不计；而对那些确实要精确到纳秒数量级的应用来说，这个补偿也过于粗糙了。   </span><br><span class="line">    </span><br><span class="line">  这个方法的优点是：   </span><br><span class="line">    </span><br><span class="line">  1. 高精度。可以直接达到纳秒级的计时精度（在1GHz的CPU上每个时钟周期就是一纳秒），这是其他计时方法所难以企及的。   </span><br><span class="line">    </span><br><span class="line">  2. 成本低。`timeGetTime`函数需要链接多媒体库 `winmm.lib`，`QueryPerformance*`函数根据MSDN的说明，需要硬件的支持（虽然我还没有见过不支持的机器）和KERNEL库的支持，所以二者都只能在Windows平台下使用（关于DOS平台下的高精度计时问题，可以参考`《图形程序开发人员指南》`，里面有关于控制定时器8253的详细说明）。但`RDTSC`指令是一条CPU指令，凡是i386平台下Pentium以上的机器均支持，甚至没有平台的限制（我相信i386版本UNIX和Linux下这个方法同样适用，但没有条件试验），而且函数调用的开销是最小的。   </span><br><span class="line">    </span><br><span class="line">  3. 具有和CPU主频直接对应的速率关系。一个计数相当于1/(CPU主频Hz数)秒，这样只要知道了CPU的主频，可以直接计算出时间。这和   `QueryPerformanceCount`不同，后者需要通过`QueryPerformanceFrequency`获取当前计数器每秒的计数次数才能换算成时间。   </span><br><span class="line">    </span><br><span class="line">  这个方法的缺点是：   </span><br><span class="line">    </span><br><span class="line">  1. 现有的C/C++编译器多数不直接支持使用RDTSC指令，需要用直接嵌入机器码的方式编程，比较麻烦。   </span><br><span class="line">    </span><br><span class="line">  2. 数据抖动比较厉害。其实对任何计量手段而言，精度和稳定性永远是一对矛盾。如果用低精度的`timeGetTime`来计时，基本上每次计时的结果都是相同的；而`RDTSC`指令每次结果都不一样，经常有几百甚至上千的差距。这是这种方法高精度本身固有的矛盾。   </span><br><span class="line">    </span><br><span class="line">  关于这个方法计时的最大长度，我们可以简单的用下列公式计算：</span><br></pre></td></tr></table></figure><p>自CPU上电以来的秒数   =   RDTSC读出的周期数   /   CPU主频速率（Hz）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">64位无符号整数所能表达的最大数字是`1.8×10^19`，在我的`Celeron   800`上可以计时大约700年（书中说可以在200MHz的Pentium上计时117年，这个数字不知道是怎么得出来的，与我的计算有出入）。无论如何，我们大可不必关心溢出的问题。   </span><br><span class="line">    </span><br><span class="line">下面是几个小例子，简要比较了三种计时方法的用法与精度   </span><br><span class="line"> ```c</span><br><span class="line">//Timer1.cpp   使用了RDTSC指令的Timer类//KTimer类的定义可以参见《Windows图形编程》P15   </span><br><span class="line">//编译行：CL Timer1.cpp   /link   USER32.lib   </span><br><span class="line">#include   &lt;stdio.h&gt;   </span><br><span class="line">#include   &quot;KTimer.h&quot;   </span><br><span class="line">main()   </span><br><span class="line">&#123;   </span><br><span class="line">  unsigned   t;   </span><br><span class="line">  KTimer   timer;   </span><br><span class="line">  timer.Start();   </span><br><span class="line">  Sleep(1000);   </span><br><span class="line">  t   =   timer.Stop();   </span><br><span class="line">  printf(&quot;Lasting   Time:   %d\n&quot;,t);   </span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line">//Timer2.cpp   使用了timeGetTime函数   </span><br><span class="line">//需包含&lt;mmsys.h&gt;，但由于Windows头文件错综复杂的关系   </span><br><span class="line">//简单包含&lt;windows.h&gt;比较偷懒：）   </span><br><span class="line">//编译行：CL   timer2.cpp   /link   winmm.lib     </span><br><span class="line">#include   &lt;windows.h&gt;   </span><br><span class="line">#include   &lt;stdio.h&gt;   </span><br><span class="line">  </span><br><span class="line">main()   </span><br><span class="line">&#123;   </span><br><span class="line">  DWORD   t1,   t2;   </span><br><span class="line">  t1   =   timeGetTime();   </span><br><span class="line">  Sleep(1000);   </span><br><span class="line">  t2   =   timeGetTime();   </span><br><span class="line">  printf(&quot;Begin   Time:   %u\n&quot;,   t1);   </span><br><span class="line">  printf(&quot;End   Time:   %u\n&quot;,   t2);   </span><br><span class="line">  printf(&quot;Lasting   Time:   %u\n&quot;,(t2-t1));   </span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line">//Timer3.cpp   使用了QueryPerformanceCounter函数   </span><br><span class="line">//编译行：CL   timer3.cpp   /link   KERNEl32.lib   </span><br><span class="line">#include   &lt;windows.h&gt;   </span><br><span class="line">#include   &lt;stdio.h&gt;   </span><br><span class="line">  </span><br><span class="line">main()   </span><br><span class="line">&#123;   </span><br><span class="line">  LARGE_INTEGER   t1,   t2,   tc;   </span><br><span class="line">  QueryPerformanceFrequency(&amp;tc);   </span><br><span class="line">  printf(&quot;Frequency:   %u\n&quot;,   tc.QuadPart);   </span><br><span class="line">  QueryPerformanceCounter(&amp;t1);   </span><br><span class="line">  Sleep(1000);   </span><br><span class="line">  QueryPerformanceCounter(&amp;t2);   </span><br><span class="line">  printf(&quot;Begin   Time:   %u\n&quot;,   t1.QuadPart);   </span><br><span class="line">  printf(&quot;End   Time:   %u\n&quot;,   t2.QuadPart);   </span><br><span class="line">  printf(&quot;Lasting   Time:   %u\n&quot;,(   t2.QuadPart-   t1.QuadPart));   </span><br><span class="line">&#125;   </span><br><span class="line">  </span><br><span class="line">////////////////////////////////////////////////   </span><br><span class="line">//以上三个示例程序都是测试1秒钟休眠所耗费的时间   </span><br><span class="line">//测试环境：Celeron   800MHz   /   256M   SDRAM       </span><br><span class="line">//         Windows   2000   Professional   SP2   </span><br><span class="line">//         Microsoft   Visual   C++   6.0   SP5   </span><br><span class="line">////////////////////////////////////////////////</span><br></pre></td></tr></table></figure><p>以下是Timer1的运行结果，使用的是高精度的<code>RDTSC</code>指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lasting   Time:   804586872</span><br></pre></td></tr></table></figure><p>以下是Timer2的运行结果，使用的是最粗糙的<code>timeGetTime API</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Begin   Time:   20254254   </span><br><span class="line">End   Time:   20255255   </span><br><span class="line">Lasting   Time:   1001</span><br></pre></td></tr></table></figure><p>以下是Timer3的运行结果，使用的是<code>QueryPerformanceCount API</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Frequency:   3579545   </span><br><span class="line">Begin   Time:   3804729124   </span><br><span class="line">End   Time:   3808298836   </span><br><span class="line">Lasting   Time:   3569712</span><br></pre></td></tr></table></figure><p>古人说，触类旁通。从一本介绍图形编程的书上得到一个如此有用的实时处理知识，我感到非常高兴。有美不敢自专，希望大家和我一样喜欢这个轻便有效的计时器。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#背景&quot;&gt;¶&lt;/a&gt;背景&lt;/h2&gt;
&lt;p&gt;对关注性能的程序开发人员而言，一个好的计时部件既是益友，也是良师。计时器既可以作为程序组件帮助程序员精确的控制程序进程，又是一件有力的调试武器，在有经验的程序员手里可以尽快的确定程序的性能瓶颈，或者对不同的算法作出有说服力的性能比较。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://talengu.github.io/public/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="软件运行" scheme="https://talengu.github.io/public/tags/%E8%BD%AF%E4%BB%B6%E8%BF%90%E8%A1%8C/"/>
    
  </entry>
  
</feed>
